<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0.3" created="2010-12-28 01:45"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Philippine Ruby Users Group</title>
	<link>http://pinoyrb.org</link>
	<description></description>
	<pubDate>Sat, 04 Dec 2010 05:47:48 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0.3</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://pinoyrb.org</wp:base_site_url>
	<wp:base_blog_url>http://pinoyrb.org</wp:base_blog_url>
		<wp:category><wp:category_nicename>iphone</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[iphone]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mysql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mysql]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>postgresql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[postgresql]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rails]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>activemodel</wp:tag_slug><wp:tag_name><![CDATA[activemodel]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>amazon</wp:tag_slug><wp:tag_name><![CDATA[amazon]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>crontab</wp:tag_slug><wp:tag_name><![CDATA[crontab]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>cucumber</wp:tag_slug><wp:tag_name><![CDATA[cucumber]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>delayed-job</wp:tag_slug><wp:tag_name><![CDATA[delayed job]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>dhh</wp:tag_slug><wp:tag_name><![CDATA[dhh]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>drupal</wp:tag_slug><wp:tag_name><![CDATA[drupal]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>dtach</wp:tag_slug><wp:tag_name><![CDATA[dtach]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>factory-girl</wp:tag_slug><wp:tag_name><![CDATA[factory girl]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>generator</wp:tag_slug><wp:tag_name><![CDATA[generator]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>hash</wp:tag_slug><wp:tag_name><![CDATA[hash]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[jquery]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>jruby</wp:tag_slug><wp:tag_name><![CDATA[jruby]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>karmic</wp:tag_slug><wp:tag_name><![CDATA[karmic]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>lua</wp:tag_slug><wp:tag_name><![CDATA[lua]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>nginx</wp:tag_slug><wp:tag_name><![CDATA[nginx]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>niginx</wp:tag_slug><wp:tag_name><![CDATA[niginx]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ohm</wp:tag_slug><wp:tag_name><![CDATA[ohm]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>osx</wp:tag_slug><wp:tag_name><![CDATA[osx]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>passenger</wp:tag_slug><wp:tag_name><![CDATA[passenger]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>prototype</wp:tag_slug><wp:tag_name><![CDATA[prototype]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rspec</wp:tag_slug><wp:tag_name><![CDATA[rspec]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rvm</wp:tag_slug><wp:tag_name><![CDATA[rvm]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>sinatra</wp:tag_slug><wp:tag_name><![CDATA[sinatra]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>solr</wp:tag_slug><wp:tag_name><![CDATA[solr]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>subversion</wp:tag_slug><wp:tag_name><![CDATA[subversion]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>tomcat</wp:tag_slug><wp:tag_name><![CDATA[tomcat]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>unit-test</wp:tag_slug><wp:tag_name><![CDATA[unit test]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>xss</wp:tag_slug><wp:tag_name><![CDATA[xss]]></wp:tag_name></wp:tag>
		
	<generator>http://wordpress.org/?v=3.0.3</generator>

		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=3</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2010-09-27 00:57:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=5</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2010-09-27 01:02:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=6</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Christopher Rigor]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2010-09-27 01:02:56</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=166</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Bryan Bibat]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2010-09-27 05:28:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=167</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2010-09-27 07:18:40</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date>2010-09-28 07:00:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=244</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Mark]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2010-09-28 07:17:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://pinoyrb.org/?p=246</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[George Mendoza]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2010-09-28 07:45:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Installing Nginx with Passenger on Snow Leopard Using MacPorts</title>
		<link>http://pinoyrb.org/rails/installing-nginx-with-passenger-on-snow-leopard-using-macports</link>
		<pubDate>Sun, 20 Dec 2009 09:18:44 +0000</pubDate>
		<dc:creator><![CDATA[Christopher Rigor]]></dc:creator>
		
		<category domain="tag"><![CDATA[niginx]]></category>

		<category domain="tag" nicename="niginx"><![CDATA[niginx]]></category>

		<category domain="tag"><![CDATA[osx]]></category>

		<category domain="tag" nicename="osx"><![CDATA[osx]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://crigor.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://www.macports.org/install.php">Install MacPorts</a> if you don&#8217;t have it.</p>
<p>Download and install the Portfile</p>
<pre class="brush: bash; auto-links: false; light: true;">
git clone git://github.com:crigor/admoolabs-ports.git ports
cd ports/nginx-0.7.64-passenger-2.2.8
sudo port -v install
</pre>
<p>You need to have ruby installed to compile passenger. In case you don&#8217;t have ruby, you can also get it from macports.</p>
<pre class="brush: bash; light: true;">sudo port -v install ruby</pre>
<p>If you have an older version of nginx installed using macports, it might move nginx.conf to nginx.conf.altered. Copy it back to nginx.conf if you need it. You can also use this <a href="http://gist.github.com/258789">nginx.conf</a>.</p>
<p>Edit /opt/local/etc/nginx.conf and add the following lines inside http {}</p>
<pre class="brush: bash; light: true;">
passenger_root /opt/local/lib/passenger;
passenger_ruby /opt/local/bin/ruby;
</pre>
<p>Change the ruby path if you&#8217;re not using ruby from macports.</p>
<p>For each rails app, you need to add the following, also inside http {}</p>
<pre class="brush: bash; auto-links: false; light: true;">
server {
  server_name labs.local;
  root /Users/crigor/admoolabs/labs/public;
  access_log /opt/local/var/log/nginx/labs.local.access.log;
  error_log /opt/local/var/log/nginx/labs.local.error.log;
  passenger_enabled on;
  rails_env development;
}
</pre>
<p>Check if your syntax is correct.</p>
<pre class="brush: bash; light: true;">
sudo /opt/local/sbin/nginx -t
</pre>
<p>If it is, you&#8217;ll see</p>
<pre class="brush: bash; light: true;">
the configuration file /opt/local/etc/nginx/nginx.conf syntax is ok
configuration file /opt/local/etc/nginx/nginx.conf test is successful
</pre>
<p>Start nginx with</p>
<pre class="brush: bash; light: true;">
sudo /opt/local/sbin/nginx
</pre>
<p>You won&#8217;t get any output if it starts correctly. Check if nginx is running</p>
<pre class="brush: bash; light: true;">
ps -e | grep nginx -i
(You should see something like these lines)
nginx: master process /opt/local/sbin/nginx
nginx: worker process
PassengerNginxHelperServer /opt/local/lib/passenger /opt/local/bin/ruby 3 4 0 6 0 300 1 nobody 4294967294 4294967294 /tmp/passenger.10755
</pre>
<p>MacPorts added a startup item which is disabled by default. To start it,</p>
<pre class="brush: bash; light: true;">
sudo launchctl load -w /Library/LaunchDaemons/org.macports.nginx.plist
</pre>
<p>You can stop nginx with</p>
<pre class="brush: bash; light: true;">
sudo launchctl stop org.macports.nginx
</pre>
<p>but it would just be started right away. If you want it to remain stopped, use</p>
<pre class="brush: bash; light: true;">
sudo launchctl unload /Library/LaunchDaemons/org.macports.nginx.plist
</pre>
<p>When you make changes to the config, reload the config with</p>
<pre class="brush: bash; light: true;">
sudo /opt/local/sbin/nginx -s reload
</pre>
<p>Check the other nginx options using</p>
<pre class="brush: bash; light: true;">/opt/local/sbin/nginx -h</pre>
<p>One more thing&#8230;<br />
When you add a rails or rack app, you need to specify a different server_name. You need to add it to /etc/hosts</p>
<pre class="brush: bash; light: true;">
127.0.0.1 localhost labs.local
</pre>
<p>Don&#8217;t you think it would be great if you can handle this automatically? Me too. Stay tuned for more. This shouldn&#8217;t be a <del>pane</del> pain. <img src='http://crigor.com/wp-includes/images/smilies/icon_wink.gif' alt=';)' class='wp-smiley' /> </p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Install MacPorts if you don&#8217;t have it.
Download and install the Portfile

git clone git://github.com:crigor/admoolabs-ports.git ports
cd ports/nginx-0.7.64-passenger-2.2.8
sudo port -v install

You need to have ruby installed to compile passenger. In case you don&#8217;t have ruby, you can also get it from macports.
sudo port -v install ruby
If you have an older version of nginx installed using macports, it might [...] ]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2009-12-20 09:18:44</wp:post_date>
		<wp:post_date_gmt>2009-12-20 09:18:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>installing-nginx-with-passenger-on-snow-leopard-using-macports</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/nginx-passenger-snow-leopard-macports/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/nginx-passenger-snow-leopard-macports/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/nginx-passenger-snow-leopard-macports/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[ae131d1221d4d01b17e2e813089286b4]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652441]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Learn RSpec in 15 Minutes or Less</title>
		<link>http://pinoyrb.org/rails/learn-rspec-in-15-minutes-or-less</link>
		<pubDate>Mon, 04 Jan 2010 01:36:15 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/learn-rspec-in-15-minutes-or-less/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>You can learn RSpec in less than 15 minutes especially if you are not Rails newbie. RSpec and BDD is a way of getting an application done right in an unbelievably short period of time.</p>

<p>BDD is behaviour-driven development. You think about all the specification and expectations regarding a project before working on it. That's what most software developers normally do. I spend at least one day just thinking about specifications and based on experience - I think about several details like:</p>

<ol>
<li>User Interface (Look and feel)</li>
<li>Project Goals (What makes the application fun? Who are your audience? How can you profit from the project?)</li>
<li>Plugins and Gems required by the project</li>
<li>Key Features - (What feature can't be deferred?)</li>
<li>What can go wrong? (OOP is now pronounced "uh-oh P")</li>
</ol>


<p>Regarding number 3 and 4, they are quite related and it usually takes over a day to think about everything. For number 5, I usually don't stress about it but I do consider things like server issues.</p>

<p>Let's do another blog application :</p>

<pre class="brush: ruby">
#on config/environments/test.rb

config.gem 'rspec-rails', :lib=>false
config.gem 'rspec', :lib=>false
config.gem 'cucumber', :lib=>false

Do rake gems:install RAILS_ENV=test

</pre>




<pre class="brush: ruby">
script/generate rspec_scaffold Post user_id:integer title:string body:text
</pre>


<p>The code above generates everything - MVC + Spec tests. Someone asked me if I do use the default scaffolds in Rails. I do use scaffolding but with RSpec (rspec_scaffold).</p>

<p>Adding Authlogic for authentication. (If required later, you can try declarative authorization or role requirement for role-based authorization.)</p>

<pre class="brush: ruby">

script/plugin install git://github.com/binarylogic/authlogic.git

</pre>


<p>Here's a nice write-up on <a href="http://rails.anyware-technologies.com.br/2009/04/21/tdd-on-rails-4-rspec-authlogic-factory_girl-and-resource_controller/" >Rspec and authlogic.</a></p>

<p>A more real-world example of an rspec model test (taken off a previous project of mine) of RSpec:</p>

<pre class="brush: ruby">

#in spec/models/article_spec.rb 

require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe Article do
  before(:each) do
    @article = Article.new
    @filename = "01.jpg"
    @file_type = "image/jpeg"
    @file_size = "304986"
    @file_updated_at    = Time.now
    @date = Time.now
  end

  it "should not be valid when empty" do
    @article.should_not be_valid
  end

  ['user_id, title, body, category_id, date'].each do |field|
    it "should require #{field}" do
     @article.should_not be_valid
    end
  end
  
  it "should be valid when details are not empty" do
    @article.user_id = 1
    @article.title = "A long day and things are still not right"
    @article.body = "There are many variations of passages of 
Lorem Ipsum available, but the majority have suffered 
alteration in some form, by injected humour, or randomised words 
which don't look even slightly believable. 
If you are going to use a passage of Lorem Ipsum, you need 
to be sure there isn't anything embarrassing hidden in the 
middle of text.

All the Lorem Ipsum generators on the Internet tend to 
repeat predefined chunks as necessary, making this the first 
true generator on the Internet. 
It uses a dictionary of over 200 Latin words, 
combined with a handful of model sentence structures, 
to generate Lorem Ipsum which looks reasonable. 
The generated Lorem Ipsum is therefore always free 
from repetition, injected humour, or non-characteristic 
words etc."
    @article.category_id = Category.new
    @article.photo_file_name = @filename
    @article.photo_content_type = @file_type
    @article.photo_file_size = @file_size
    @article.photo_updated_at = @file_updated_at
    @article.date = @date
    @article.should be_valid
  end


end

</pre>


<p><strong>RSpec in Rails 3</strong></p>

<p>Based on observation, RSpec has better acceptance in the rails community than the default test suite. I am expecting Rails 3 book to cover more about automated testing with RSpec.</p>

<p>Happy New Year! I love Rails and all the people working hard to make it better.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>You can learn RSpec in less than 15 minutes especially if you are not Rails newbie. RSpec and BDD is a way of getting an application done right in an unbelievably short period of time.</p>

<p>BDD is behaviour-driven development. You think about all the specification and expectations regarding a project before working on it. That's what most software developers normally do. I spend at least one day just thinking about specifications and based on experience - I think about several details like:</p>]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2010-01-04 01:36:15</wp:post_date>
		<wp:post_date_gmt>2010-01-04 01:36:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>learn-rspec-in-15-minutes-or-less</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[197858755]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/learn-rspec-in-15-minutes-or-less/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[261fe24c5ce4252cbb14ec17c58cea75]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652354]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 2.3 XSS Plugin</title>
		<link>http://pinoyrb.org/rails/rails-2-3-xss-plugin</link>
		<pubDate>Mon, 18 Jan 2010 04:30:53 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[xss]]></category>

		<category domain="tag" nicename="xss"><![CDATA[xss]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/rails-2-dot-3-xss-plugin/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is not new to those closely watching updates regarding Rails development: for Rails 3 applications, there is no need to use the h() function to escape html for security reasons.</p>

<pre class="brush: ruby">
<%= h @something %>
is now the same as
<%= @something %>
To display the HTML, use:
<%= raw @something %>
</pre>


<p>To have this feature for Rails 2.3.x applications, there is a need to install the Rails XSS plugin.</p>

<p>Some installation notes:</p>

<p>Install rails 2.3.5 or higher, or freeze rails from 2-3-stable.</p>

<pre class="brush: ruby">
gem install rails 
</pre>


<p>Install erubis</p>

<pre class="brush: ruby">
gem install erubis
</pre>


<p> Install this plugin</p>

<pre class="brush: ruby">
script/plugin install git://github.com/NZKoz/rails_xss.git
</pre>


<p>I you are using exception notification plugin for production (which, by the way, you should), this fork of the original plugin might help you avoid any weird issues related to the XSS plugin and Rails 2.3.5:</p>

<p>http://github.com/jeremyevans/exception_notification</p>

<pre class="brush: ruby">
script/plugin install git://github.com/jeremyevans/exception_notification.git
</pre>


<p>By the way, what does the h() stand for?</p>

<p>hack me! hack me hack me. :D</p>

<p>Ok Thanks to Jesse for informing me, h stands for html_escape (because that's just what it does).</p>

<p>Update:</p>

<p><strong>HAML escape html option</strong></p>

<p>Reading on this <a href="http://nex-3.com/posts/86-rails-xss-protection-and-haml" >post</a>, it seems that it's a much better option for me right now.</p>

<pre class="brush: ruby">
gem install haml (current version today is 2.2.7)

and add: 
Haml::Template.options[:escape_html]=true
below the Rails config on environment.rb


</pre>



]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This is not new to those closely watching updates regarding Rails development: for Rails 3 applications, there is no need to use the h() function to escape html for security reasons.</p>

<pre>
<%= h @something %>]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2010-01-18 04:30:53</wp:post_date>
		<wp:post_date_gmt>2010-01-18 04:30:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-2-3-xss-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/rails-2-dot-3-xss-plugin/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[ff01d2e898ff8d1591542712fed74eac]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652312]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to Install RVM and Rails 3 on Snow Leopard</title>
		<link>http://pinoyrb.org/ruby/how-to-install-rvm-and-rails-3-on-snow-leopard</link>
		<pubDate>Mon, 25 Jan 2010 05:12:04 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[osx]]></category>

		<category domain="tag" nicename="osx"><![CDATA[osx]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[rvm]]></category>

		<category domain="tag" nicename="rvm"><![CDATA[rvm]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/how-to-install-rvm-and-rails-3-on-snow-leopard/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is a continuation of my post on installing Ruby version manager or multiple versions of Ruby for Unix. This time it's about OS X 10.6.1 or the Snow Leopard.</p>

<p>Snow Leopard includes Ruby and Rails by default if you install XCode. The version is 1.8.7 and 2.2.2 for each, respectively. This would not suffice for most developers because we need to start porting to Ruby 1.9 and start experimenting with Rails 3. The goal is to just keep moving forward and use the best version that exists.</p>

<p>Update: Since I am getting a lot of feedback regarding this post. I noticed it's not newbie-friendly. Sorry. Here are the missing steps.</p>

<p>My Apache2  is installed in /usr/local and PHP5 is compiled by source. I do not use what Leopard has by default because it wasn't working well for me.</p>

<p>In case it happens for you and you want to install PHP5 and more modules. See the following guides:</p>

<p><a href="http://diymacserver.com/installing-apache/compiling-apache-in-64-bits-mode-on-leopard/" >Compiling Apache in 64-bits Mode on Leopard </a></p>

<br />


<p><a href="http://diymacserver.com/installing-php/" >Installing PHP</a></p>

<br />


<p><a href="http://diymacserver.com/installing-apache/starting-apache-at-boot-on-leopard" >Starting Apache at boot on Leopard </a></p>

<br />


<p>I also installed <a href="http://www.finkproject.org/" >Fink</a></p>

<p>So at the very least, you can skip reading what's written on the links above if your Apache2 installed is OK.</p>

<p>Install <a href="http://www.gnu.org/software/wget/" > WGET</a> (but you can also use curl) or just download via web browser.</p>

<pre class="brush: ruby">
tar -xzvf wget-latest.tar.gz
cd wget-1.11.4/
./configure
make
sudo make install
</pre>


<p>Install Readline</p>

<pre class="brush: ruby">
wget ftp://ftp.cwru.edu/pub/bash/readline-6.0.tar.gz
tar -xvzf readline-6.0.tar.gz
cd readline-6.0
./configure
make
sudo make install
</pre>


<p>Install Most</p>

<pre class="brush: ruby">
wget ftp://space.mit.edu/pub/davis/most/most-5.0.0.tar.gz
tar xvzf most-5.0.0.tar.gz
cd most-5.0.0
./configure
make
sudo make install
</pre>


<p>RVM installation for OS X.</p>

<p>Please read the guides on the website of Wayne. <a href="http://rvm.beginrescueend.com/" > Click here</a> to go there.</p>

<p>Note: The path "/usr/local" is important. This makes a bit of a difference between installing on Ubuntu/Debian and OS X.</p>

<pre class="brush: ruby">
sudo gem install rvm #install rvm 
rvm-install 
rvm install 1.8.7 -C --enable-shared,--with-readline-dir=/usr/local
rvm install 1.9.1 -C --enable-shared,--with-readline-dir=/usr/local
rvm install 1.9.2 -C --enable-shared,--with-readline-dir=/usr/local
rvm 1.8.7 --default
</pre>


<p><strong>Install Prerequisites</strong></p>

<p>Git</p>

<p>Hivelogic tutorials are good. Check out <a href="http://hivelogic.com/articles/compiling-git-on-snow-leopard/" > how to install Git on Leopard.</a></p>

<p>SQLite 3</p>

<pre class="brush: ruby">
wget http://www.sqlite.org/sqlite-amalgamation-3.6.22.tar.gz
tar xvzf sqlite-amalgamation-3.6.22.tar.gz
cd sqlite-3.6.22/
./configure
make
sudo make install
</pre>


<p>MySQL</p>

<p>Download from <a href="http://dev.mysql.com/downloads/mysql/5.1.html#macosx-dmg" > MYSQL website</a></p>

<p>Select the version compatible with your Mac.</p>

<pre class="brush: ruby">
sudo /Library/StartupItems/MySQLCOM/MySQLCOM start
</pre>


<p>Install Rails 3.0 Pre</p>

<pre class="brush: ruby">
rvm use 1.8.7%rails3 
gem install rake rack test-spec thor sqlite3-ruby 
gem install mysql -- --with-mysql-dir=/usr/local/mysql    
git clone git://github.com/rails/rails.git && cd rails
rake package && gem install -f */pkg/*.gem pkg/*.gem  
cd arel && thor :build && thor :install 
cd ~

</pre>


<p>And all this didn't take time for me even while writing this post. I now have a successful install for Rails 3 Pre. Same result with Ubuntu Karmic Koala.</p>

<pre class="brush: ruby">

Katherine-Pes-iMac:~ katz$ rails -v
Rails 3.0.pre

rails new yourawesomeapp -d mysql 
</pre>


<p>I suggest replacing the .gitignore file immediately with the .gitignore you've been using or add those necessary entries.</p>

<p>An example of a complete .gitignore file is <a href="http://github.com/railsdog/spree/blob/master/.gitignore" >here.</a></p>

<p>But often this is just what you need:</p>

<pre class="brush: ruby">
*~
.#*
.DS_Store
backups/* #[I keep some files relevant to the application like the database dump on the same folder] 
log/* #[we don't need the the log files submitted
 
</pre>


<p>Keep adding in other entries later.</p>

<p>Update:</p>

<p>Install Rails 3 Beta</p>

<pre class="brush: ruby">
gem install tzinfo builder memcache-client rack rack-test rack-mount erubis mail text-format thor bundler i18n
gem install rails --pre
</pre>


<p>Some guides out there are wrong. Do not use "sudo" when you are using RVM. Your gems are on your user's home directory.</p>

<p>If things are not working and you have followed installation guides. You're missing an important part which is called the .bash_profile. Please review your .bash_profile first. I can't explain every line but every line is important.</p>

<p>This is what I have right now:</p>

<pre class="brush: ruby">
Katherine-Pes-iMac:~ katz$ cat .bash_profile

export PATH=/usr/local/bin/:/usr/local/sbin/:/opt/local/bin/:/opt/local/sbin/
:/Users/katz/.rvm/rubies/ruby-1.8.7-p248/bin:
/Users/katz/.rvm/gems/ruby-1.8.7-p248/bin:
/Users/katz/.rvm/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
export PATH="/usr/local/bin:/usr/local/sbin:
/usr/local/mysql/bin:$PATH" 

export APACHE2="/usr/local/apache2/bin"
export PATH="${APACHE2}:${PATH}"

export EDITOR='mate -w'
export CLICOLOR=1

export LSCOLORS=ExFxCxDxBxegedabagacad
export PAGER=most

if [[ -s /Users/katz/.rvm/scripts/rvm ]] ; then source /Users/katz/.rvm/scripts/rvm ; fi


alias start_mysql="/Library/StartupItems/MySQLCOM/MySQLCOM start"
alias stop_mysql="/Library/StartupItems/MySQLCOM/MySQLCOM stop"

. /sw/bin/init.sh

function gemdir {
if [[ -z "$1" ]] ; then
echo "gemdir expects a parameter, which should be a valid rvm Ruby selector"
else
rvm "$1"
cd `rvm gemdir`
pwd
fi
}

</pre>


<p>As you can see, there's RVM code. If you follow RVM installation properly you should have something like that. Aliases are shortcuts for starting/stopping MYSQL but mine is automatically loaded on startup.</p>

<p>Have fun :)</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This is a continuation of my post on installing Ruby version manager or multiple versions of Ruby for Unix. This time it's about OS X 10.6.1 or the Snow Leopard.</p>

<p>Snow Leopard includes Ruby and Rails by default if you install XCode. The version is 1.8.7 and 2.2.2 for each, respectively. This would not suffice for most developers because we need to start porting to Ruby 1.9 and start experimenting with Rails 3. The goal is to just keep moving forward and use the best version that exists.</p>]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2010-01-25 05:12:04</wp:post_date>
		<wp:post_date_gmt>2010-01-25 05:12:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-install-rvm-and-rails-3-on-snow-leopard</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/how-to-install-rvm-and-rails-3-on-snow-leopard/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[cae307f1d004578a4fd982ef5e95b411]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652292]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Including Staging in Asset Packaging</title>
		<link>http://pinoyrb.org/ruby/including-staging-in-asset-packaging</link>
		<pubDate>Fri, 29 Jan 2010 20:05:26 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/1/29/including_staging_in_asset_packaging/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If ever you want to include staging when using <a href='http://github.com/sbecker/asset_packager'>asset packager</a>, just write this initializer</p>
<code><pre><span class="comment"># config/initializers/asset_packager.rb</span>
<span class="constant">Synthesis</span><span class="punct">::</span><span class="constant">AssetPackage</span><span class="punct">.</span><span class="ident">merge_environments</span> <span class="punct">=</span> <span class="punct">[</span> <span class="punct">'</span><span class="string">staging</span><span class="punct">',</span> <span class="punct">'</span><span class="string">production</span><span class="punct">'</span> <span class="punct">]</span>
</pre></code>
<p>Now your staging site will package assets, minify them, etc.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>If ever you want to include staging when using <a href="http://github.com/sbecker/asset_packager">asset packager</a>, just write this initializer</p>]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2010-01-29 20:05:26</wp:post_date>
		<wp:post_date_gmt>2010-01-29 20:05:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>including-staging-in-asset-packaging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/1/29/including_staging_in_asset_packaging/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[c850327f33792644fcd895f33af8b457]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652203]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[161787849]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Hello whenever, goodbye manual crontab</title>
		<link>http://pinoyrb.org/ruby/hello-whenever-goodbye-manual-crontab</link>
		<pubDate>Sat, 30 Jan 2010 18:25:20 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[crontab]]></category>

		<category domain="tag" nicename="crontab"><![CDATA[crontab]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/1/30/hello_whenever_goodbye_manual_crontab/</guid>
		<description></description>
		<content:encoded><![CDATA[Do you hate managing cron configurations manually? How about maintaining different cron configs for every Rails application you might possibly have?
<h2 id="wheneverize">Wheneverize</h2>
Say hello to a ruby gem called <a href="http://github.com/javan/whenever">whenever</a>. It basically allows you to configure your cron jobs in ruby. An example to illustrate:

<code> </code>

<code>
<pre><span class="comment"># assuming you have gemcutter in your list of sources</span>
<span class="ident">sudo</span> <span class="ident">gem</span> <span class="ident">install</span> <span class="ident">whenever</span>

<span class="comment"># in your rails application</span>
<span class="ident">wheneverize</span> <span class="punct">.</span>

<span class="comment"># now edit config/schedule.rb</span>
<span class="ident">vi</span> <span class="ident">config</span><span class="punct">/</span><span class="ident">schedule</span><span class="punct">.</span><span class="ident">rb</span></pre>
</code>

Now you’re presented with a very easy to understand Ruby DSL. No more reading cron manuals, it’s very straightforward and intuitive.

<code> </code>

<code>
<pre><span class="ident">set</span> <span class="symbol">:output</span><span class="punct">,</span> <span class="punct">"</span><span class="string">/opt/myapp.com/current/log/cron_log.log</span><span class="punct">"</span>

<span class="ident">every</span> <span class="symbol">:reboot</span> <span class="keyword">do</span>
  <span class="ident">rake</span> <span class="punct">"</span><span class="string">solr:start</span><span class="punct">"</span>
<span class="keyword">end</span>

<span class="ident">every</span> <span class="symbol">:friday</span><span class="punct">,</span> <span class="symbol">:at</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">8am</span><span class="punct">'</span> <span class="keyword">do</span>
  <span class="ident">rake</span> <span class="punct">"</span><span class="string">newsletters:deliver</span><span class="punct">"</span>
<span class="keyword">end</span>

<span class="ident">every</span> <span class="number">1</span><span class="punct">.</span><span class="ident">day</span><span class="punct">,</span> <span class="symbol">:at</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">12am</span><span class="punct">'</span> <span class="keyword">do</span>
  <span class="ident">rake</span> <span class="punct">"</span><span class="string">harvester:analyze</span><span class="punct">"</span>
<span class="keyword">end</span></pre>
</code>

Now this ruby file will not be enough to run itself. Fortunately, if you’re using capistrano, updating your cron config after every deploy is dead simple:

<code> </code>

<code>
<pre><span class="comment"># in your config/deploy/production.rb maybe</span>

<span class="ident">namespace</span> <span class="symbol">:deploy</span> <span class="keyword">do</span>
  <span class="ident">desc</span> <span class="punct">"</span><span class="string">Update the crontab file</span><span class="punct">"</span>
  <span class="ident">task</span> <span class="symbol">:update_crontab</span><span class="punct">,</span> <span class="symbol">:roles</span> <span class="punct">=&gt;</span> <span class="symbol">:db</span> <span class="keyword">do</span>
    <span class="ident">run</span> <span class="punct">"</span><span class="string">cd <span class="expr">#{release_path}</span> &amp;&amp; whenever --update-crontab <span class="expr">#{application}</span></span><span class="punct">"</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="ident">after</span> <span class="punct">"</span><span class="string">deploy:restart</span><span class="punct">",</span> <span class="punct">"</span><span class="string">deploy:update_crontab</span><span class="punct">"</span></pre>
</code>

Say goodbye to minding crontabs saved on different servers and say hello to a well maintained and managed configuration in your rails app.]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Do you hate managing cron configurations manually? How about maintaining different cron configs for every Rails application you might possibly have?</p>

<h2>Wheneverize</h2>

<p>Say hello to a ruby gem called <a href="http://github.com/javan/whenever">whenever</a>. It basically allows you to configure your cron jobs in ruby. An example to illustrate:</p>]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2010-01-30 18:25:20</wp:post_date>
		<wp:post_date_gmt>2010-01-30 18:25:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>hello-whenever-goodbye-manual-crontab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/1/30/hello_whenever_goodbye_manual_crontab/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[06337d33d357c057a4786b44ffd5f5ce]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652237]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[162270189]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ActiveRecord Migrations for Sinatra</title>
		<link>http://pinoyrb.org/ruby/activerecord-migrations-for-sinatra</link>
		<pubDate>Fri, 19 Feb 2010 12:35:21 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[sinatra]]></category>

		<category domain="tag" nicename="sinatra"><![CDATA[sinatra]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/activerecord-migrations-for-sinatra/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I have learned that <a href="http://sequel.rubyforge.org/" >Sequel ORM</a> was simple and is the preferred ORM for Sinatra developers. But I feel so attached to ActiveRecord right now. Basically some of the gems I am using are actually extensions to ActiveRecord and I have grown to love these Ruby gems despite being ActiveRecord-centric. They wouldn't work with DataMapper or anything else.</p>

<p>Creating migrations in Sinatra is simple. Just create db/migrate folder. Create a db/config.yml which is similar to database.yml in Rails.</p>

<p>Example config file:</p>

<pre class="brush: ruby">

development:
  adapter: mysql
  encoding: utf8
  database: mywayorthehighway
  username: root
  password: 

</pre>


<p>Of course, you can have other environments there.</p>

<p>The very lengthy code below is the magic that makes migrations work. Add them up on the Rakefile.</p>

<pre class="brush: ruby">

require 'rake'
require 'active_record'
require 'yaml'


desc "Import DB"
task :import => :environment do
url = ENV['URL'] or raise "No url specified, use URL="

require 'rest_client'
posts = YAML.load RestClient.get(url)

posts.each do |post|
DB[:posts] << post
end
end

task :default => :dbsetup

task :loadconfig do
DBconfig = YAML::load( File.open('db/config.yml') )['development']
end

desc "Setup db"
task :dbsetup => :loadconfig do
create(DBconfig)
migrate(DBconfig)
end

desc "Do migrations"
task :migrate => :loadconfig do
migrate(DBconfig)
end

def create( config )
begin
if config['adapter'] =~ /sqlite/
if File.exist?(config['database'])
$stderr.puts "#{config['database']} already exists"
else
begin
# Create the SQLite database
ActiveRecord::Base.establish_connection(config)
ActiveRecord::Base.connection
rescue
$stderr.puts $!, *($!.backtrace)
$stderr.puts "Couldn't create database for #{config.inspect}"
end
end
return # Skip the else clause of begin/rescue
else
ActiveRecord::Base.establish_connection(config)
ActiveRecord::Base.connection
end
rescue
case config['adapter']
when 'mysql'
@charset = ENV['CHARSET'] || 'utf8'
@collation = ENV['COLLATION'] || 'utf8_general_ci'
begin
ActiveRecord::Base.establish_connection(config.merge('database' => nil))
ActiveRecord::Base.connection.create_database(config['database'], :charset => (config['charset'] || @charset), 
:collation => (config['collation'] || @collation))
ActiveRecord::Base.establish_connection(config)
rescue
$stderr.puts "Couldn't create database for #{config.inspect}, charset: #{config['charset'] || @charset}, 
collation: #{config['collation'] || @collation}"
end
when 'postgresql'
@encoding = config[:encoding] || ENV['CHARSET'] || 'utf8'
begin
ActiveRecord::Base.establish_connection(config.merge('database' => 'postgres', 'schema_search_path' => 'public'))
ActiveRecord::Base.connection.create_database(config['database'], config.merge('encoding' => @encoding))
ActiveRecord::Base.establish_connection(config)
rescue
$stderr.puts $!, *($!.backtrace)
$stderr.puts "Couldn't create database for #{config.inspect}"
end
end
else
$stderr.puts "#{config['database']} already exists"
end
end

def migrate( config )
ActiveRecord::Base.logger = Logger.new(STDOUT)
ActiveRecord::Base.establish_connection(config)
ActiveRecord::Migrator.up "db/migrate/"
end

</pre>


<p>So let's check that before running "rake."</p>

<pre class="brush: ruby">
rake -T
(in /Users/katz/web/bridgeutopiaweb)
rake dbsetup  # Setup db
rake import   # Import DB
rake migrate  # Do migrations
rake start    # Start the app server
rake stop     # Stop the app server
</pre>



]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>I have learned that <a href="http://sequel.rubyforge.org/" target="_blank">Sequel ORM</a> was simple and is the preferred ORM for Sinatra developers. But I feel so attached to ActiveRecord right now. Basically some of the gems I am using are actually extensions to ActiveRecord and I have grown to love these Ruby gems despite being ActiveRecord-centric. They wouldn't work with DataMapper or anything else.</p>]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2010-02-19 12:35:21</wp:post_date>
		<wp:post_date_gmt>2010-02-19 12:35:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>activerecord-migrations-for-sinatra</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/activerecord-migrations-for-sinatra/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[1c8cb6432c97704def8a908cd6f0eb50]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652451]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Our first app in Rails 3</title>
		<link>http://pinoyrb.org/rails/our-first-app-in-rails-3</link>
		<pubDate>Tue, 23 Feb 2010 05:21:10 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/2/22/our_first_app_in_rails_3/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We&#8217;re building a very simple app, and we decided to start with Rails3. Here is our stack so far:</p>

<ol>
<li>Rails3</li>

<li>HAML</li>

<li>Paperclip</li>

<li>is<em>taggable</em></li>

<li>twitter-auth</li>

<li>mocha</li>

<li>shoulda</li>

<li>factory<em>girl</em></li>

<li>theia</li>
</ol>

<h2 id='gotcha_number_one_shoulda'>Gotcha Number One: Shoulda</h2>

<p>When we try using shoulda as advertised, we run into a problem where bundler requires it before Rails.root or RAILS<em>ROOT is set. Hence we had to work around it by putting shoulda and factory</em>girl in a different bundler group (KUDOS to <a href='http://timmedina.net'>tim</a> for the idea).</p>

<h2 id='our_gemfile_so_far'>Our Gemfile so far</h2>

<p>http://gist.github.com/311893</p>

<p>NOTE: We put the code</p>
<code><pre><span class="constant">Bundler</span><span class="punct">.</span><span class="ident">require</span><span class="punct">(</span><span class="symbol">:thoughtbot</span><span class="punct">)</span>
</pre></code>
<p>Somewhere in our <code>test_helper</code> to require shoulda without it complaining.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>We&#8217;re building a very simple app, and we decided to start with Rails3. Here is our stack so far:</p>

<ol>
<li>Rails3</li>

<li>HAML</li>

<li>Paperclip</li>

<li>is<em>taggable</em></li>

<li>twitter-auth</li>

<li>mocha</li>

<li>shoulda</li>

<li>factory<em>girl</em></li>
</ol>]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2010-02-23 05:21:10</wp:post_date>
		<wp:post_date_gmt>2010-02-23 05:21:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>our-first-app-in-rails-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/2/22/our_first_app_in_rails_3/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[d9dc2aa65d98cbae86ce5c80b5bbc442]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652153]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails3: Factory girl and file uploads</title>
		<link>http://pinoyrb.org/ruby/rails3-factory-girl-and-file-uploads</link>
		<pubDate>Wed, 24 Feb 2010 05:05:50 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[factory girl]]></category>

		<category domain="tag" nicename="factory-girl"><![CDATA[factory girl]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/2/23/rails3_factory_girl_and_file_uploads/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Our experience so far with rails 3 has been pretty good. Some of the modules and internals of rails were renamed, but so far we haven&#8217;t experienced anything that changed drastically. Most of the stuff still have some parallelisms.</p>

<h2 id='actioncontrollertestprocess_is_now_actiondispatchtestprocess'>ActionController::TestProcess is now ActionDispatch::TestProcess</h2>

<p>We had a model with a paperclip attachment, which we required the presence of. In order to specify that in our spec/support/factories.rb, we just had to do the following:</p>
<script src='http://gist.github.com/313121.js?file=factories.rb' />
<p>One other important detail here is that right now, Rails doesn&#8217;t have the option of overriding the fixtures file path when you&#8217;re using Rspec. To overcome that problem, I just had to add a file in <code>spec/support</code>. For our purposes we just named it <code>001_fixture_path.rb</code>. As soon as RSpec and Rails fixes their integration problem, we&#8217;ll just remove the file.</p>
<script src='http://gist.github.com/313126.js?file=001_fixture_path.rb' />
<p>Next up, we&#8217;re gonna share our very exciting and slightly painful experience with upgrading to RSpec 2.0.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Our experience so far with rails 3 has been pretty good. Some of the modules and internals of rails were renamed, but so far we haven&#8217;t experienced anything that changed drastically. Most of the stuff still have some parallelisms.</p>]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2010-02-24 05:05:50</wp:post_date>
		<wp:post_date_gmt>2010-02-24 05:05:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails3-factory-girl-and-file-uploads</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/2/23/rails3_factory_girl_and_file_uploads/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[47f67e42046cec1f66a83fe52303abdd]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654664]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Unit tests: Are they bad?</title>
		<link>http://pinoyrb.org/ruby/unit-tests-are-they-bad</link>
		<pubDate>Mon, 01 Mar 2010 02:16:54 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[unit test]]></category>

		<category domain="tag" nicename="unit-test"><![CDATA[unit test]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/2/28/unit_tests_are_they_bad/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Jay fields wrote a blog post about the <a href='http://blog.jayfields.com/2010/02/maintainability-of-unit-tests.html'>maintainability of tests</a>. Basically his takeaways were the following:</p>

<ol>
<li>You should <strong>probably</strong> write unit tests</li>

<li>Only focus on the test cases which provides the <strong>most business value</strong>.</li>

<li>Make tests <strong>more concise</strong>.</li>
</ol>

<p>I have been on the other side of the fence, and have gone berserk writing tests for all cases, working hard to increase the coverage of my code. I have even followed the &#8220;Unit tests should only access itself, and should only interact with other objects via mocks and stubs&#8221; advice. All that led to just more maintainability, so I agree that there is a striking balance to maximize the ROI of your testing efforts.</p>

<h2 id='most_of_the_data_validation_parts_are_important'>Most of the data validation parts are important</h2>

<p>In order to address maintainability and conciseness while still testing almost all of your validations, we just use macros. An example of this would be:</p>
<script src='http://gist.github.com/318023.js?file=item_spec.rb' />
<p>The bulk of the work here would be writing the matchers, but if you create enough reusable matchers anyway, the return of investment for writing the matchers would be very high. (I&#8217;ve written Rails 3 / Rspec 2 only matchers which can be found <a href='http://rubygems.org/gems/rspec-rails-matchers'>here</a>.</p>

<h2 id='conciseness_is_king'>Conciseness is king!</h2>

<p>Again, I just have to stress the value of matchers here. A concrete case here is date parsing, and its importance to us (the product makers) that it just works. Example:</p>
<script src='http://gist.github.com/318028.js?file=item_spec_date.rb' />
<h2 id='test_wisely'>Test wisely</h2>

<p>If you charge by the hour, you have to take into consideration that every programming decision you make will cost your client money. If you&#8217;re working for your own product, you have to weigh the benefit of having 90% test coverage versus having all the cool effects in your UI for example.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Jay fields wrote a blog post about the <a href="http://blog.jayfields.com/2010/02/maintainability-of-unit-tests.html">maintainability of tests</a>. Basically his takeaways were the following:</p>

<ol>
<li>You should <strong>probably</strong> write unit tests</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2010-03-01 02:16:54</wp:post_date>
		<wp:post_date_gmt>2010-03-01 02:16:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>unit-tests-are-they-bad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/2/28/unit_tests_are_they_bad/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[66204e3acd12d64936051105effff9fd]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654656]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails3: ActiveModel Lint</title>
		<link>http://pinoyrb.org/rails/rails3-activemodel-lint</link>
		<pubDate>Thu, 04 Mar 2010 23:47:59 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[activemodel]]></category>

		<category domain="tag" nicename="activemodel"><![CDATA[activemodel]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/3/4/rails3_activemodel_lint/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you&#8217;re building ActiveModel-like classes, it&#8217;s quite useful that you run the ActiveModel Lint tests that&#8217;s shipped with Rails 3. Unfortunately, if you&#8217;re using Rspec 2.0, using the Test::Unit version doesn&#8217;t fly as well.</p>

<p>I added a behavior in our rspec-rails-matchers gem which enables you to do the following:</p>
<script src='http://gist.github.com/322272.js?file=reply_spec.rb' />
<p>Check it out at http://rubygems.org/gems/rspec-rails-matchers</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>If you&#8217;re building ActiveModel-like classes, it&#8217;s quite useful that you run the ActiveModel Lint tests that&#8217;s shipped with Rails 3. Unfortunately, if you&#8217;re using Rspec 2.0, using the Test::Unit version doesn&#8217;t fly as well.</p>]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2010-03-04 23:47:59</wp:post_date>
		<wp:post_date_gmt>2010-03-04 23:47:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails3-activemodel-lint</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/3/4/rails3_activemodel_lint/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[e48d27791e950a190f79c33669df0a4f]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654650]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[150334320]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 on Ubuntu Karmic Koala (Fivebean)</title>
		<link>http://pinoyrb.org/rails/rails-3-on-ubuntu-karmic-koala-fivebean</link>
		<pubDate>Sun, 04 Apr 2010 07:49:52 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[karmic]]></category>

		<category domain="tag" nicename="karmic"><![CDATA[karmic]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/rails-3-on-ubuntu-karmic-koala-fivebean/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is one of my "Getting Things Right" posts, a.k.a, "How The Hell Do I Set Up My Rails Site on a VPS host." It’s almost always more difficult to get things right than get things done. I tried Slicehost and Linode before and I always ended up rebuilding because I couldn't get the right setup.</p>

<p>Rails 3 is a little more painful than 2.3.5. This is not due to the framework itself but due to deployment issues. This dissuades a lot of people from even trying. Why should you bother using something that doesn't work on any of your servers? But which is important? "Your application" or "your server" ? Remember that you server exists for your application and not otherwise.</p>

<p>I thought about the idea today as i's Easter Sunday. Happy Easter, all. It’s time to kill the stuff that "kills your time," and wake up from a really bad dream full of passenger errors.</p>

<p>So little time, so much to do. Why should I bother thinking too much. As someone told me, it’s not worth pulling your hair for - got get a
<a href="http://fivebean.com/account/aff.php?aff=135" >Fivebean</a>
plan.  Fivebean offers fairly cheap VPS hosting. VPS Starter is good enough for a Rails 3 app and some static sites. When your app has probably over 500 users or so and you feel that things are getting slower, upgrade to VPS Bite or VPS Turbo. Do not worry about scaling. 70% of those who do, don’t even get there. I am still paying Dreamhost however and I keep a few sites there. The only thing I like about Dreamhost is it’s good enough as a staging server for Rails apps but they impose a lot of limits - memory limits. They can kill the Ruby processes and your site will be inaccessible for some time. You have the option to contact them and let them move your site to a better server or just get a VPS. Dreamhost PS may not be a very good option as well.</p>

<p><strong>32-bit or 64-bit?</strong></p>

<p>I always choose 32-bit regardless of the plan I take. I took a plan with 768MB memory and still chose 32-bit because based on experience, 768MB is never enough for some applications to run.</p>

<p>So here's the lengthy guide on setting up Rails 3 on Ubuntu Karmic Koala. I may add in comments and stuff I missed later but this should work for you as it worked for me.</p>

<pre class="brush: ruby">

ssh root@your-ip-address

or ssh anotherroot@your-ip-address

</pre>


<p>When using root, you may not use “sudo” anymore.</p>

<p>Edit sources list:</p>

<pre class="brush: ruby">
nano /etc/apt/sources.list

It should have: 

deb http://us.archive.ubuntu.com/ubuntu/ karmic main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic main restricted

deb http://us.archive.ubuntu.com/ubuntu/ karmic-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic-updates main restricted

deb http://us.archive.ubuntu.com/ubuntu/ karmic universe
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic universe
deb http://us.archive.ubuntu.com/ubuntu/ karmic-updates universe
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic-updates universe

deb http://us.archive.ubuntu.com/ubuntu/ karmic multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic multiverse
deb http://us.archive.ubuntu.com/ubuntu/ karmic-updates multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ karmic-updates multiverse

deb http://security.ubuntu.com/ubuntu karmic-security main restricted
deb-src http://security.ubuntu.com/ubuntu karmic-security main restricted
deb http://security.ubuntu.com/ubuntu karmic-security universe
deb-src http://security.ubuntu.com/ubuntu karmic-security universe
deb http://security.ubuntu.com/ubuntu karmic-security multiverse
deb-src http://security.ubuntu.com/ubuntu karmic-security multiverse

</pre>


<p>Update Ubuntu.</p>

<pre class="brush: ruby">

sudo apt-get update
sudo apt-get dist-upgrade

</pre>


<p>Set up locale:</p>

<pre class="brush: ruby">
sudo locale-gen en_US.UTF-8
sudo /usr/sbin/update-locale LANG=en_US.UTF-8
</pre>


<p>Install build-essential:</p>

<pre class="brush: ruby">

sudo apt-get install build-essential

</pre>


<p>Install Ruby 1.8.7</p>

<pre class="brush: ruby">

sudo apt-get install ruby irb ri rdoc ruby1.8-dev libzlib-ruby libyaml-ruby libreadline-ruby libncurses-ruby 
libcurses-ruby libruby libruby-extras libfcgi-ruby1.8 build-essential libopenssl-ruby libdbm-ruby libdbi-ruby
 libdbd-sqlite3-ruby sqlite3 libsqlite3-dev libsqlite3-ruby libxml-ruby libxml2-dev ri1.8 rdoc1.8

</pre>


<p>As of this date, there are still some issues with Rails 3 and Ruby 1.9.1. There is a segmentation fault when running “rails server”. It neither works on development or production for me. Until it does work, I will use 1.8.7.</p>

<p>Install rubygems version 1.3.6. Rails 3 Beta 2  requires 1.3.6.</p>

<pre class="brush: ruby">
mkdir src
cd src
sudo apt-get install wget
wget http://rubyforge.org/frs/download.php/69365/rubygems-1.3.6.tgz
tar xvzf rubygems-1.3.6.tgz
cd rubygems-1.3.6
sudo ruby setup.rb
</pre>


<p>Install the mysql gem (for those using mysql). Since it’s VPS, why not use PostgreSQL? Go ahead and google that if that’s what you need.</p>

<pre class="brush: ruby">
sudo apt-get install libmysqlclient-dev
sudo gem install mysql --no-rdoc --no-ri
</pre>


<p>Install Phusion Passenger requirements and the passenger gem.</p>

<pre class="brush: ruby">
sudo apt-get install libc6 libpcre3 libpcre3-dev libpcrecpp0 libssl0.9.8 libssl-dev zlib1g zlib1g-dev lsb-base

sudo gem install passenger
passenger-install-nginx-module
</pre>


<p>Create the script for starting and stopping nginx server:</p>

<pre class="brush: ruby">

sudo nano /etc/init.d/nginx

Copy this to the new file. 

#! /bin/sh

### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the nginx web server
# Description:       starts nginx using start-stop-daemon
### END INIT INFO

PATH=/opt/nginx/sbin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/opt/nginx/sbin/nginx
NAME=nginx
DESC=nginx

test -x $DAEMON || exit 0

# Include nginx defaults if available
if [ -f /etc/default/nginx ] ; then
        . /etc/default/nginx
fi

set -e

case "$1" in
  start)
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  stop)
        echo -n "Stopping $DESC: "
        start-stop-daemon --stop --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON
        echo "$NAME."
        ;;
  restart|force-reload)
        echo -n "Restarting $DESC: "
        start-stop-daemon --stop --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON
        sleep 1
        start-stop-daemon --start --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  reload)
          echo -n "Reloading $DESC configuration: "
          start-stop-daemon --stop --signal HUP --quiet --pidfile     /opt/nginx/logs/$NAME.pid \
              --exec $DAEMON 
          echo "$NAME."
          ;;
      *)
            N=/etc/init.d/$NAME
            echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
            exit 1   
            ;;
    esac

    exit 0


</pre>


<p>Edit permissions of the script.</p>

<pre class="brush: ruby">
sudo chmod +x /etc/init.d/nginx
sudo /usr/sbin/update-rc.d -f nginx defaults

sudo /etc/init.d/nginx start
</pre>


<p>And finally install Rails 3 Beta 2</p>

<pre class="brush: ruby">
sudo gem install arel tzinfo builder memcache-client rack rack-test rack-mount erubis mail text-format thor bundler 
sudo gem install rails --prerelease
</pre>


<p>Other things you should never forget:</p>

<p>Postfix for sending email</p>

<pre class="brush: ruby">
sudo apt-get install postfix
</pre>


<p>Git for source control management</p>

<pre class="brush: ruby">
sudo apt-get install git-core
</pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This is one of my "Getting Things Right" posts, a.k.a, "How The Hell Do I Set Up My Rails Site on a VPS host." It’s almost always more difficult to get things right than get things done. I tried Slicehost and Linode before and I always ended up rebuilding because I couldn't get the right setup.</p>]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2010-04-04 07:49:52</wp:post_date>
		<wp:post_date_gmt>2010-04-04 07:49:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-on-ubuntu-karmic-koala-fivebean</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/rails-3-on-ubuntu-karmic-koala-fivebean/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[0091795a16f4a873af39f41eb621d05f]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654641]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to Install and Use Rails 3 Generators</title>
		<link>http://pinoyrb.org/rails/how-to-install-and-use-rails-3-generators</link>
		<pubDate>Mon, 05 Apr 2010 10:23:47 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[generator]]></category>

		<category domain="tag" nicename="generator"><![CDATA[generator]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/how-to-install-and-use-rails-3-generators/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is why Rails3's philosophy is agnosticism:</p>

<p>You can override default template engine (erb) through config/application.rb. So if you use HAML, running scaffold generator will create HAML files for the views. If you use Rspec for testing as most Ruby developers do, you may also specify rspec as the default test framework.</p>

<pre class="brush: ruby">
#Configure generators values. Many other options are available, be sure to check the documentation.
config.generators do |g|
  g.template_engine :haml
  g.test_framework :rspec, :fixture => true, :views => false
end
</pre>


<p>I think the right repository for the Rails 3 generators is the one maintained by Andre Arko of Engine Yard.</p>

<pre class="brush: ruby">
cd yourapp
git clone git://github.com/indirect/rails3-generators.git lib/generators
</pre>


<p>Blog app basics:</p>

<pre class="brush: ruby">
script/rails generate scaffold post title:string body:text published:boolean 
</pre>



]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This is why Rails3's philosophy is agnosticism:</p>

<p>You can override default template engine (erb) through config/application.rb. So if you use HAML, running scaffold generator will create HAML files for the views. If you use Rspec for testing as most Ruby developers do, you may also specify rspec as the default test framework.</p>]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2010-04-05 10:23:47</wp:post_date>
		<wp:post_date_gmt>2010-04-05 10:23:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-install-and-use-rails-3-generators</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[160779938]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/how-to-install-and-use-rails-3-generators/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[dbaf9fed60ff7c36fb4992ad54139203]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654631]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Ruby Coding Conventions</title>
		<link>http://pinoyrb.org/ruby/ruby-coding-conventions</link>
		<pubDate>Tue, 06 Apr 2010 10:35:41 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/4/6/ruby_coding_conventions/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I&#8217;ve recently been following chris neukirchen&#8217;s coding conventions by the letter. All of them are really good. But one of the most interesting and probably opinionated convention he advocates is this:</p>
<script src='http://gist.github.com/357442.js?file=coding.txt' />
<p>All of them actually make perfect sense for me except the <code>a, b, c: any object</code> part. I&#8217;ve personally never used them.</p>

<p>Here are some idioms I&#8217;ve probably used a hundred times before:</p>
<script src='http://gist.github.com/357449.js?file=samples.rb' />
<p>If you wish to read more here is the <a href='http://github.com/chneukirchen/styleguide/blob/master/RUBY-STYLE'>full style guide</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>I&#8217;ve recently been following chris neukirchen&#8217;s coding conventions by the letter. All of them are really good. But one of the most interesting and probably opinionated convention he advocates is this:</p>]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2010-04-06 10:35:41</wp:post_date>
		<wp:post_date_gmt>2010-04-06 10:35:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ruby-coding-conventions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/4/6/ruby_coding_conventions/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[7d9f1ea247f43edcb6ada9c437358918]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285559153]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>RVM Gemsets: Awesomeness</title>
		<link>http://pinoyrb.org/ruby/rvm-gemsets-awesomeness</link>
		<pubDate>Sun, 11 Apr 2010 18:14:27 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[rvm]]></category>

		<category domain="tag" nicename="rvm"><![CDATA[rvm]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/4/11/rvm_gemsets_something_you_need_to_know/</guid>
		<description></description>
		<content:encoded><![CDATA[If you have recently been keeping up to date with Ruby, and have tried using multiple versions at the same time, you’re most probably using <a href="http://rvm.beginrescueend.com">RVM</a> to manage these different versions.

RVM is <em>pretty awesome</em>. But like any tool, you have to grok it a little so you know what it does behind the scenes when you use it.
<h2 id="gemsets_allow_you_to_isolate_gems_per_project">Gemsets allow you to isolate gems per project</h2>
Ever since RVM released the <code>gemset</code> feature, I’ve never stopped using it on all projects. One very interesting, and probably underused feature of it is the ability to automatically switch to a gemset after <code>cd</code>ing to a directory, i.e.

<script src="http://gist.github.com/362946.js?file=bash.sh"></script>
 
If you want to know more see RVM’s section on <a href="http://rvm.beginrescueend.com/workflow/rvmrc/">workflows</a>.

<h2 id="how_to_remain_dry">How to remain DRY</h2>

Every time you start a project, you’re probably wondering “oh now what I’m gonna have to install all the gems I need again?
 
Of course you don’t have to do this, if you make use of the <code>%global</code> gemset.
 
<script src="http://gist.github.com/362953.js?file=global.sh"></script>
<h2 id="its_no_silver_bullet">It’s no Silver bullet</h2>
Over time, I’ve discovered a few stuff that, like with any tool, are “good-to-knows”.
<ol>
	<li>If you have like 100 gems in a gemset, then that would probably equate to 100++ entries in your <code>$LOAD_PATH</code>. I try to keep my gemsets as small as possible.</li>
	<li>Huge <code>$LOAD_PATH</code>s impact your application’s load time. Like I said in #1, I guess it’s good practice to keep ‘em gemsets nice and manageable, this way you don’t impact your application’s load time.</li>
	<li>RVM and Bundler doesn’t play nice with each other. Our M.O. so far regarding this issue is to situate your Rails 3 app that uses bundler in an environment unaware of RVM, this way isolating each from the other. Bundler loads wwwwwwwwwwwayy tooooo slow with RVM.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>If you have recently been keeping up to date with Ruby, and have tried using multiple versions at the same time, you&#8217;re most probably using <a href="http://rvm.beginrescueend.com">RVM</a> to manage these different versions.</p>]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2010-04-11 18:14:27</wp:post_date>
		<wp:post_date_gmt>2010-04-11 18:14:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rvm-gemsets-awesomeness</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/4/11/rvm_gemsets_something_you_need_to_know/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[1706728a22b419f9f58ab22407c46d20]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652104]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>uninitialized constant Delayed::Job</title>
		<link>http://pinoyrb.org/ruby/uninitialized-constant-delayedjob</link>
		<pubDate>Wed, 14 Apr 2010 13:52:48 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[delayed job]]></category>

		<category domain="tag" nicename="delayed-job"><![CDATA[delayed job]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/4/14/uninitialized_constant_delayedjob/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Just a quick shout out for those having a problem with the latest DelayedJob, this is a quick fix!</p>
<script src='http://gist.github.com/365826.js?file=delayed_job_fix.rb' />]]></content:encoded>
		<excerpt:encoded><![CDATA[Just a quick shout out for those having a problem with the latest DelayedJob, this is a quick fix!
]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2010-04-14 13:52:48</wp:post_date>
		<wp:post_date_gmt>2010-04-14 13:52:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>uninitialized-constant-delayedjob</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[169604975]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/4/14/uninitialized_constant_delayedjob/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[fd2a43ef2059768bbd64c49a1b709015]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654603]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Sinatra Gems and Frameworks You Should Know About</title>
		<link>http://pinoyrb.org/ruby/sinatra-gems-and-frameworks-you-should-know-about</link>
		<pubDate>Mon, 19 Apr 2010 08:27:07 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[sinatra]]></category>

		<category domain="tag" nicename="sinatra"><![CDATA[sinatra]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/sinatra-gems-and-frameworks-you-should-know-about/</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong><a href="http://github.com/padrino/padrino-framework" >Padrino</a></strong></p>

<p>The godfather of Sinatra. Those who like Rails will probably want to start with Padrino rather than just bare-bones Sinatra DSL. Check out the <a href="http://www.padrinorb.com/guides/blog-tutorial" >blog tutorial</a>.</p>

<p>This entire blog in Sinatra has about 200 lines of code and uses various gems. It is very simple because I like simplicity and I believe there are just a lot of things about Wordpress which I do not need.</p>

<p>Gems you might want to use:</p>

<p><strong><a href="http://github.com/jnicklas/carrierwave" >Carrierwave</a></strong></p>

<p>An alternative to Paperclip for uploading images for Rails apps. It is framework-agnostic so you can use it for Sinatra apps.</p>

<p><strong><a href="http://github.com/nakajima/rack-flash" >Rack Flash</a></strong></p>

<p>Missing flash notices in Rails? You'll definitely need this one.</p>

<p>on your app:</p>

<pre class="brush: ruby">

post '/sing' do

  flash[:notice]  = "Post has been created."

end

</pre>


<p>on your views or layout:</p>

<pre class="brush: ruby">

<% if flash[:notice] %>
  <div class="notice"><%= flash[:notice] %></div>
<% end %>

</pre>


<p><strong><a href="http://github.com/adamwiggins/pony" >Pony</a></strong></p>

<p>Pony is used for sending email much like ActionMailer in Rails.</p>

<p><strong><a href="http://github.com/rsl/stringex" >Stringex</a></strong></p>

<p>For clean url's. I have a lot of posts about google-friendly links and I wrote about friendly id which is used by nearly every Rails developer in the world. I do feel, however, the advantages of just using Stringex. Imagine having better queries if your slug isn't found on different table. It's a lot faster that way.</p>

<p>If any one of you have heard about <a href="http://railsplugins.org" >Rails Plugins</a> site which is dedicated to finding out which gems work for Rails3, I think there should be a site for Rubyists in general wherein Ruby programmers, Gem developers and users can discuss whether gems work for a specific framework. There are DSL's other than Sinatra. And for me there's nothing wrong with that as long as we have a way of knowing what works and what doesn't work for the DSL.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p><strong><a href="http://github.com/padrino/padrino-framework" target="_blank">Padrino</a></strong></p>

<p>The godfather of Sinatra. Those who like Rails will probably want to start with Padrino rather than just bare-bones Sinatra DSL. Check out the <a href="http://www.padrinorb.com/guides/blog-tutorial" target="_blank">blog tutorial</a>.</p>]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2010-04-19 08:27:07</wp:post_date>
		<wp:post_date_gmt>2010-04-19 08:27:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sinatra-gems-and-frameworks-you-should-know-about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[192952532]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/sinatra-gems-and-frameworks-you-should-know-about/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[5f073e73bf81789e63836c9baed41c1b]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654592]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Ohm inside tricks</title>
		<link>http://pinoyrb.org/ruby/ohm-inside-tricks</link>
		<pubDate>Thu, 06 May 2010 22:58:04 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[ohm]]></category>

		<category domain="tag" nicename="ohm"><![CDATA[ohm]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/5/6/ohm_inside_tricks/</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 id='did_you_know_1'>Did you know #1</h2>

<p>I was reading Ohm&#8217;s tests and stumbled upon a cool testcase, which led me to learn about a cool feature.</p>
<code><pre><span class="keyword">class </span><span class="class">User</span> <span class="punct">&lt;</span> <span class="constant">Ohm</span><span class="punct">::</span><span class="constant">Model</span>
  <span class="ident">attribute</span> <span class="symbol">:email</span>

  <span class="ident">index</span> <span class="symbol">:email_provider</span>

  <span class="keyword">def </span><span class="method">email_provider</span>
    <span class="ident">email</span><span class="punct">.</span><span class="ident">split</span><span class="punct">('</span><span class="string">@</span><span class="punct">').</span><span class="ident">last</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="comment"># So you can basically do this:</span>
<span class="constant">User</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="ident">email_provider</span><span class="punct">:</span> <span class="punct">'</span><span class="string">yahoo.com</span><span class="punct">')</span>
<span class="constant">User</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="ident">email_provider</span><span class="punct">:</span> <span class="punct">'</span><span class="string">gmail.com</span><span class="punct">')</span>
</pre></code>
<p>Pretty neat eh?</p>

<h2 id='did_you_know_2'>Did you know #2</h2>

<p>Now I was talking to <a href='http://twitter.com/soveran'>soveran</a> at the #ohm irc channel on freenode while I stumbled upon #1 above, and he went on to add that you can index any enumerable object.</p>

<p>This here is doubly cool!</p>
<code><pre><span class="keyword">class </span><span class="class">Item</span> <span class="punct">&lt;</span> <span class="constant">Ohm</span><span class="punct">::</span><span class="constant">Model</span>
  <span class="ident">attribute</span> <span class="symbol">:tag_list</span>

  <span class="ident">index</span> <span class="symbol">:tags</span>

  <span class="keyword">def </span><span class="method">tags</span>
    <span class="ident">tag_list</span><span class="punct">.</span><span class="ident">split</span><span class="punct">(/</span><span class="regex"><span class="escape">\s</span>+</span><span class="punct">/)</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

<span class="comment"># Now you got yourself a minimalistic tagging solution!</span>

<span class="constant">Item</span><span class="punct">.</span><span class="ident">create</span><span class="punct">(</span><span class="symbol">:tag_list</span> <span class="punct">=&gt;</span> <span class="punct">'</span><span class="string">ohm monkrb redis</span><span class="punct">')</span>

<span class="constant">Item</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="ident">tags</span><span class="punct">:</span> <span class="punct">'</span><span class="string">ohm</span><span class="punct">')</span>
<span class="constant">Item</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="ident">tags</span><span class="punct">:</span> <span class="punct">'</span><span class="string">monkrb</span><span class="punct">')</span>
<span class="constant">Item</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="ident">tags</span><span class="punct">:</span> <span class="punct">'</span><span class="string">redis</span><span class="punct">')</span>
</pre></code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<h2>Did you know #1</h2>

<p>I was reading Ohm&#8217;s tests and stumbled upon a cool testcase, which led me to learn about a cool feature.</p>]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2010-05-06 22:58:04</wp:post_date>
		<wp:post_date_gmt>2010-05-06 22:58:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ohm-inside-tricks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/5/6/ohm_inside_tricks/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[8637dc07bea47d7961b94a516c4935ad]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654583]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Command aliases for Subversion, Git and Rails</title>
		<link>http://pinoyrb.org/rails/command-aliases-for-subversion-git-and-rails</link>
		<pubDate>Fri, 07 May 2010 13:32:04 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[git]]></category>

		<category domain="tag" nicename="git"><![CDATA[git]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[subversion]]></category>

		<category domain="tag" nicename="subversion"><![CDATA[subversion]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/command-aliases-for-subversion-git-and-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I got a Peepcode unlimited last year which came with a nice video about the command line. <a href="http://peepcode.com/products/advanced-command-line" >Check it out</a>.</p>

<p>Not too many people will find this interesting. For me, it's something I just want to do for myself (and for those I'd work for if I'm still employed).</p>

<h2>Aliases matter</h2> 


<p>I haven't organized my aliases into a separate file as shown in the video but I am using some useful aliases right now.</p>

<p>These are some of the aliases I have:</p>

<pre class="brush: ruby">
alias start_mysql="/Library/StartupItems/MySQLCOM/MySQLCOM start"
alias stop_mysql="/Library/StartupItems/MySQLCOM/MySQLCOM stop"
#adds all new and modified files for a git repository
alias ga="git add ."
#adds all new files for subversion 
alias sa="svn status | grep "^\?" | sed -e 's/? *//' | sed -e 's/ /\\ /g' | xargs svn add"
</pre>


<p>I find Rails 3 commands much more confusing than the old ones although they seem to be nearly the same. Plus it gets a little  complex considering I'm using different versions. For those following through my posts regarding Rails on OS X/ Linux, you'd probably find this useful.</p>

<pre class="brush: ruby">
#The new command to install a plugin in Rails 3 (subject to change - probably) 
ruby script/rails plugin install plugin_repository
</pre>


<p>A little long right? This is what I need for sanity:</p>

<pre class="brush: ruby">
alias plugin_install="ruby script/rails plugin install"
#use Rails3 for Ruby 1.8.7 
alias r3="rvm 1.8.7%rails3"
#use Rails3 version and starts the rails app
alias rs="rvm 1.8.7%rails3 && rails server"
</pre>


<p>Sweet. Now I can sleep. Zzzz...</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>I got a Peepcode unlimited last year which came with a nice video about the command line. <a href="http://peepcode.com/products/advanced-command-line" target="_blank">Check it out</a>.</p>

<p>Not too many people will find this interesting. For me, it's something I just want to do for myself (and for those I'd work for if I'm still employed).</p>]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2010-05-07 13:32:04</wp:post_date>
		<wp:post_date_gmt>2010-05-07 13:32:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>command-aliases-for-subversion-git-and-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/command-aliases-for-subversion-git-and-rails/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[776b7abc6d1d661a4d6d4720ce801844]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654576]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>iPhone SDK TOS 3.3.1: One Month later</title>
		<link>http://pinoyrb.org/iphone/iphone-sdk-tos-3-3-1-one-month-later</link>
		<pubDate>Fri, 07 May 2010 19:22:01 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category><![CDATA[iphone]]></category>

		<category domain="category" nicename="iphone"><![CDATA[iphone]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you&#8217;ve been living in a cave, &#8220;3.3.1&#8243; refers to section 3.3.1 of the iPhone Developer Program License Agreement. Section 3.3.1 for the iPhone 4.0SDK beta reads:</p>
<blockquote><p>3.3.1 — Applications may only use Documented APIs in the manner prescribed by Apple and must not use or call any private APIs. Applications must be originally written in Objective-C, C, C++, or JavaScript as executed by the iPhone OS WebKit engine, and only code written in C, C++, and Objective-C may compile and directly link against the Documented APIs (e.g., Applications that link to Documented APIs through an intermediary translation or compatibility layer or tool are prohibited).</p></blockquote>
<p>It&#8217;s been about a month since 3.3.1 came out. The most obvious impact of this is on Adobe Flash CS5. Prior to 3.3.1, Adobe has announced that Flash CS5 will include a Flash-to-iPhone compiler. Now, Adobe has cancelled that feature.</p>
<p>Here&#8217;s a roundup of how the other iPhone development tool providers have reacted to 3.3.1. Except for funkaster, writer of shinycocos, most of them seem to be optimistic that they&#8217;re in the clear.</p>
<p>AnscaMobile (Corona SDK):<br />
<a href="http://blog.anscamobile.com/2010/04/corona-and-iphone-os-4-0/%20" onclick="pageTracker._trackPageview('/outgoing/blog.anscamobile.com/2010/04/corona-and-iphone-os-4-0/?referer=');">http://blog.anscamobile.com/2010/04/corona-and-iphone-os-4-0/ </a></p>
<p>Torque (iTorque):<br />
<a href="http://www.torquepowered.com/community/blogs/view/19715" onclick="pageTracker._trackPageview('/outgoing/www.torquepowered.com/community/blogs/view/19715?referer=');">http://www.torquepowered.com/community/blogs/view/19715</a></p>
<p>Unity:<br />
<a href="http://blogs.unity3d.com/2010/04/10/unity-and-the-iphone-os-4-0/" onclick="pageTracker._trackPageview('/outgoing/blogs.unity3d.com/2010/04/10/unity-and-the-iphone-os-4-0/?referer=');">http://blogs.unity3d.com/2010/04/10/unity-and-the-iphone-os-4-0/</a></p>
<p>funkaster (shinycocos):<br />
<a href="http://github.com/funkaster/shinycocos/commit/9ebda7fcfc853db266b4b49c01bdbc5fa5a9be42#comments" onclick="pageTracker._trackPageview('/outgoing/github.com/funkaster/shinycocos/commit/9ebda7fcfc853db266b4b49c01bdbc5fa5a9be42_comments?referer=');">http://github.com/funkaster/shinycocos/commit/9ebda7fcfc853db266b4b49c01bdbc5fa5a9be42#comments</a><br />
(see the comments below the git commit)</p>
<p>Rhomobile:<br />
<a href="http://rhomobile.com/2010/04/09/iphone-4-0-sdk-rules/" onclick="pageTracker._trackPageview('/outgoing/rhomobile.com/2010/04/09/iphone-4-0-sdk-rules/?referer=');">http://rhomobile.com/2010/04/09/iphone-4-0-sdk-rules/</a></p>
<p>Me? I&#8217;ll stick to learning plain XCode, Objective-C, plus the <a href="http://www.cocos2d-iphone.org/" onclick="pageTracker._trackPageview('/outgoing/www.cocos2d-iphone.org/?referer=');">Cocos2d</a> Library.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[It's been about a month since 3.3.1 came out. Here's a roundup of how the iPhone development tool providers have reacted to 3.3.1.]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2010-05-07 19:22:01</wp:post_date>
		<wp:post_date_gmt>2010-05-07 19:22:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>iphone-sdk-tos-3-3-1-one-month-later</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/05/iphone-sdk-tos-3-3-1-one-month-later/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[cfa9c074af2fb8d6d886051d7fdaf887]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/05/iphone-sdk-tos-3-3-1-one-month-later/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/05/iphone-sdk-tos-3-3-1-one-month-later/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652056]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[150542664]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Lua Day 1: So near yet so far</title>
		<link>http://pinoyrb.org/ruby/lua-day-1-so-near-yet-so-far</link>
		<pubDate>Mon, 10 May 2010 10:31:09 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[lua]]></category>

		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/5/10/lua_day_1_so_near_yet_so_far/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So far Lua is strikingly similar to ruby. This of course only appears to be the case for very simple scripts.</p>
<p>Some common things so far:</p>
<ol>
<li>Condition expressions accepts any value, and false / nil are the only things which are failures. 0 and &#8221;&#8221; are both true.</li>
<li>The concept of a <code>Nil</code> class which only has nil as a value.</li>
<li>The use of <code>end</code> to denote closing blocks for if, for, function definitions, etc.</li>
<li>The general way in which a program feels.</li>
</ol>
<h2 id='lua_fibonacci'>Lua Fibonacci:</h2>
<p><script src='http://gist.github.com/395900.js?file=lua-fib.lua' /></p>
<h2 id='ruby_fibonacci'>Ruby Fibonacci:</h2>
<p><script src='http://gist.github.com/395902.js?file=ruby-fib.rb' /></p>
<h2 id='the_differences'>The differences?</h2>
<ol>
<li>Lua statements can&#8217;t be taken as returning a value, hence in the fibonacci example we need to explicitly use <code>return</code>.</li>
<li>Lua has a boolean type, unlike in ruby, which has a FalseClass and a TrueClass.</li>
<li>Lua only has only double precision floating point numbers to represent any number. Ruby has Fixnum, Bignum, Float.</li>
<li>Lua takes the more <code>functional</code> approach for converting between types, e.g. <code>tonumber</code>, <code>tostring</code> instead of Ruby, which has a to<em>i, to</em>s method for numeric and string types.</li>
<li>Lua requires parenthesis when calling functions. I guess Ruby is very unique in this regard.</li>
<li>Accessing any variable, even undefined ones, are legal, and always returns nil. This also applies to <code>table</code>s, i.e. accessing an undefined key returns <code>nil</code>.</li>
<li>Lua has a somewhat weird looking concatenation operator <code>..</code>. Ruby just uses <code>+</code> for concatenating strings.</li>
<li>Tables (which are kinda like Arrays and Hashes in one) use a 1-based index.</li>
</ol>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>So far Lua is strikingly similar to ruby. This of course only appears to be the case for very simple scripts.</p>

<p>Some common things so far:</p>

<ol>
<li>Condition expressions accepts any value, and false / nil are the only things which are failures. 0 and &#8221;&#8221; are both true.</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2010-05-10 10:31:09</wp:post_date>
		<wp:post_date_gmt>2010-05-10 10:31:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lua-day-1-so-near-yet-so-far</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/5/10/lua_day_1_so_near_yet_so_far/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[a8c49a172aca13b7c32fcbd37d68324f]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285652036]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Sorting with Ohm</title>
		<link>http://pinoyrb.org/ruby/sorting-with-ohm</link>
		<pubDate>Tue, 11 May 2010 02:13:35 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[ohm]]></category>

		<category domain="tag" nicename="ohm"><![CDATA[ohm]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/5/10/sorting_with_ohm/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In the last 2 months of using <a href='http://ohm.keyvalue.org'>Ohm</a>, I have used sort a couple of times, and have ran into some gotchas.</p>

<h2 id='lesson_1__and__are_two_different_beasts'>Lesson 1: <code>sort</code> and <code>sort_by</code> are two different beasts</h2>

<p>At first I thought that you can just do <code>sort(:by =&gt; :field)</code>. The following example best illustrates what happens under the hood:</p>
<script src='http://gist.github.com/396833.js?file=sorting-internals.rb' />
<h2 id='lesson_2__and__are_friends'>Lesson 2: <code>ALPHA</code> and <code>DESC</code> are friends.</h2>

<p>If you come from an SQL world (I did), you may be used to just doing an <code>ORDER BY</code> and just expecting things to work. Here in redis, <code>sort</code> assumes you want it to sort by their double precision numbers by default, but you can also do lexical sorting. As usual, an example best illustrates the different scenarios:</p>
<script src='http://gist.github.com/396844.js?file=sort-order.rb' />
<h2 id='lesson_3_will_come_up_because_im_making_this_up_as_i_go'>Lesson 3: Will come up, because I&#8217;m making this up as I go</h2>

<p>But on a more serious note, I need to grok the usecase of <code>:get</code> which corresponds to doing a GET in redis.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>In the last 2 months of using <a href="http://ohm.keyvalue.org">Ohm</a>, I have used sort a couple of times, and have ran into some gotchas.</p>

<h2>Lesson 1: <code>sort</code> and <code>sort_by</code> are two different beasts</h2>]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2010-05-11 02:13:35</wp:post_date>
		<wp:post_date_gmt>2010-05-11 02:13:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sorting-with-ohm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/5/10/sorting_with_ohm/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[091b914e6d0d0d7e5e6b6b75ca5d9892]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654564]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Ruby 101: Hash initialization gotcha</title>
		<link>http://pinoyrb.org/ruby/ruby-101-hash-initialization-gotcha</link>
		<pubDate>Wed, 12 May 2010 00:32:32 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[hash]]></category>

		<category domain="tag" nicename="hash"><![CDATA[hash]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=732</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I have a code that counts how many times a word occurs &#8211; a perfect fit for Hash. </p>
<pre class="brush: plain;">
def word_counts(words)
  counts = Hash.new(0)
  words.each do |word|
    counts[word] += 1
  end
end

categories = {
  :a =&gt; word_counts(‘some text’)
  :b =&gt; word_counts(‘another set of text’)
}
</pre>
<p>Somewhere, I use the hash returned by the word_counts method to do some calculation.</p>
<pre class="brush: plain;">
def score(word_scores, words)
  words.each do |word|
    v = word_scores[word]
    v = 0.1 if v.nil?

    score += Math.log( v / some_value )
  end
end

categories.each do |category, word_counts|
  score(word_counts, %w{some random text})
end
</pre>
<p>When I run the score, I always get an ‘Infinity’.  After some debugging, the problem is this piece of code:</p>
<pre class="brush: plain;">
v = word_scores[word]
v = 0.1 if v.nil?
</pre>
<p>‘word_scores’  returns 0 if  ‘word’ doesn’t exist; not nil which is the default behavior. Later, I realized I initialized it via   Hash.new(0) which makes 0 the default value.  In fact, it is not even necessary to check for nil or 0. All we want is to retrieve the value referenced by the key, and if the key does not exist, give me 0.1.</p>
<pre class="brush: plain;">
v = word_counts.fetch word, 0.1
</pre>
<p>By the way, the code is from a simple exercise on <a href="http://www.rubyoncloud.org/questions/how-to-classify-text-as-spam-or-funny-or-what-have-you-using-naive-bayes-algorithm">Naive Bayes algorithm to classify text</a>.</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/' rel='bookmark' title='Permanent Link: Ruby 101: Make your class behave like a Ruby built-in'>Ruby 101: Make your class behave like a Ruby built-in</a> <small>I got re-acquianted with this scenario while working on the OpenAmplify gem &#8211; a wrapper for the OpenAmplify API. When you give the api a text like a blog comment,...</small></li>
<li><a href='http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/' rel='bookmark' title='Permanent Link: Ruby 101: How to add methods to a Ruby class'>Ruby 101: How to add methods to a Ruby class</a> <small>Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</small></li>
<li><a href='http://gregmoreno.ca/ruby-101-how-to-filter-an-array-using-proc/' rel='bookmark' title='Permanent Link: Ruby 101: How to filter an Array using proc'>Ruby 101: How to filter an Array using proc</a> <small>Over at the PhRUG, a Ruby developer community based in the Philippines, we conduct code review sessions via our mailing list. A code is posted and members share alternative implementations....</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/r1-FCUUzCX-n33j7qqtjLKqL4So/0/da"><img src="http://feedads.g.doubleclick.net/~a/r1-FCUUzCX-n33j7qqtjLKqL4So/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/r1-FCUUzCX-n33j7qqtjLKqL4So/1/da"><img src="http://feedads.g.doubleclick.net/~a/r1-FCUUzCX-n33j7qqtjLKqL4So/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[I have a code that counts how many times a word occurs &#8211; a perfect fit for Hash. def word_counts(words) counts = Hash.new(0) words.each do &#124;word&#124; counts[word] += 1 end end categories = { :a =&#62; word_counts(‘some text’) :b =&#62; word_counts(‘another set of text’) } Somewhere, I use the hash returned by the word_counts method [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/" rel="bookmark" title="Permanent Link: Ruby 101: Make your class behave like a Ruby built-in">Ruby 101: Make your class behave like a Ruby built-in</a> <small>I got re-acquianted with this scenario while working on the OpenAmplify gem &#8211; a wrapper for the OpenAmplify API. When you give the api a text like a blog comment,...</small></li>
<li><a href="http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/" rel="bookmark" title="Permanent Link: Ruby 101: How to add methods to a Ruby class">Ruby 101: How to add methods to a Ruby class</a> <small>Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</small></li>
<li><a href="http://gregmoreno.ca/ruby-101-how-to-filter-an-array-using-proc/" rel="bookmark" title="Permanent Link: Ruby 101: How to filter an Array using proc">Ruby 101: How to filter an Array using proc</a> <small>Over at the PhRUG, a Ruby developer community based in the Philippines, we conduct code review sessions via our mailing list. A code is posted and members share alternative implementations....</small></li>
</ol>]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2010-05-12 00:32:32</wp:post_date>
		<wp:post_date_gmt>2010-05-12 00:32:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ruby-101-hash-initialization-gotcha</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-hash-initialization-gotcha/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-hash-initialization-gotcha/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-hash-initialization-gotcha/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[e1daf331d6aa5ffefbf0dd0994246214]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654557]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[194273572]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to Get Amazon Data Using Ruby</title>
		<link>http://pinoyrb.org/ruby/how-to-get-amazon-data-using-ruby</link>
		<pubDate>Mon, 24 May 2010 07:16:40 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[amazon]]></category>

		<category domain="tag" nicename="amazon"><![CDATA[amazon]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/how-to-get-amazon-data-using-ruby/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is post is inspired by several posts of Greg Moreno on RubyonCloud. Check out <a href="http://www.rubyoncloud.org" >the site</a>.</p>

<p>Install the <a href="http://github.com/jugend/amazon-ecs/" >Amazon ECS gem</a>. If you're already using Amazon s3 gem, you don't need to create a new config/yaml file.</p>

<p>I almost always use a module for configuration. A module can be included on any controller/model/another module in the application.</p>

<pre class="brush: ruby">
module GlobalStuff

  raw_config = File.read(RAILS_ROOT + "/config/amazon_s3.yml")
  env = RAILS_ENV
  APP_CONFIG = YAML.load(raw_config)[env]
  AMAZON_ACCESS_KEY_ID = APP_CONFIG["access_key_id"]
  AMAZON_SECRET = APP_CONFIG["secret_access_key"]

end

</pre>


<p>What you might want to do: Get the image of the product and the detailed page url.</p>

<p>You can probably do it on a model called amazon.rb and or any existing model file.</p>

<pre class="brush: ruby">
include GlobalStuff  
Amazon::Ecs.options = {:aWS_access_key_id => AMAZON_ACCESS_KEY_ID, :aWS_secret_key => AMAZON_SECRET}
res = Amazon::Ecs.item_search("0307463745", :response_group => 'Medium', :sort => 'salesrank')
res.items[0].get('mediumimage/url')
res.items[0].get('detailpageurl')
</pre>



]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This is post is inspired by several posts of Greg Moreno on RubyonCloud. Check out <a href="http://www.rubyoncloud.org" target="_blank">the site</a>.</p>

<p>Install the <a href="http://github.com/jugend/amazon-ecs/" target="_blank">Amazon ECS gem</a>. If you're already using Amazon s3 gem, you don't need to create a new config/yaml file.</p>]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2010-05-24 07:16:40</wp:post_date>
		<wp:post_date_gmt>2010-05-24 07:16:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-get-amazon-data-using-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/how-to-get-amazon-data-using-ruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[d2617f3a66b809d91f6349c7e8260b3d]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654551]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Logging in Sinatra</title>
		<link>http://pinoyrb.org/ruby/logging-in-sinatra</link>
		<pubDate>Wed, 26 May 2010 04:15:53 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[sinatra]]></category>

		<category domain="tag" nicename="sinatra"><![CDATA[sinatra]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/5/25/logging_in_sinatra/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is more of a note to self. I spent a few mins figuring this out properly so best not to waste a few mins again next time.</p>
<script src='http://gist.github.com/414048.js?file=sinatra-monk-logging.rb' />]]></content:encoded>
		<excerpt:encoded><![CDATA[This is more of a note to self. I spent a few mins figuring this out properly so best not to waste a few mins again next time.
]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2010-05-26 04:15:53</wp:post_date>
		<wp:post_date_gmt>2010-05-26 04:15:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>logging-in-sinatra</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/5/25/logging_in_sinatra/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[3b079f338d6b002bcdaad6313fb17dad]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654517]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>jQuery to prevent form submission via ENTER</title>
		<link>http://pinoyrb.org/ruby/jquery-to-prevent-form-submission-via-enter</link>
		<pubDate>Tue, 01 Jun 2010 01:06:11 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

		<category domain="tag"><![CDATA[jquery]]></category>

		<category domain="tag" nicename="jquery"><![CDATA[jquery]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/5/31/jquery_to_prevent_form_submission_via_enter/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Note to self:</p>
<script src='http://gist.github.com/420440.js?file=prevent-enter.js' />]]></content:encoded>
		<excerpt:encoded><![CDATA[Note to self:
]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2010-06-01 01:06:11</wp:post_date>
		<wp:post_date_gmt>2010-06-01 01:06:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>jquery-to-prevent-form-submission-via-enter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/5/31/jquery_to_prevent_form_submission_via_enter/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[1137ea7bf77f13a61a562f172c914b76]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654510]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>work.sh</title>
		<link>http://pinoyrb.org/ruby/work-sh</link>
		<pubDate>Wed, 09 Jun 2010 17:24:34 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[<p>From a cold boot, to start working on one of my Rails projects, I need to do the following:</p>
<ul>
<ol/> open Terminal, then Start MySQL or PostgreSQL</p>
<ol/> in a separate Terminal tab: cd Documents/projects/
<projectname> ; mate .</p>
<ol/> (if applicable) in a separate Terminal tab: Start Solr or Ferret</p>
<ol/> Start Firefox</p>
<ol/> Start Evernote
</ul>
<p>That&#8217;s a lot of keystrokes and mouse actions. No wonder I end up playing games most of the time, because Age of Empires III takes just one click.</p>
<p>I can configure MySQL and PostgreSQL to run on startup, but that&#8217;s wasteful. That&#8217;ll slow down the machine&#8217;s startup time, and sometimes I use just MySQL, on other projects I use PostgreSQL, and on other projects I use neither but instead use MongoDB. And that will just take away one step in this 5-step process to get from cold bootup to work bliss.</p>
<p>Ideally, there&#8217;s a one-click work button, a sideproject1 button, a sideproject2 button, etc. Press the right button and the Mac will be transformed into a mode optimized for the work to be done: run the needed apps, close unneeded apps, play music from the &#8220;work playlist&#8221;, change the desktop background, etc.</p>
<p>I have decided to learn AppleScript to build those magic buttons. Here&#8217;s what I&#8217;ve come up with so far:</p>
<div class="code">
<code></p>

<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code"><pre class="applescript" style="font-family:monospace;">#!<span style="color: #000000;">/</span>bin<span style="color: #000000;">/</span>sh
&nbsp;
# <span style="color: #ff0033; font-weight: bold;">From</span>: http:<span style="color: #000000;">//</span>stackoverflow.com<span style="color: #000000;">/</span>questions<span style="color: #000000;">/</span><span style="color: #000000;">1589114</span><span style="color: #000000;">/</span>opening<span style="color: #000000;">-</span>a<span style="color: #000000;">-</span>new<span style="color: #000000;">-</span>terminal<span style="color: #000000;">-</span>tab<span style="color: #000000;">-</span>in<span style="color: #000000;">-</span>osxsnow<span style="color: #000000;">-</span>leopard<span style="color: #000000;">-</span>with<span style="color: #000000;">-</span>the<span style="color: #000000;">-</span>opening<span style="color: #000000;">-</span>terminal<span style="color: #000000;">-</span>windows<span style="color: #000000;">/</span><span style="color: #000000;">1590818</span>#<span style="color: #000000;">1590818</span>
# <span style="color: #000000;">&#40;</span>See answer <span style="color: #0066ff;">by</span> i0n that says <span style="color: #009900;">&quot;courtesy of Dan Benjamin&quot;</span> http:<span style="color: #000000;">//</span>twitter.com<span style="color: #000000;">/</span>danbenjamin<span style="color: #000000;">&#41;</span>
&nbsp;
# Sets up <span style="color: #ff0033; font-weight: bold;">my</span> Infinitely terminal windows
&nbsp;
# 1. <span style="color: #0066ff;">Run</span> MongoDB
# 2. <span style="color: #0066ff;">Run</span> redis <span style="color: #ff0033; font-weight: bold;">in</span> a <span style="color: #0066ff;">new</span> terminal <span style="color: #0066ff;">tab</span>
# 3. cd <span style="color: #ff0033; font-weight: bold;">to</span> <span style="color: #ff0033;">the</span> project
# 4. <span style="color: #0066ff;">Launch</span> Evernote
# 5. <span style="color: #0066ff;">Launch</span> Firefox
# 6. <span style="color: #0066ff;">Launch</span> GitX
&nbsp;
&nbsp;
# 1. <span style="color: #0066ff;">Run</span> MongoDB <span style="color: #ff0033; font-weight: bold;">in</span> a <span style="color: #0066ff;">new</span> terminal
<span style="color: #000000;">/</span>usr<span style="color: #000000;">/</span>bin<span style="color: #000000;">/</span>osascript <span style="color: #000000;">&lt;&lt;</span>mongo
<span style="color: #0066ff;">activate</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;System Events&quot;</span>
	keystroke <span style="color: #009900;">&quot;t&quot;</span> using <span style="color: #000000;">&#123;</span>command down<span style="color: #000000;">&#125;</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
	<span style="color: #ff0033; font-weight: bold;">repeat</span> <span style="color: #ff0033; font-weight: bold;">with</span> win <span style="color: #ff0033; font-weight: bold;">in</span> windows
		<span style="color: #ff0033; font-weight: bold;">try</span>
			<span style="color: #ff0033; font-weight: bold;">if</span> <span style="color: #ff0033; font-weight: bold;">get</span> frontmost <span style="color: #ff0033; font-weight: bold;">of</span> win <span style="color: #ff0033; font-weight: bold;">is</span> <span style="color: #0066ff;">true</span> <span style="color: #ff0033; font-weight: bold;">then</span>
				do <span style="color: #ff0033; font-weight: bold;">script</span> <span style="color: #009900;">&quot;cd ~; ./mongo.sh&quot;</span> <span style="color: #ff0033; font-weight: bold;">in</span> <span style="color: #000000;">&#40;</span>selected <span style="color: #0066ff;">tab</span> <span style="color: #ff0033; font-weight: bold;">of</span> win<span style="color: #000000;">&#41;</span>
			<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">if</span>
		<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">try</span>
	<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">repeat</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
mongo
&nbsp;
# 2. <span style="color: #0066ff;">Run</span> redis <span style="color: #ff0033; font-weight: bold;">in</span> a <span style="color: #0066ff;">new</span> terminal
<span style="color: #000000;">/</span>usr<span style="color: #000000;">/</span>bin<span style="color: #000000;">/</span>osascript <span style="color: #000000;">&lt;&lt;</span>redis
<span style="color: #0066ff;">activate</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;System Events&quot;</span>
	keystroke <span style="color: #009900;">&quot;t&quot;</span> using <span style="color: #000000;">&#123;</span>command down<span style="color: #000000;">&#125;</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
	<span style="color: #ff0033; font-weight: bold;">repeat</span> <span style="color: #ff0033; font-weight: bold;">with</span> win <span style="color: #ff0033; font-weight: bold;">in</span> windows
		<span style="color: #ff0033; font-weight: bold;">try</span>
			<span style="color: #ff0033; font-weight: bold;">if</span> <span style="color: #ff0033; font-weight: bold;">get</span> frontmost <span style="color: #ff0033; font-weight: bold;">of</span> win <span style="color: #ff0033; font-weight: bold;">is</span> <span style="color: #0066ff;">true</span> <span style="color: #ff0033; font-weight: bold;">then</span>
				do <span style="color: #ff0033; font-weight: bold;">script</span> <span style="color: #009900;">&quot;cd ~; ./redis.sh&quot;</span> <span style="color: #ff0033; font-weight: bold;">in</span> <span style="color: #000000;">&#40;</span>selected <span style="color: #0066ff;">tab</span> <span style="color: #ff0033; font-weight: bold;">of</span> win<span style="color: #000000;">&#41;</span>
			<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">if</span>
		<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">try</span>
	<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">repeat</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
redis
&nbsp;
# 3. cd <span style="color: #ff0033; font-weight: bold;">to</span> <span style="color: #ff0033;">the</span> workers project
<span style="color: #000000;">/</span>usr<span style="color: #000000;">/</span>bin<span style="color: #000000;">/</span>osascript <span style="color: #000000;">&lt;&lt;</span>workers
<span style="color: #0066ff;">activate</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;System Events&quot;</span>
	keystroke <span style="color: #009900;">&quot;t&quot;</span> using <span style="color: #000000;">&#123;</span>command down<span style="color: #000000;">&#125;</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
<span style="color: #ff0033; font-weight: bold;">tell</span> <span style="color: #0066ff;">application</span> <span style="color: #009900;">&quot;Terminal&quot;</span>
	<span style="color: #ff0033; font-weight: bold;">repeat</span> <span style="color: #ff0033; font-weight: bold;">with</span> win <span style="color: #ff0033; font-weight: bold;">in</span> windows
		<span style="color: #ff0033; font-weight: bold;">try</span>
			<span style="color: #ff0033; font-weight: bold;">if</span> <span style="color: #ff0033; font-weight: bold;">get</span> frontmost <span style="color: #ff0033; font-weight: bold;">of</span> win <span style="color: #ff0033; font-weight: bold;">is</span> <span style="color: #0066ff;">true</span> <span style="color: #ff0033; font-weight: bold;">then</span>
				do <span style="color: #ff0033; font-weight: bold;">script</span> <span style="color: #009900;">&quot;cd ~/Documents/projects/infinitely/workers; mate .&quot;</span> <span style="color: #ff0033; font-weight: bold;">in</span> <span style="color: #000000;">&#40;</span>selected <span style="color: #0066ff;">tab</span> <span style="color: #ff0033; font-weight: bold;">of</span> win<span style="color: #000000;">&#41;</span>
			<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">if</span>
		<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">try</span>
	<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">repeat</span>
<span style="color: #ff0033; font-weight: bold;">end</span> <span style="color: #ff0033; font-weight: bold;">tell</span>
workers
&nbsp;
<span style="color: #0066ff;">sleep</span> <span style="color: #000000;">1</span>
# 4. <span style="color: #0066ff;">Launch</span> Evernote
<span style="color: #0066ff;">open</span> <span style="color: #000000;">/</span>Applications<span style="color: #000000;">/</span>Evernote.app
&nbsp;
# 5. <span style="color: #0066ff;">Launch</span> Firefox
<span style="color: #0066ff;">open</span> <span style="color: #000000;">/</span>Applications<span style="color: #000000;">/</span>Firefox.app
&nbsp;
clear</pre></td></tr></table></div>

<p></code>
</div>
<p>There&#8217;s still no &#8220;Open iTunes and play songs in my &#8216;work&#8217; playlist&#8221; section, but I&#8217;m working on it. And here&#8217;s something to make it more interesting: <a href="http://www.apeth.com/rbappscript/00intro.html" onclick="pageTracker._trackPageview('/outgoing/www.apeth.com/rbappscript/00intro.html?referer=');">AppleScripting with Ruby</a>!</p>
<p><em>This script borrowed heavily from the ideas of the people in this <a href="http://stackoverflow.com/questions/1589114/opening-a-new-terminal-tab-in-osxsnow-leopard-with-the-opening-terminal-windows/1590818#1590818" onclick="pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/1589114/opening-a-new-terminal-tab-in-osxsnow-leopard-with-the-opening-terminal-windows/1590818_1590818?referer=');">Stackoverflow thread</a>.</em></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Ideally, there's a one-click work button, a sideproject1 button, a sideproject2 button, etc. Press the right button and your Mac will be transformed into a mode optimized for the work to be done: run the needed apps, close unneeded apps, start your favorite music, change the desktop background, etc.

I have decided to learn AppleScript to build those magic buttons. Here's what I've come up with so far.]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2010-06-09 17:24:34</wp:post_date>
		<wp:post_date_gmt>2010-06-09 17:24:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>work-sh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[564bda23e32cd02b1002edc29dc3f776]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/work-sh/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/work-sh/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/work-sh/feed/]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Ruby 101: Make your class behave like a Ruby built-in</title>
		<link>http://pinoyrb.org/ruby/ruby-101-make-your-class-behave-like-a-ruby-built-in</link>
		<pubDate>Thu, 10 Jun 2010 02:10:36 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=735</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I got re-acquianted with this scenario while working on the<a href="http://github.com/gregmoreno/openamplify"> OpenAmplify gem</a> &#8211; a wrapper for the <a href="http://community.openamplify.com/blogs/quickstart/pages/overview.aspx">OpenAmplify API</a>.  When you give the api a text like a blog comment, it will return a list of common terms, opinion scores, named locations, and other information that can be used for text mining operations. </p>
<p>The OpenAmplify returns key-value pairs in an XML string by default, but it can also be in JSON, CSV, or RDF format. From a Ruby client’s point of view, we want it in Hash.  You can choose to use an XML library like Nokogiri but in my opinion, working with a Hash  fits nicely with Ruby.</p>
<p>Anyway, back to the problem.  I have an instance variable that holds the data.  One approach is to give clients access to the instance variable.</p>
<pre class="brush: ruby;">
class Response
  attr_reader :data

  def initialize
    @data = {}
  end
end

data = response.data
topics = data[‘Topics’]
</pre>
<p>One major issue with this approach is you’re exposing the internals of your class. What if you decided to rename the variable into ‘@results_in_hash_form’?  Then,  all programs that uses your code will break.  Worse,  you will be limited from enhancing the behavior of your class like lazy loading of the data.  You can wrap the access to your data inside a method but that still presents the problem of exposing the internals of your class. Also, that’s an unnecessary extra line of code :)</p>
<p>My suggestion is to make ‘Response’ behave like a Hash so we can do these:</p>
<pre class="brush: ruby;">
topics = response[‘Topics’]
response.has_key?(‘Topics’)

# And still have our own methods:
response.some_method_we_defined
</pre>
<p>So, how can we do this? The trick is to delegate the calls to the instance variable. One approach is to define the Hash methods you want to support:</p>
<pre class="brush: ruby;">
class Response

  [‘[]’, ‘has_key?’, ‘fetch’, ‘empty?’, ‘keys’].each do |method_name|
    class_eval &lt;&lt;-EOS
      def #{method}(*args)
         @data.send(‘#{method_name}’, *args)
      end
    EOS
  end

end
</pre>
<p>The code above is a shortcut to writing every method by hand. If you want to support all Hash methods, that would be a lot of typing.  </p>
<p>A better approach is to just take advantage of Ruby’s ‘method_missing’ which is called every time an undefined method is called.</p>
<pre class="brush: ruby;">
class Response

  def method_missing(name, *args, &amp;amp;block)
    @data.send(name, *args, &amp;amp;block)
  end

end
</pre>
<p>Of course, how your &#8216;method_missing&#8217; will look like depends on your requirements. In our simple case, we can simply delegate to @data.</p>
<p>This approach is called a &#8220;Dynamic Proxy&#8221; from the book <a href="http://pragprog.com/titles/ppmetr/metaprogramming-ruby">Metaprogramming Ruby by Paolo Perrota</a>. If you want to take your Ruby skills to the next level, I highly recommend this book.</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/how-to-use-openamplify-with-ruby/' rel='bookmark' title='Permanent Link: How to use OpenAmplify with Ruby'>How to use OpenAmplify with Ruby</a> <small>The OpenAmplify API reads text you supply and returns linguistic data explaining and classifying the content. What you do with that analysis is, in the fine tradition of APIs and...</small></li>
<li><a href='http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/' rel='bookmark' title='Permanent Link: Ruby 101: How to add methods to a Ruby class'>Ruby 101: How to add methods to a Ruby class</a> <small>Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</small></li>
<li><a href='http://gregmoreno.ca/how-to-create-a-class-on-the-fly-in-ruby/' rel='bookmark' title='Permanent Link: How to create a class on the fly in Ruby'>How to create a class on the fly in Ruby</a> <small>&#8220;So what if Ruby is dynamic?&#8221; This is often the reaction I get whenever I tell friends that Ruby allows you to fiddle with your program at runtime; followed by...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/wSkNamBulvAxCr7LnNIURaxMtpg/0/da"><img src="http://feedads.g.doubleclick.net/~a/wSkNamBulvAxCr7LnNIURaxMtpg/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/wSkNamBulvAxCr7LnNIURaxMtpg/1/da"><img src="http://feedads.g.doubleclick.net/~a/wSkNamBulvAxCr7LnNIURaxMtpg/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[I got re-acquianted with this scenario while working on the OpenAmplify gem &#8211; a wrapper for the OpenAmplify API. When you give the api a text like a blog comment, it will return a list of common terms, opinion scores, named locations, and other information that can be used for text mining operations. The OpenAmplify [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/how-to-use-openamplify-with-ruby/" rel="bookmark" title="Permanent Link: How to use OpenAmplify with Ruby">How to use OpenAmplify with Ruby</a> The OpenAmplify API reads text you supply and returns linguistic data explaining and classifying the content. What you do with that analysis is, in the fine tradition of APIs and...</li>
<li><a href="http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/" rel="bookmark" title="Permanent Link: Ruby 101: How to add methods to a Ruby class">Ruby 101: How to add methods to a Ruby class</a> Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</li>
<li><a href="http://gregmoreno.ca/how-to-create-a-class-on-the-fly-in-ruby/" rel="bookmark" title="Permanent Link: How to create a class on the fly in Ruby">How to create a class on the fly in Ruby</a> &#8220;So what if Ruby is dynamic?&#8221; This is often the reaction I get whenever I tell friends that Ruby allows you to fiddle with your program at runtime; followed by...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2010-06-10 02:10:36</wp:post_date>
		<wp:post_date_gmt>2010-06-10 02:10:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ruby-101-make-your-class-behave-like-a-ruby-built-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285651990]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[171478393]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[c914ae4eb2c8f32bc5f20e37aa0ef257]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Syntax Highlighting for Ruby</title>
		<link>http://pinoyrb.org/ruby/syntax-highlighting-for-ruby</link>
		<pubDate>Thu, 10 Jun 2010 11:13:06 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/syntax-highlighting-for-ruby/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There are more than couple of ways to do syntax highlighting for Ruby code. Your geek blog doesn't look nice if the code cannot be read properly or cannot be copied easily. Gists work well. Most blogs now would probably just use gist.github.com especially if it's lengthly file or there are way to many stuff on it that you don't want to scare your visitors. By naming the file "syntax.rb" on gist.github.com for instance, it would know what code you are using and syntax highlighting will be based on the filename. See <a href="http://gist.github.com/432825" > syntax.rb </a>.</p>

<p>The following code used to work well for me:</p>

<pre class="brush: ruby">
def to_html(markdown)
  out = []
  noncode = []
  code_block = nil
  markdown.split("\n").each do |line|
  if !code_block and line.strip.downcase == '<pre class="brush: ruby">'
    out << Maruku.new(noncode.join("\n")).to_html
    noncode = []
    code_block = []
  elsif code_block and line.strip.downcase == '</pre>'
   convertor = Syntax::Convertors::HTML.for_syntax "ruby"
   highlighted = convertor.convert(code_block.join("\n"))
   out << "<pre class="brush: ruby">#{highlighted}</pre>"
   code_block = nil
  elsif code_block
   code_block << line
  else
   noncode << line
  end
end
 out << Maruku.new(noncode.join("\n")).to_html
 out.join("\n")
end
</pre>


<p>There are at least two problems with this code:</p>

<ol>
<li>Maruku, a markdown interpreter is slow. At least slower than RDiscount, another Markdown interpreter.</li>
<li>The output doesn't look good even with CSS work done. There's white-space before the code making it appear intended when it fact it is not.</li>
<li>There are just too many lines of code. Period.</li>
</ol>


<p>I had to convert everything to HAML recently. Starting to feel an aversion towards using and overusing ERB.</p>

<p>This code works for me:</p>

<pre class="brush: ruby">

def to_html(markdown)
  markdown = markdown.gsub("<pre class="brush: ruby">", '<pre class="brush: ruby">').gsub("</pre>", "</pre>")
  markdown = RDiscount.new(markdown)
  markdown = markdown.to_html
end

</pre>


<p>Why the code above is better:</p>

<ol>
<li>Uses RDiscount gem which is faster than Maruku</li>
<li>It is intended to work with Javascript <a href="http://alexgorbatchev.com/wiki/SyntaxHighlighter" >Syntax Highlighter</a>. Just make sure to include the brush for Ruby on head tag along with the core.</li>
<li>It allows user to copy and print the code</li>
<li>It's shorter</li>
</ol>


<p>The following video shows the difference:</p>

<div class="clear">

<object width="600" height="400"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=12453281&server=vimeo.com&show_title=1&show_byline=1&show_portrait=0&color=&fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=12453281&server=vimeo.com&show_title=1&show_byline=1&show_portrait=0&color=&fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="600" height="400"></embed></object>

</div>


<p>And the final result can be seen on my blog.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>There are more than couple of ways to do syntax highlighting for Ruby code. Your geek blog doesn't look nice if the code cannot be read properly or cannot be copied easily. Gists work well. Most blogs now would probably just use gist.github.com especially if it's lengthly file or there are way to many stuff on it that you don't want to scare your visitors. By naming the file "syntax.rb" on gist.github.com for instance, it would know what code you are using and syntax highlighting will be based on the filename. See <a href="http://gist.github.com/432825" target="_blank"> syntax.rb </a>.</p>]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2010-06-10 11:13:06</wp:post_date>
		<wp:post_date_gmt>2010-06-10 11:13:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>syntax-highlighting-for-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[179542474]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/syntax-highlighting-for-ruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[bbf94a56db25fcbf5c0df5a20541ef0f]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285558971]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>DHH’s RailsConf 2010 Keynote Video</title>
		<link>http://pinoyrb.org/ruby/dhh%e2%80%99s-railsconf-2010-keynote-video</link>
		<pubDate>Fri, 11 Jun 2010 22:59:59 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=743</guid>
		<description></description>
		<content:encoded><![CDATA[<p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/b0iKYRKtAsA&#038;color1=0xb1b1b1&#038;color2=0xd0d0d0&#038;hl=en_US&#038;feature=player_embedded&#038;fs=1"></param><param name="allowFullScreen" value="true"></param><param name="allowScriptAccess" value="always"></param><embed src="http://www.youtube.com/v/b0iKYRKtAsA&#038;color1=0xb1b1b1&#038;color2=0xd0d0d0&#038;hl=en_US&#038;feature=player_embedded&#038;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="640" height="385"></embed></object></p>
<p>The keynote is about Rails 3.0 and the many enhancements it bring to make web application development more fun.  The improvements in writing database queries (via <a href="http://rubyonrails.org/screencasts/rails3/active-relation-active-model">ActiveRelation</a>), routes, ActionMailer are really neat and I believe would make it easier for  developers to get on board with Rails.</p>
<p>The official release will be available in a few weeks but the current version is already good enough for production use according to DHH.</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 1: Booting the application'>Rails 3 upgrade part 1: Booting the application</a> <small>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-2-routes/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 2: Routes'>Rails 3 upgrade part 2: Routes</a> <small>In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms'>Rails 3 upgrade part 3: Code fixes, views, and forms</a> <small>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/qM-9FIlVKBSWPAVmpdjJ7ok_IXw/0/da"><img src="http://feedads.g.doubleclick.net/~a/qM-9FIlVKBSWPAVmpdjJ7ok_IXw/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/qM-9FIlVKBSWPAVmpdjJ7ok_IXw/1/da"><img src="http://feedads.g.doubleclick.net/~a/qM-9FIlVKBSWPAVmpdjJ7ok_IXw/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[The keynote is about Rails 3.0 and the many enhancements it bring to make web application development more fun. The improvements in writing database queries (via ActiveRelation), routes, ActionMailer are really neat and I believe would make it easier for developers to get on board with Rails. The official release will be available in a [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 1: Booting the application">Rails 3 upgrade part 1: Booting the application</a> It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 2: Routes">Rails 3 upgrade part 2: Routes</a> In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms">Rails 3 upgrade part 3: Code fixes, views, and forms</a> This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2010-06-11 22:59:59</wp:post_date>
		<wp:post_date_gmt>2010-06-11 22:59:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>dhh%e2%80%99s-railsconf-2010-keynote-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/dhh%e2%80%99s-railsconf-2010-keynote-video/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/dhh%e2%80%99s-railsconf-2010-keynote-video/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/dhh%E2%80%99s-railsconf-2010-keynote-video/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148517574]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654488]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[29e2e39f745c4b117ace8fd603c51f8f]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Corona SDK</title>
		<link>http://pinoyrb.org/ruby/corona-sdk</link>
		<pubDate>Wed, 16 Jun 2010 12:24:59 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category domain="tag"><![CDATA[lua]]></category>

		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It seems I can develop some games much, much faster with the <a href="http://anscamobile.com/corona/" onclick="pageTracker._trackPageview('/outgoing/anscamobile.com/corona/?referer=');">Corona SDK</a>. It will cost me $99, and it&#8217;s not as macho as mastering Objective-C, but I think I&#8217;ll end up saving hundreds of hours with this kit.</p>
<p>I think Corona is a great kit for writing games in general, especially arcade games and board games. There&#8217;s no built-in support yet for tiled maps, and it looks like <a href="http://www.cocos2d-iphone.org/" onclick="pageTracker._trackPageview('/outgoing/www.cocos2d-iphone.org/?referer=');">Cocos2D</a> will have that built-in first. But even with that disadvantage, developing on Lua is so much more productive than developing on Objective-C that I&#8217;ll still come out ahead.</p>
<p>Some apps aren&#8217;t a good fit, though:</p>
<ul>
<li>those that extensively use the CocoaTouch UI controls. In Corona, you have to create your own buttons, text fields, etc. There&#8217;s the ui library, but it only covers a few controls.</li>
<li>those that access APIs that aren&#8217;t wrapped yet by Corona. For example, access to the address book seems to be missing.</li>
</ul>
<p>There&#8217;s the worry that Corona SDK will violate section <a href="http://rad.batnag.org/2010/05/iphone-sdk-tos-3-3-1-one-month-later/">3.3.1</a>. Folks from Corona gave some reassuring <a href="http://blog.anscamobile.com/2010/04/lua-the-lingua-franca-of-iphone-games/" onclick="pageTracker._trackPageview('/outgoing/blog.anscamobile.com/2010/04/lua-the-lingua-franca-of-iphone-games/?referer=');">messages</a>, but of course, with Apple, you can&#8217;t have absolute uncertainty. My take is that even if Apple gives Corona the boot, Corona will become Android-only, and Corona SDK is worth $99 even as an Android</p>
<p>I&#8217;m taking the $99 plunge. If nothing else, I think Lua will give me a refreshing break from my day-to-day Ruby and Javascript coding.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[I think Corona is a great kit for writing games in general, especially arcade games and board games.]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2010-06-16 12:24:59</wp:post_date>
		<wp:post_date_gmt>2010-06-16 12:24:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>corona-sdk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/corona-sdk/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/corona-sdk/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/06/corona-sdk/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[322d8391600e1aae8a1fac0e4c61a63b]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[168046841]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Big Companies Using Ruby on Rails</title>
		<link>http://pinoyrb.org/rails/big-companies-using-ruby-on-rails</link>
		<pubDate>Mon, 21 Jun 2010 15:33:26 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/big-companies-using-ruby-on-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Just thought I might share this. Who said only "nobody's" are using Rails?</p>

<p>amazon.com - <a href="http://weblog.rubyonrails.org/2006/11/29/amazon-goes-ruby-on-rails" rel="nofollow">Amazon goes Ruby on Rails</a></p>

<p>BBC - <a href="http://sam-sys.com/component/content/article/index.php?option=com_content&view=article&id=73" rel="nofollow">Who is using Ruby on Rails?</a></p>

<p>CapGemini - <a href="http://justaddwater.dk/2007/02/13/danish-newspaper-interview-capgemini-on-rails/" rel="nofollow">Danish Newspaper Interview: Capgemini on Rails</a></p>

<p>EA (Electronic Arts)</p>

<p>IBM</p>

<p>JP Morgan</p>

<p>NASA</p>

<p>Oakley</p>

<p>Oracle</p>

<p>Siemens</p>

<p>ThoughtWorks ♫</p>

<p>Yahoo!</p>

<p>And the list goes on...</p>

<p>Of course they are also using PHP5, Python, Java and other languages. There should be no reason to just confine yourself to using Rails. I use Sinatra and have been itching to use Django too.</p>

<p>Programming isn't like being in a prison although confinement can lead to enlightenment. Happiness and enlightenment can be achieved by discovering what works for you.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Just thought I might share this. Who said only "nobody's" are using Rails?</p>

<p>amazon.com - <a href="http://weblog.rubyonrails.org/2006/11/29/amazon-goes-ruby-on-rails" rel="nofollow">Amazon goes Ruby on Rails</a></p>]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2010-06-21 15:33:26</wp:post_date>
		<wp:post_date_gmt>2010-06-21 15:33:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>big-companies-using-ruby-on-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[169194138]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/big-companies-using-ruby-on-rails/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[b36656c30e38c80ee0b1df6bf3dc0315]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285558943]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Automatically Start PostgreSQL on Mac OS X</title>
		<link>http://pinoyrb.org/postgresql/automatically-start-postgresql-on-mac-os-x</link>
		<pubDate>Fri, 25 Jun 2010 18:57:31 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[postgresql]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[postgresql]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/automatically-start-postgresql-on-mac-os-x/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Why bother remembering very long commands?</p>

<p>There is a shell script for automatically starting, stopping and restarting PostgreSQL if you have installed PostgreSQL on /usr/local. In fact there is a shell script for nearly every redundant task for developers and Linux system administrators (even spammers).</p>

<p>See the following guide first:</p>

<p><a href="http://developer.apple.com/internet/opensource/postgres.html"  rel="nofollow">PostgreSQL on Mac OS X</a></p>

<p>The shell script:</p>

<pre class="brush: ruby">

#!/bin/bash

start()
{
        echo -n "Starting PostgreSQL server"
        sudo su postgres -c '/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ -l /usr/local/pgsql/data/postgresql.log start'
        
        return
}

stop()
{
        echo -n "Stopping PostgreSQL server"
        sudo su postgres -c '/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data/ stop'
        return
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: {start|stop|restart}"
        exit 1
        ;;
esac

</pre>


<p>Usage: /path/to/script start (stop|restart).</p>

<p>You can create aliases on .bash_profile to make the command shorter.</p>

<p>A good friend also has a very nice post for Mac OS users who are also Ruby programmers. I am not sure if we all have the same preferences. Do we use Firefox and Firebug that often? Chrome is worth trying, right? Do we use MongoDB for Rails apps? You can rework his script according to your needs. Check out the post of Radamanthus Batnag on how to <a href="http://rad.batnag.org/2010/06/work-sh" >automatically start applications</a> you need to get ready for "work mode."</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Why bother remembering very long commands?</p>

<p>There is a shell script for automatically starting, stopping and restarting PostgreSQL if you have installed PostgreSQL on /usr/local. In fact there is a shell script for nearly every redundant task for developers and Linux system administrators (even spammers).</p>]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2010-06-25 18:57:31</wp:post_date>
		<wp:post_date_gmt>2010-06-25 18:57:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>automatically-start-postgresql-on-mac-os-x</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/automatically-start-postgresql-on-mac-os-x/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[07d7a4e8669f51516e34a2e174e2a558]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285651976]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148004877]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>When And Why Should You Use Drupal or Rails For Projects</title>
		<link>http://pinoyrb.org/rails/when-and-why-should-you-use-drupal-or-rails-for-projects</link>
		<pubDate>Fri, 02 Jul 2010 13:51:50 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[drupal]]></category>

		<category domain="tag" nicename="drupal"><![CDATA[drupal]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/when-and-why-should-you-use-drupal-or-rails-for-projects/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There are several reasons why we used Drupal. Even if I am a Rubyist, I also use <a href="http://drupal.org/user/43058"  rel="nofollow">Drupal</a> (PHP5) for certain reasons.</p>

<p><strong>When and Why Should You Use Drupal?</strong></p>

<p>a) Both time and money is  a major concern</p>

<p>  <p>You'll hardly find good Ruby/Python programmers with hourly rates below $15 on ODesk. You can hire newbie's at below $10/hr however. If you have some understanding of Drupal configuration, Unix and XHTML at the very least, you can get some things done with Drupal at little or no cost. </p></p>

<p>b) You are prototyping a platform</p>

<p>  <p>You're just not sure what you're doing. Everything is an "experiment." You have an idea, but don't believe you can make money out of it - YET. Use Drupal. The fact that Drupal has the essentials a "working" application, you'll learn that there are many things you don't need to bother about so you can focus on the design and elements of the site (blocks, nodes, content types, views).  </p></p>

<p>c) You want at least 50% of the site features done within 2 days</p>

<p>  <p>I conceived an idea about a blog site where I can post my rants and people can contact me if they have any similar issues with a certain website like eBay. They can report issues, register (and spam protection is available) and provide feedback. After 2 days or about 16 hours of work, the site is fully launched with all the basic features. Deployment is done using Capistrano. I didn't bother remembering things because I use Git. Some things I've learned as a Ruby developer, I apply to PHP projects. Some of my sites are still using PHP5. </p></p>

<p>d) You believe you need a module, not a developer</p>

<p> I needed twitter integrated with that site too (new blog posts are announced via Twitter) and there's a module for that. Few minutes and the feature is working (for all users).</p>

<p>e) The web server doesn't support Ruby on Rails applications
  <p>
Still not much of a reason but people say it's the number one issue. They don't know Unix, Git, Capistrano and all that.  There's a free <a href="http://heroku.com/"  rel="nofollow">Heroku</a> plan, you know that right? </p></p>

<p><strong>When and Why Should You Use Rails?</strong></p>

<p>a) High-traffic sites</p>

<p>  <p>See <a href="http://railslab.newrelic.com/scaling-rails" rel="nofollow" >Scaling Rails</a> screencasts. </p></p>

<p>b) You are an optimist, driven to learn quickly as changes for the Rails framework are done everyday</p>

<p>  <p>If it works, it's ok. If it doesn't work, it's still ok. Only an optimist can see the bright(er) side of things. But the skilled businessman/developer (who should be an optimist) will just make it work. </p></p>

<p>c) Usability is a major concern and you just care about every small detail of the project.</p>

<p>d) You think "starting from scratch" is better than scratching your head and worrying about overriding default templates.</p>

<p>e) You just can afford a good VPS host (and hire a Unix geek if you're not one).</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>There are several reasons why we used Drupal. Even if I am a Rubyist, I also use <a href="http://drupal.org/user/43058" target="_blank" rel="nofollow">Drupal</a> (PHP5) for certain reasons.</p>

<p><strong>When and Why Should You Use Drupal?</strong></p>]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2010-07-02 13:51:50</wp:post_date>
		<wp:post_date_gmt>2010-07-02 13:51:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>when-and-why-should-you-use-drupal-or-rails-for-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/when-and-why-should-you-use-drupal-or-rails-for-projects/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[a3698c8f3c43ab5c2f307eb5fef00d34]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654478]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Upgrading our existing app to OOR Ohm</title>
		<link>http://pinoyrb.org/ruby/upgrading-our-existing-app-to-oor-ohm</link>
		<pubDate>Tue, 06 Jul 2010 02:00:08 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[ohm]]></category>

		<category domain="tag" nicename="ohm"><![CDATA[ohm]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/7/5/upgrading_our_existing_app_to_ohm_codename_oor/</guid>
		<description></description>
		<content:encoded><![CDATA[<br /><i>OOR - Object Oriented Redis.</i>
<h2 id='1__is_dead_long_live_'>1. <code>key(:something)</code> is dead, long live <code>key[:something]</code></h2>

<p>Basically you just have to change the method signature. An example follows:</p>
<script src='http://gist.github.com/465477.js?file=nest-example-usage.rb' />
<p>Another important thing to note here, is that the return value of <code>Ohm::Model#key</code> and <code>Ohm::Model::key</code> are no longer strings, but a customized version of <a href='http://github.com/soveran/nest'>Nest</a>.</p>

<p>You can do all sorts of Redis operations on keys now. I&#8217;ll let the code do the talking:</p>
<script src='http://gist.github.com/465473.js?file=quick-nest-example.rb' />
<h2 id='2__is_now_the_new_and_awesome__for_s_s_etc'>2. <code>.raw</code> is now the new and awesome <code>.key</code> (for <code>Set</code>s, <code>List</code>s, etc)</h2>

<p>If you were previously doing raw Redis operations on sets using .raw, you have to make a small change to your code.</p>
<script src='http://gist.github.com/465479.js?file=instance-level-example.rb' />
<p>As previously mentioned, we can do all sorts of Redis operations on <code>key[:sorted_position_tags]</code>. Basically everything except <code>KEYS</code>.</p>

<h2 id='3_there_is_no_step_3_except_the_ohmcontrib_update'>3. There is no step 3 (except the ohm-contrib update)</h2>

<p>The latest <a href='http://github.com/sinefunc/ohm-contrib'>ohm-contrib</a> has been updated to work with the latest ohm version.</p>

<p>Unfortunately, the patch doesn&#8217;t do any backward compatibility check with older Ohm versions.</p>

<p>(Although the only two plugins that broke during the upgrade were Ohm::Boundaries and Ohm::Locking).</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<br /><i>OOR - Object Oriented Redis.</i>
<h2>1. <code>key(:something)</code> is dead, long live <code>key[:something]</code></h2>

<p>Basically you just have to change the method signature. An example follows:</p>]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2010-07-06 02:00:08</wp:post_date>
		<wp:post_date_gmt>2010-07-06 02:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>upgrading-our-existing-app-to-oor-ohm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/7/5/upgrading_our_existing_app_to_ohm_codename_oor/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[bb326ce7190fd2d095cb8b32b6d818a6]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654460]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Dtach is the way</title>
		<link>http://pinoyrb.org/ruby/dtach-is-the-way</link>
		<pubDate>Thu, 22 Jul 2010 06:13:48 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category domain="tag"><![CDATA[dtach]]></category>

		<category domain="tag" nicename="dtach"><![CDATA[dtach]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/7/21/dtach_is_the_way/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you have a worker that doesn&#8217;t stop (looping endlessly and waiting for some queue to have a job), you might want to have the ability to put this worker in the background for the following reasons:</p>

<ol>
<li>Closing the terminal will close your worker</li>

<li>If you&#8217;re in development, having a dedicated terminal window for this is too much of a pain.</li>

<li>In production, you&#8217;d definitely need the option to put tasks in the background.</li>
</ol>
<code><pre><span class="ident">rake</span> <span class="ident">worker</span>
</pre></code>
<p>Running this in the background means either building your daemonizing code in-ruby using daemons.rubyforge.org or something similar. Or is there another way?</p>

<h2 id='enter_dtach'>Enter Dtach</h2>

<p>Let&#8217;s first quickly read through the help of dtach.</p>
<code><pre><span class="constant">Usage</span><span class="punct">:</span> <span class="ident">dtach</span> <span class="punct">-</span><span class="ident">a</span> <span class="punct">&lt;</span><span class="ident">socket</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">options</span><span class="punct">&gt;</span>
       <span class="ident">dtach</span> <span class="punct">-</span><span class="constant">A</span> <span class="punct">&lt;</span><span class="ident">socket</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">options</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">command</span><span class="punct">...&gt;</span>
       <span class="ident">dtach</span> <span class="punct">-</span><span class="ident">c</span> <span class="punct">&lt;</span><span class="ident">socket</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">options</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">command</span><span class="punct">...&gt;</span>
       <span class="ident">dtach</span> <span class="punct">-</span><span class="ident">n</span> <span class="punct">&lt;</span><span class="ident">socket</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">options</span><span class="punct">&gt;</span> <span class="punct">&lt;</span><span class="ident">command</span><span class="punct">...&gt;</span>
<span class="constant">Modes</span><span class="punct">:</span>
  <span class="punct">-</span><span class="ident">a</span>		<span class="constant">Attach</span> <span class="ident">to</span> <span class="ident">the</span> <span class="ident">specified</span> <span class="ident">socket</span><span class="punct">.</span>
  <span class="punct">-</span><span class="ident">A</span>		<span class="ident">Attach</span> <span class="ident">to</span> <span class="ident">the</span> <span class="ident">specified</span> <span class="ident">socket</span><span class="punct">,</span> <span class="keyword">or</span> <span class="ident">create</span> <span class="ident">it</span> <span class="keyword">if</span> <span class="ident">it</span>
		  <span class="ident">does</span> <span class="keyword">not</span> <span class="ident">exist</span><span class="punct">,</span> <span class="ident">running</span> <span class="ident">the</span> <span class="ident">specified</span> <span class="ident">command</span><span class="punct">.</span>
  <span class="punct">-</span><span class="ident">c</span>		<span class="constant">Create</span> <span class="ident">a</span> <span class="ident">new</span> <span class="ident">socket</span> <span class="keyword">and</span> <span class="ident">run</span> <span class="ident">the</span> <span class="ident">specified</span> <span class="ident">command</span><span class="punct">.</span>
  <span class="punct">-</span><span class="ident">n</span>		<span class="constant">Create</span> <span class="ident">a</span> <span class="ident">new</span> <span class="ident">socket</span> <span class="keyword">and</span> <span class="ident">run</span> <span class="ident">the</span> <span class="ident">specified</span> <span class="ident">command</span> <span class="ident">detached</span><span class="punct">.</span>
</pre></code>
<p>We can handle putting our rake task in the background a couple of different ways:</p>

<ol>
<li>Start normally, detach on demand</li>
</ol>
<code><pre><span class="ident">dtach</span> <span class="punct">-</span><span class="constant">A</span> <span class="punct">/</span><span class="ident">tmp</span><span class="punct">/</span><span class="ident">dtach</span><span class="punct">.</span><span class="ident">worker</span> <span class="ident">rake</span> <span class="ident">worker</span>

<span class="comment"># dtach -c doesn't actually have much difference except </span>
<span class="comment"># that it always tries to create the socket.</span>
</pre></code>
<p>This runs as normal, but when you want to <code>dtach</code>, you can hit <code>Ctrl + \</code>.</p>

<ol>
<li>Start it in the background right off the bat.</li>
</ol>
<code><pre><span class="ident">dtach</span> <span class="punct">-</span><span class="ident">n</span> <span class="punct">/</span><span class="ident">tmp</span><span class="punct">/</span><span class="ident">dtach</span><span class="punct">.</span><span class="ident">worker</span> <span class="ident">rake</span> <span class="ident">worker</span>
</pre></code>
<p>This will just run it in the background as normal. Now when you want to re-attach it, just run:</p>
<code><pre><span class="ident">dtach</span> <span class="punct">-</span><span class="ident">a</span> <span class="punct">/</span><span class="ident">tmp</span><span class="punct">/</span><span class="ident">dtach</span><span class="punct">.</span><span class="ident">worker</span>
</pre></code>
<h2 id='but_why_why_not_build_daemonizing_into_your_ruby_script'>But why? Why not build daemonizing into your ruby script?</h2>

<p>Well, I&#8217;m just a fan of really simple tools that doesn&#8217;t try to overstep its responsibilities. Lately I&#8217;ve been moving away from rails (monolithic) and into <em>nix style philosophy (monk, sinatra, ohm, etc, etc).</em></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>If you have a worker that doesn&#8217;t stop (looping endlessly and waiting for some queue to have a job), you might want to have the ability to put this worker in the background for the following reasons:</p>]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2010-07-22 06:13:48</wp:post_date>
		<wp:post_date_gmt>2010-07-22 06:13:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>dtach-is-the-way</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/7/21/dtach_is_the_way/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[2460cfe3dbbd6642514f3178f36cbd44]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[197764790]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654469]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Why You Might Not Use Named Scopes In Rails3</title>
		<link>http://pinoyrb.org/rails/why-you-might-not-use-named-scopes-in-rails3</link>
		<pubDate>Sun, 25 Jul 2010 09:18:19 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/why-you-might-not-use-named-scopes-in-rails3/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It's interesting how Rails 3 querying is a lot easier than it was before.</p>

<p><em>Simple Task:</em> Get all posts that are promoted to front page.</p>

<p>Some apps probably do not use the field "promoted" primarily because there's a published field then all published posts will be promoted on front page. But in Drupal, nodes have promoted field and I think most apps should too. Sometimes you wouldn't want to show everything on the front page or want some post on top of the list of posts.</p>

<p>Write the tests first.</p>

<pre class="brush: ruby">

spec/fixtures/post.yml

hello_world:
  title: Hello World
  body: "We are ruby enthusiasts"
  promoted: true


spec/models/post_spec.rb

require 'spec_helper'

describe Post do
  before(:each) do
    @post = Post.new
    @date = Time.now
  end

 
  describe 'return promoted post' do
    it 'gets promoted posts' do
      Post.promoted.size.should == 1
    end
  end 

end

</pre>


<p>The test could be written in a better way. But this is just written to make sure there are returns for that method. Run "rake spec". It should show an error.</p>

<pre class="brush: ruby">

app/models/post.rb


BEFORE:

named_scope :promoted, :conditions => { :promoted => true }

(In Rails 3, named_scope is now scope)

AFTER: 

def self.promoted
  where(:promoted => true)
end

</pre>


<p>That is it for the models. Rails 3 is much better, really.</p>

<pre class="brush: ruby">

BEFORE:

app/controllers/posts_controller.rb

Post.find(:all, :conditions=>{:promoted => true}, :order=>"created_at DESC")

or modify the named scope:


app/models/post.rb

named_scope :promoted, :conditions => { :promoted => true }, :order=>"created_at DESC"


AFTER: 

app/models/post.rb


Post.promoted.order("created_at DESC")

</pre>


<p>With the new querying API, we don't have to assume the order is always "created_at DESC". It's quite flexible and concise. Just as DHH mentioned in the RailsConf 2010, one of the strengths of Rails 3 is to build queries on stages.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>It's interesting how Rails 3 querying is a lot easier than it was before.</p>

<p><em>Simple Task:</em> Get all posts that are promoted to front page.</p>

<p>Some apps probably do not use the field "promoted" primarily because there's a published field then all published posts will be promoted on front page. But in Drupal, nodes have promoted field and I think most apps should too. Sometimes you wouldn't want to show everything on the front page or want some post on top of the list of posts.</p>]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2010-07-25 09:18:19</wp:post_date>
		<wp:post_date_gmt>2010-07-25 09:18:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>why-you-might-not-use-named-scopes-in-rails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/why-you-might-not-use-named-scopes-in-rails3/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[9eb12dd5aa49494fb929f37aa0552785]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285558907]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Blizzard is the Enemy of Rails</title>
		<link>http://pinoyrb.org/rails/blizzard-is-the-enemy-of-rails</link>
		<pubDate>Wed, 28 Jul 2010 00:24:27 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Not Django, not Java, but Blizzard. They&#8217;re actively working to reduce Rails3 adoption. </p>
<p>Take a look at these dates:</p>
<p>Rails3 beta1 release date: Feb 5, 2010</p>
<p>Starcraft 2 beta release date: Feb 17, 2010</p>
<p>Rails 3 RC release date: July 26, 2010</p>
<p>Starcraft 2 release: July 27, 2010</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Not Django, not Java, but Blizzard. They&#8217;re actively working to reduce Rails3 adoption. 
Take a look at these dates:
Rails3 beta1 release date: Feb 5, 2010
Starcraft 2 beta release date: Feb 17, 2010
Rails 3 RC release date: July 26, 2010
Starcra...]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2010-07-28 00:24:27</wp:post_date>
		<wp:post_date_gmt>2010-07-28 00:24:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>blizzard-is-the-enemy-of-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285556490]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[0aa77bb67632145093b720e3b2914641]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/07/blizzard-is-the-enemy-of-rails/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/07/blizzard-is-the-enemy-of-rails/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/07/blizzard-is-the-enemy-of-rails/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Book Review: Tapworthy</title>
		<link>http://pinoyrb.org/iphone/book-review-tapworthy</link>
		<pubDate>Sun, 01 Aug 2010 16:00:18 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category><![CDATA[iphone]]></category>

		<category domain="category" nicename="iphone"><![CDATA[iphone]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<p><img src="http://covers.oreilly.com/images/0636920001133/cat.gif" alt="Tapworthy" /><br />
<strong>Tapworthy</strong><br />
Designing Great iPhone Apps<br />
by Josh Clark<br />
Publisher: O&#8217;Reilly Media<br />
Released: June 2010<br />
320 pages</p>
<p>I&#8217;m a programmer who occasionally dabbles in user interface design when I&#8217;m doing solo projects. I know enough to know when a UI is bad or good, but I&#8217;m at a loss on how to create good UI from scratch. On my iPhone games, I do my own UI. There&#8217;s the <a href="http://developer.apple.com/iphone/library/documentation/userexperience/conceptual/mobilehig/Introduction/Introduction.html" onclick="pageTracker._trackPageview('/outgoing/developer.apple.com/iphone/library/documentation/userexperience/conceptual/mobilehig/Introduction/Introduction.html?referer=');">iPhone Human Interface Guid</a>e, but I feel that it&#8217;s a bit hard to digest and I feel that it&#8217;s too specific to non-gaming applications.  </p>
<p><a href="http://oreilly.com/catalog/0636920001133" onclick="pageTracker._trackPageview('/outgoing/oreilly.com/catalog/0636920001133?referer=');">Tapworthy</a> takes iPhone HIG then mixes it with insights from recent user interface research and human psychology. The result is a very readable guide with specific do&#8217;s and don&#8217;ts to follow in designing your iPhone app interface. The tips, along with the long but readable discussion on the principles behind those tips, are general enough that even game developers will find them useful.</p>
<p>For example, the recommended hit region for user interface elements should be 44&#215;44 pixels. This is a very important principle to follow (n00b mistake: on an app I was developing, I started with swipeable coins that are 20&#215;20. Not surprisingly, on my first user tests, the users found the coins too small and very hard to swipe). The iPhone HIG actually mentions this, but this tip is buried in there and is only mentioned three times. In Tapworthy, this tip has its own section title (&#8220;The Magic Number is 44&#8243;) and is mentioned more than a dozen times to really drill in the point.</p>
<p>Another solid tip from the book: Do not use text in designing the app&#8217;s icon. It won&#8217;t be readable, and it will just add visual clutter to the icon. This tip is actually part of an entire 30-page chapter (Chapter 7) devoted to App Icon Design.</p>
<p>I can&#8217;t find anything that I don&#8217;t like about this book. It can use some improvements, though:</p>
<ul>
<li>Given that roughly half of iPhone apps are games, it could add more tips specific to gaming applications. Maybe games aren&#8217;t in the author&#8217;s repertoire, and that&#8217;s a topic for another book.</li>
<li>The book contains lots of internal references, e.g. &#8220;&#8230;a concept explained in the Facebook case study on page 236&#8230;&#8221;. On the PDF version, the references aren&#8217;t links, though. What&#8217;s more, on the ePub version, when reading it on Stanza for the iPhone, the links are meaningless because the ePub pages on Stanza doesn&#8217;t really match the PDF&#8217;s page numbers. This isn&#8217;t major, though, and it&#8217;s something O&#8217;Reilly can easily fix with an updated digital release.</li>
</ul>
<p>If I have to describe this book in a nutshell, I&#8217;ll say it&#8217;s Alan Cooper&#8217;s <a href="http://www.amazon.com/About-Face-Essentials-Interface-Design/dp/1568843224" onclick="pageTracker._trackPageview('/outgoing/www.amazon.com/About-Face-Essentials-Interface-Design/dp/1568843224?referer=');">About Face</a>, translated to the iPhone world. Great work.</p>

<!-- Quick Adsense WordPress Plugin: http://techmilieu.com/quick-adsense -->
<div style="float:none;margin:10px 0 10px 0;text-align:center;">
<script type="text/javascript"><!--
google_ad_client = "pub-9240414629474053";
/* 234x60, created 12/28/09 */
google_ad_slot = "7708933576";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

<div style="font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both"></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[If I have to describe this book in a nutshell, I'll say it's Alan Cooper's <a href="http://www.amazon.com/About-Face-Essentials-Interface-Design/dp/1568843224">About Face</a>, translated to the iPhone world. Great work.]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2010-08-01 16:00:18</wp:post_date>
		<wp:post_date_gmt>2010-08-01 16:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>book-review-tapworthy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285556556]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[5497c51061b6680d79933d7553e9bb08]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/08/book-review-tapworthy/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/08/book-review-tapworthy/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/08/book-review-tapworthy/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[166912693]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Fuzzy searching in SOLR with Sunspot</title>
		<link>http://pinoyrb.org/ruby/fuzzy-searching-in-solr-with-sunspot</link>
		<pubDate>Thu, 05 Aug 2010 10:47:37 +0000</pubDate>
		<dc:creator><![CDATA[cyx]]></dc:creator>
		
		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[solr]]></category>

		<category domain="tag" nicename="solr"><![CDATA[solr]]></category>

		<guid isPermaLink="false">http://pipetodevnull.upstrat.com/past/2010/8/5/fuzzy_searching_in_solr_with_sunspot/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>At one point or another, you&#8217;ll need this functionality:</p>

<p><code>Find all people whose names start with Jo Sm</code> &lt;- (i.e. the famous John Smith)</p>

<h2 id='step_1_make_it_work'>Step 1. Make it work</h2>

<p>How do we go about that in SOLR (specifically using sunspot?). Here&#8217;s my brain dump based off of a gist:</p>
<script src='http://gist.github.com/509529.js?file=sunspot-text-starting-with-explanation.rb' />
<p>Turns out, <strong><code>starting_with</code> in conjunction with a <code>text</code> index works only for a string in lowercase form.</strong> No biggie, we just have to remember.</p>

<h2 id='step_2_make_it_pretty'>Step 2. Make it pretty?</h2>

<p>Doing that for every type of search for lots of fields will quickly become cumbersome. How do we clean that up? Why a DSL of course!</p>

<p>Luckily ruby allows us to extend classes pretty easily. We can do the following:</p>
<script src='http://gist.github.com/509546.js?file=sunspot-ext.rb' />
<p>After that, the example above will look a lot simpler:</p>
<script src='http://gist.github.com/509550.js?file=dsl-example.rb' />]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>At one point or another, you&#8217;ll need this functionality:</p>

<p><code>Find all people whose names start with Jo Sm</code> &lt;- (i.e. the famous John Smith)</p>

<h2>Step 1. Make it work</h2>

<p>How do we go about that in SOLR (specifically using sunspot?). Here&#8217;s my brain dump based off of a gist:</p>]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2010-08-05 10:47:37</wp:post_date>
		<wp:post_date_gmt>2010-08-05 10:47:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>fuzzy-searching-in-solr-with-sunspot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[pipe :to => /dev/null]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.pipetodevnull.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://pipetodevnull.upstrat.com/past/2010/8/5/fuzzy_searching_in_solr_with_sunspot/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[95f98dccb6d0a1923b17ea0b39422d62]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654419]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 upgrade part 1: Booting the application</title>
		<link>http://pinoyrb.org/ruby/rails-3-upgrade-part-1-booting-the-application</link>
		<pubDate>Wed, 11 Aug 2010 07:53:47 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=752</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live and breath on the edge, upgrades are one of these things we try to avoid as much as possible.  Still, there is always a sense of excitement in trying something new even if it adds problems to an already stable piece of code.</p>
<p>For a little background, I am upgrading a Rails app several of friends and I have written last year. The code is available at <a href="http://github.com/gregmoreno/propsify">github</a>.</p>
<p>In this post, I share the steps I did to boot the application. This doesn&#8217;t mean the upgrade went fine neither the app is ready to go. It only means all the required initialization are OK. In succeeding posts, I share my experiences in upgrading the app to a green state.</p>
<p>First, my environment.</p>
<pre class="brush: bash;">
greg@piccolo:~/dev/projects/propsify3$ rvm info
ruby-1.8.7-p299@propsify:

  system:
    uname:        &quot;Linux piccolo 2.6.31-22-generic #61-Ubuntu SMP Wed Jul 28 01:57:06 UTC 2010 i686 GNU/Linux&quot;
    shell:        &quot;bash&quot;
    version:      &quot;4.0.33(1)-release&quot;

  rvm:
    version:      &quot;rvm 0.1.44 by Wayne E. Seguin (wayneeseguin@gmail.com) [http://rvm.beginrescueend.com/]&quot;

  ruby:
    interpreter:  &quot;ruby&quot;
    version:      &quot;1.8.7&quot;
    date:         &quot;2010-06-23&quot;
    platform:     &quot;i686-linux&quot;
    patchlevel:   &quot;2010-06-23 patchlevel 299&quot;
    full_version: &quot;ruby 1.8.7 (2010-06-23 patchlevel 299) [i686-linux]&quot;

greg@piccolo:~/dev/projects/propsify3$ script/about
About your application's environment
Ruby version              1.8.7 (i686-linux)
RubyGems version          1.3.7
Rack version              1.0 bundled
Rails version             2.3.2
Active Record version     2.3.2
Action Pack version       2.3.2
Active Resource version   2.3.2
Action Mailer version     2.3.2
Active Support version    2.3.2
Application root          /mnt/hgfs/greg-mini/dev/projects/propsify
Environment               development
Database adapter          postgresql
Database schema version   20100113032723

greg@piccolo:~/dev/projects/propsify3$ gem list

*** LOCAL GEMS ***

actionmailer (2.3.2)
actionpack (2.3.2)
activerecord (2.3.2)
activeresource (2.3.2)
activesupport (2.3.2)
geokit (1.5.0)
json (1.4.5)
mime-types (1.16)
oauth (0.4.1)
pg (0.9.0)
rails (2.3.2)
rake (0.8.7)
RedCloth (4.2.2)
twitter_oauth (0.3.2)

greg@piccolo:~/dev/projects/propsify3$ ls vendor/gems/
authlogic-2.1.3  geokit-1.5.0  haml-2.2.16  macaddr-1.0.0  twitter_oauth-0.3.2  uuid-2.1.0

greg@piccolo:~/dev/projects/propsify3$ ls vendor/plugins/
acts_as_commentable        geokit-rails     is_taggable   thinking-sphinx      will_paginate
declarative_authorization  gravatar-plugin  jrails        validates_date_time
exception_notification     haml             subdomain-fu  vote_fu
</pre>
<p><strong>Step 1: Install rails 3</strong></p>
<pre class="brush: plain;">
gem install rails --pre
</pre>
<p><strong>Step 2: Install the plugin tool </strong></p>
<pre class="brush: plain;">
script/plugin install git://github.com/rails/rails_upgrade.git
</pre>
<p><strong>Step 3: Show upgrade checklist</strong></p>
<pre class="brush: ruby;">
rake rails:upgrade:check
</pre>
<p>This task lists the items you should watch out for when doing the upgrade. You don&#8217;t need to fix everything right away (some are deprecation notice) but review the checklist nevertheless.</p>
<p><strong>Step 4: Generate the new routes</strong></p>
<pre class="brush: plain;">
rake rails:upgrade:routes
</pre>
<p>This task reads the current config/routes.rb and outputs a Rails 3 version.<br />
Don&#8217;t worry, it doesn&#8217;t override your routes file. Keep this in a safe place for later use.</p>
<p><strong>IMPORTANT:</strong> I actually didn&#8217;t realize I did the right thing until after the actual code upgrade. When I tried generating the new routes after the code change, it outputted an empty block. I have no idea if this is unique to my case but just to be sure, generate the routes beforehand and keep a copy.</p>
<p><strong>Step 5: Create Gemfiles</strong></p>
<pre class="brush: plain;">
rails:upgrade:gems
</pre>
<p>Next is to generate the file &#8216;Gemfile&#8217;. In Rails 2, the gems you need are listed in config/environment.rb while in Rails 3 the gems are listed in the Gemfile. Gemfile is used by the program &#8216;bundler&#8217; to manage the gems required by your application. Unfortunately, this task didn&#8217;t include the gems I listed in environment.rb so I have to add it later.</p>
<p><strong>Step 6: Backup your files</strong></p>
<pre class="brush: plain;">
rails:upgrade:backup
</pre>
<p>I hope you are working on another branch (or a copy) but just in case you are not, run this task to make copies of the files that will be affected during the upgrade.</p>
<p>Now comes the juicy part. </p>
<p><strong>Step 7: Generate the Rails 3 app on top of your Rails 2 app</strong></p>
<pre class="brush: plain;">
rails new propsify3 -d postgresql
</pre>
<p>Run this command in your app&#8217;s parent folder. In my case, my app&#8217;s name and pathname is &#8216;propsify3&#8242; and I am using postgresql as my database. This command created and replaced a bunch of files. Since you&#8217;ve backed-up everything, there&#8217;s nothing to worry. </p>
<p><strong>Step 8: Move code from environment.rb to application.rb</strong></p>
<p>Your new config/environment.rb file looks like it went through a rigorous diet. You can leave this file for now. What is important now is you move the initializer code from your config/environment.rb.rails2 to config/application.rb.  These are the config.* lines except the config.gem which goes to Gemfile.</p>
<p><strong>Step 9: Convert the new routes</strong></p>
<p>You can still use the existing routes until 3.1 but since there&#8217;s a tool to help you migrate, I suggest doing it. At this point, when I tried the rails:upgrade:routes, no routes were generated. So make sure you generate the routes before Step 7.</p>
<p><strong>Step 10: Delete new_rails_defaults.rb </strong></p>
<pre class="brush: plain;">
rm config/initializers/new_rails_defaults
</pre>
<p><strong>Step 11: Upgrade the plugins and gems</strong></p>
<p>Many plugins are now available as gems. Check your plugins and gems at <a href="http://railsplugins.org">http://railsplugins.org</a>. In my case, the following plugins were converted to gems:</p>
<pre class="brush: ruby;">
acts_as_commentable
declarative_authorization
haml
will_paginate
thinking-sphinx
</pre>
<p>Unfortunately, the plugins below are not yet ready for Rails 3. I removed them for now and all code that references them.</p>
<pre class="brush: ruby;">
jrails
subdomain-fu
vote_fu
</pre>
<p><strong>IMPORTANT</strong>: In your Gemfile, make sure you check specify the right version that is compatible with Rails 3. Some gems are still in the pre-release version and will  not be downloaded if you don&#8217;t specify a version in your Gemfile. For example, this is a snippet from my Gemfile:</p>
<pre class="brush: ruby;">
gem 'pg'
gem 'acts_as_commentable'
gem 'declarative_authorization'
gem 'haml'
gem 'thinking-sphinx', '2.0.0.rc1', :require =&gt; 'thinking_sphinx'
gem 'will_paginate', '3.0.pre2'
gem 'uuid'
gem 'geokit'
</pre>
<p><strong>Step 12: Update initialization code</strong></p>
<p>After step 10 you are good to go, if you&#8217;re lucky. In my case, I had to remove some patches and change code to boot the application.</p>
<pre class="brush: ruby;">
ActiveSupport::CoreExtensions::Date::Conversions::DATE_FORMATS.merge!(date_time_formats)
</pre>
<p>This fails in Rails 3 because core extensions have been moved out of their modules and are now included in classes they extend. For example, to fix the date format problem do:</p>
<pre class="brush: ruby;">
Date::DATE_FORMATS.merge!(date_time_formats)
</pre>
<p><strong>Step 13: Boot the app</strong></p>
<pre class="brush: plain;">
rails server
</pre>
<p>Yay! If you are wondering what happened to <code>script/server</code> command,  Rails went the &#8220;Merb way&#8221; and consolidated the <code>script/*</code> commands into  the <code>rails</code> script.</p>
<p>By now, you should see the famous Rails&#8217; &#8220;Welcome aboard&#8221; message in your browser. </p>
<p><strong>Step 14: Remove public/index.html</strong></p>
<p>Now, you can try if your application is working.</p>
<p>There are still more work to do like moving to the ActiveRecord/ActiveRelation API and removing the deprecation notices. Before moving on, I still need to fix the problems in my routes and unsupported gems which I will tackle in my next post.</p>
<p><strong>Next</strong>: <a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/">Rails 3 upgrade Part 2: Routes</a></p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-2-routes/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 2: Routes'>Rails 3 upgrade part 2: Routes</a> <small>In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms'>Rails 3 upgrade part 3: Code fixes, views, and forms</a> <small>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</small></li>
<li><a href='http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/' rel='bookmark' title='Permanent Link: Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby'>Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby</a> <small>and have a Ruby version running side-by-side. A few months ago I got interested in JRuby while researching for text mining algorithms. I found some gems but they are either...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/SAJrWga-0BbsHkvDMVcve5CBHCY/0/da"><img src="http://feedads.g.doubleclick.net/~a/SAJrWga-0BbsHkvDMVcve5CBHCY/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/SAJrWga-0BbsHkvDMVcve5CBHCY/1/da"><img src="http://feedads.g.doubleclick.net/~a/SAJrWga-0BbsHkvDMVcve5CBHCY/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live and breath on the edge, upgrades are one of these things we try to avoid as much as possible. Still, there is always a sense [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 2: Routes">Rails 3 upgrade part 2: Routes</a> In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms">Rails 3 upgrade part 3: Code fixes, views, and forms</a> This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</li>
<li><a href="http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/" rel="bookmark" title="Permanent Link: Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby">Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby</a> and have a Ruby version running side-by-side. A few months ago I got interested in JRuby while researching for text mining algorithms. I found some gems but they are either...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2010-08-11 07:53:47</wp:post_date>
		<wp:post_date_gmt>2010-08-11 07:53:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-upgrade-part-1-booting-the-application</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[150245520]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285559273]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[e64c36e6ccdb845f10cf1bed47c5f8e6]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 upgrade part 2: Routes</title>
		<link>http://pinoyrb.org/ruby/rails-3-upgrade-part-2-routes</link>
		<pubDate>Thu, 12 Aug 2010 21:40:05 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=787</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In the previous post, I outlined the steps I took to<a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/"> upgrade and boot a Rails 3 application</a>. This time, I share my experience upgrading the routes file. By the way, I forgot to mention in the last post that I&#8217;m using <a href="http://www.railsupgradehandbook.com/">Rails 3 Upgrade Handbook by Jeremy McAnally</a>.</p>
<p>The task rails:upgrade:routes (comes with the rails_upgrade plugin) converts your Rails 2 routes into Rails 3 format. It handles most cases but you may still need to edit the generated routes depending on your setup.</p>
<p><strong>map.root</strong></p>
<p>Below, I show the old route and the generated version. </p>
<pre class="brush: ruby;">
# Rails 2
map.root :controller =&gt; 'search'

# Rails 3
match '/' =&gt; 'search#index'
</pre>
<p>The conversion is correct but since I use the named route &#8216;root_path&#8217; in my application, I had to change it:</p>
<pre class="brush: ruby;">
root :to =&gt; 'search#index'
</pre>
<p><strong>:as, :member, :any, :path_names</strong></p>
<pre class="brush: ruby;">
# Rails 2
map.resources :workspaces, :as =&gt; 'b', :member =&gt; { :widget =&gt; :get } do |workspace|
  # ...
end

# Rails 3
resources :workspaces do
  # ...
end
</pre>
<p>In Rail 3, :as  is for overriding the normal naming for named routes witout affecting the path. For example, the code below will recognize the path &#8216;/workspaces&#8217; and the named route becomes offices_path.</p>
<pre class="brush: ruby;">
resources :workspaces, :as =&gt; &quot;offices&quot;
</pre>
<p>In Rails 2, :as affects the path. In my example, &#8216;/b&#8217; routes the request to WorkspacesController. So for Rails 3 to recognize the path &#8216;/b&#8217;, I need to add another route.</p>
<pre class="brush: ruby;">
match 'b' =&gt; 'workspaces#index'
</pre>
<p>The rails:upgrade:routes did not convert the following member route and had to be added.</p>
<pre class="brush: ruby;">
:member =&gt; { :widget =&gt; :get }
</pre>
<p>The new route becomes:</p>
<pre class="brush: ruby;">
resources :workspaces do
  get :widget, :on =&gt; :member
end
</pre>
<p>In Rails 2, you can use the :any option to define a custom route that responds to any request method. </p>
<pre class="brush: ruby;">
# Rails 2
workspace.resource :twitter_account, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }

# generated by rails:upgrade:routes
resource :twitter_account do
  member do
    any :authorize
  end
end
</pre>
<p>The rails:upgrade:routes converted the :any option. However,  when I booted the application, it raised an exception:</p>
<pre class="brush: ruby;">
undefined method `any' for #&lt;ActionDispatch::Routing::Mapper:0xb71b6fcc&gt; (NoMethodError)
</pre>
<p>To fix this, I replaced the offending line with a match method.</p>
<pre class="brush: ruby;">
resource :twitter_account do
  match :authorize, :on =&gt; :member
end
</pre>
<p>:path_names was also not included in the generated route so has to be added as well.</p>
<pre class="brush: ruby;">
resource :twitter_account, :path_names =&gt; { :edit =&gt; 'request_authorization' } do
  match :authorize, :on =&gt; :member
end
</pre>
<p><strong>Specifying a different controller</strong></p>
<pre class="brush: ruby;">
# Rails 2
map.resource :settings, :controller =&gt; 'users' do |settings|
  settings.resource :twitter_account, :name_prefix =&gt; nil, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }
end

# generated by rake:upgrade:routes
resource :settings do
  resource :twitter_account do
    member do
      any :authorize
    end
  end
end
</pre>
<p>To fix, just specify the controller</p>
<pre class="brush: ruby;">
resource :settings,:controller =&gt; :users do
  # ...
end
</pre>
<p><strong>Undefined named route helper</strong></p>
<p>I encountered this exception while trying the application:</p>
<pre class="brush: ruby;">
undefined method `edit_twitter_account_path'
</pre>
<p>In Rails 2, this is the route that created this named route:</p>
<pre class="brush: ruby;">
map.resource :settings, :controller =&gt; 'users' do |settings|
  settings.resource :twitter_account, :name_prefix =&gt; nil, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }
end
</pre>
<p>This is a bit tricky for me because I can&#8217;t remember why I nested it :) Nevertheless, to fix the Rails 3 error, I moved :twitter_account outside of :settings. The correct Rails routes now look like these:</p>
<pre class="brush: ruby;">
resource :settings, :controller =&gt; :users
resource :twitter_account, :path_names =&gt; { :edit =&gt; 'request_authorization' } do
  match :authorize, :on =&gt; :member
end
</pre>
<p><strong>Custom polymorphic named route helper</strong></p>
<p>A long time ago, I played around with polymorphic paths. In hindsight, that is a waste of time but back then it was fun or should I say a time well wasted. I have a named route helper that takes any object and used like this:</p>
<pre class="brush: ruby;">
# in views
link_to 'invitations', invitations_path(@voteable)

# definition
module RoutesHelper
  def invitations_path(voteable)
    send(&quot;#{voteable.class.name.underscore}_invitations_path&quot;, voteable)
  end

  def workspace_invitations_path(workspace)
    super(:workspace_id =&gt; workspace)
  end

  # ...
end
</pre>
<p>In Rails 3, my named route helper is not being called. Thus, wrong URL is generated. I know, I know it should have been a simple <a href="http://api.rubyonrails.org/classes/ActionController/PolymorphicRoutes.html">polymorphic_path</a> call but I still wonder why my method is not called. Moving on, the new ruby is:</p>
<pre class="brush: ruby;">
link_to 'invitations', polymorphic_path([@voteable, :invitations])
</pre>
<p>I cheated a bit here because I want this post to focus on routes. Along the way, I had to update non-route related code to discover the route problems. <a href="http://edgeguides.rubyonrails.org/routing.html">You can learn more about Rails 3 routes from this RailsGuides page</a>.</p>
<p>There are still more updates to be done and I&#8217;ll share them in other posts. Just like your favorite late night infomercial, &#8220;Wait! There&#8217;s more&#8221;.</p>
<p>Next: <a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/">Rails 3 upgrade part 3: Code fixes, views, and forms</a></p>
<p>Previous:  <a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/">Rails 3 upgrade Part 1: Booting the application</a></p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms'>Rails 3 upgrade part 3: Code fixes, views, and forms</a> <small>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript'>Rails 3 upgrade part 4: Prototype helpers and Javascript</a> <small>Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 1: Booting the application'>Rails 3 upgrade part 1: Booting the application</a> <small>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/0/da"><img src="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/1/da"><img src="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the way, I forgot to mention in the last post that I&#8217;m using Rails 3 Upgrade Handbook by Jeremy McAnally. The task rails:upgrade:routes (comes with the [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms">Rails 3 upgrade part 3: Code fixes, views, and forms</a> This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript">Rails 3 upgrade part 4: Prototype helpers and Javascript</a> Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 1: Booting the application">Rails 3 upgrade part 1: Booting the application</a> It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-08-12 21:40:05</wp:post_date>
		<wp:post_date_gmt>2010-08-12 21:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-upgrade-part-2-routes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-2-routes/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[171553377]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-2-routes/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285559267]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-2-routes/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[c2f829c827c444e706842210bc4186fe]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 upgrade part 3: Code fixes, views, and forms</title>
		<link>http://pinoyrb.org/ruby/rails-3-upgrade-part-3-code-fixes-views-and-forms</link>
		<pubDate>Sat, 14 Aug 2010 00:12:36 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=814</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and <a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/">getting the application to boot</a> while <a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/">part 2 deals with routes</a>. While Part 2 is mainly about routes, getting it work involved changes in other parts of the code which I&#8217;ll share this time. So while you are updating your routes, you may need to check this post in between changes.</p>
<p><strong>Update ApplicationController</strong></p>
<p>After regenerating your application with rails (i.e. rails new appname -d dbadapter), your ApplicationController would look like this:</p>
<pre class="brush: ruby;">
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
end
</pre>
<p>There&#8217;s no need to panic because rails:upgrade:backup made a copy of the controller to application_controller.rb.rails2.</p>
<p>If you have a lot of helper modules, you&#8217;ll most likely have this code in your Rails 2 ApplicationController:</p>
<pre class="brush: ruby;">
helper :all
</pre>
<p>If you encounter a missing method error while monkey clicking your application, you probably forgot to update your Rails 3 ApplicationController.</p>
<p><strong>Update ApplicationHelper</strong></p>
<p>The ApplicationHelper module was also modified by the rails upgrde. So don&#8217;t forget to update this, too.</p>
<p><strong>RAILS_* constants are deprecated is not entirely true</strong></p>
<p>When you run rails:upgrade:check, it will list items you need to update including deprecated code. There is no need to change these as the word &#8216;deprecated&#8217; means but I encountered several &#8220;can&#8217;t convert nil into String&#8221; errors. </p>
<pre class="brush: bash;">
rake rails:upgrade:check
(in /mnt/hgfs/greg-mini/dev/projects/propsify)
Deprecated constant(s)
Constants like RAILS_ENV, RAILS_ROOT, and RAILS_DEFAULT_LOGGER are now deprecated.
More information: http://litanyagainstfear.com/blog/2010/02/03/the-rails-module/

The culprits:
  ...
</pre>
<p>The weird part is some constants are just doing fine.  In any case, here are the conversion:</p>
<pre class="brush: plain;">
RAILS_ROOT  -&gt; Rails.root
RAILS_ENV -&gt; Rails.env
RAILS_DEFAULT_LOGGER -&gt; Rails.logger
</pre>
<p>You can also check your environment the Ruby way:</p>
<pre class="brush: ruby;">
# before
if RAILS_ENV == 'production'
  ...

# Rails 3
if Rails.env.production?
</pre>
<p><strong>Output strings are automatically escaped</strong></p>
<p>We should all be rejoicing that Rails is now serious about XSS protection except now your pages have become ugly with all those HTML tags. For example the code below will not give you a clickable link.</p>
<pre class="brush: ruby;">
- signup = link_to('create one here', signup_path)
= &quot;If you do not have an account, #{signup}.&quot;
</pre>
<p>To fix this, use the raw() helper.</p>
<pre class="brush: ruby;">
= raw &quot;If you do not have an account, #{signup}.&quot;
</pre>
<p>Too bad for me, I got tons of views that were coded like this.</p>
<p><strong>Check for &#8216;concat&#8217;</strong></p>
<p>A popular technique to simplify your view code is to use content blocks. You create a helper that takes a block and wraps it in some HTML tags. A simple implementation would look like this:</p>
<pre class="brush: ruby;">
module LayoutHelper
  def main_column(options={}, &amp;block)
    # calls column()
  end

  def column(options={}, &amp;block)
    # concat is not needed in Rails 3
    concat content_tag(:div, capture(&amp;block), options)
  end
end

# in your view
- main_column do
  = render 'form'
</pre>
<p>This works fine in Rails 2 but in Rails 3 the block gets outputted twice. <a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/concat">concat</a> is the way to output text in a non-output block (i.e. &lt;% %&gt; in erb) but it seems like <a href="http://asciicasts.com/episodes/208-erb-blocks-in-rails-3">erb blocks in Rails 3 do not need concat</a>.</p>
<p><strong>Helpers with blocks</strong></p>
<p>Before Rails 3, form_for or fields_for use non-output syntax; it means no equals sign. </p>
<pre class="brush: ruby;">
# erb
&lt;% form_for @offer do |f| %&gt;
  # ...
&lt;% end %&gt;

# haml
- form_for @offer do |f|
  # ...
</pre>
<p>In Rails 3, it should now be written as an output block.</p>
<pre class="brush: ruby;">
# erb
&lt;%= form_for @offer do |f| %&gt;
  # ...
&lt;% end %&gt;

# haml
= form_for @offer do |f|
  = f.fields_for :items do |ff|
    # ...
</pre>
<p>The rule is if the method is expected to return a string, it should use the output syntax. If it just <a href="http://edgeguides.rubyonrails.org/3_0_release_notes.html">buffering the returned string like content_for, it should NOT have the equals sign</a>.</p>
<p>Previous: <a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/">Rails 3 upgrade part 2: Routes</a><br />
Next: <a href="http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/">Rails 3 upgrade part 4: Prototype helpers and Javascript</a></p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-2-routes/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 2: Routes'>Rails 3 upgrade part 2: Routes</a> <small>In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript'>Rails 3 upgrade part 4: Prototype helpers and Javascript</a> <small>Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 1: Booting the application'>Rails 3 upgrade part 1: Booting the application</a> <small>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/ehL_MA8Bx9VYCyQNiAD-65r59ZA/0/da"><img src="http://feedads.g.doubleclick.net/~a/ehL_MA8Bx9VYCyQNiAD-65r59ZA/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/ehL_MA8Bx9VYCyQNiAD-65r59ZA/1/da"><img src="http://feedads.g.doubleclick.net/~a/ehL_MA8Bx9VYCyQNiAD-65r59ZA/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2 deals with routes. While Part 2 is mainly about routes, getting it work involved changes in other parts of the code which I&#8217;ll share this [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 2: Routes">Rails 3 upgrade part 2: Routes</a> In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript">Rails 3 upgrade part 4: Prototype helpers and Javascript</a> Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 1: Booting the application">Rails 3 upgrade part 1: Booting the application</a> It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2010-08-14 00:12:36</wp:post_date>
		<wp:post_date_gmt>2010-08-14 00:12:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-upgrade-part-3-code-fixes-views-and-forms</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[153365559]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285559261]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[2f3d18578ba09ed3690fad2325357962]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 Upgrade Resources</title>
		<link>http://pinoyrb.org/rails/rails-3-upgrade-resources</link>
		<pubDate>Mon, 16 Aug 2010 09:44:35 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/rails-3-upgrade-resources/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Many of us have several existing 2.x applications and would want to upgrade without pulling our hair because we can't figure out something or we are wary of consuming too much time. I'm about to post several links where you could find useful advice on upgrading Rails 3. Feel free to share other links if you know some.</p>

<p><strong>Question: is it worth it to upgrade?</strong></p>

<p>It's definitely worth it. There is no logical reason for staying "behind" (other than money).</p>

<p>Obviously, an application that has a test suite or has been developed using TDD (Test-Driven Development) or BDD (Behaviour-Driven Development) is much is easier to upgrade than apps that don't.</p>

<p>What has changed in RSpec for Rails 3?
Not much.</p>

<p>In Rails 2.x, we have this functional test:</p>

<pre class="brush: ruby">
 require 'spec_helper'

describe PostsController do
  integrate_views
  fixtures :posts
  fixtures :users
  setup :activate_authlogic
  
  def mock_post(stubs={})
    @mock_post ||= mock_model(Post, stubs).as_null_object
  end

  describe "GET index" do
    
     before do
        require_admin
     end
     
    it "assigns all posts as @posts" do
      Post.stub(:all) { [mock_post] }
      get :index
      assigns(:posts).should eq([mock_post])
    end
  end

end 

</pre>


<p>If we'd like it to work for Rails 3, we just need to change one thing.</p>

<pre class="brush: ruby">
require 'spec_helper'

describe PostsController do
  render_views
  fixtures :posts
  fixtures :users
  setup :activate_authlogic
  
  def mock_post(stubs={})
    @mock_post ||= mock_model(Post, stubs).as_null_object
  end

  describe "GET index" do
    
     before do
        require_admin
     end
     
    it "assigns all posts as @posts" do
      Post.stub(:all) { [mock_post] }
      get :index
      assigns(:posts).should eq([mock_post])
    end
  end

end
</pre>


<p>I really appreciate that many developers share their experience on how they successfully upgraded their applications to 3.x. One of them is Greg Moreno. He is founder of Propsify. He's a Filipino developer based in Canada who'll come back to the Philippines in September for RailsJam events. Please find time to check out the website (which I designed) for details about the events:</p>

<p><a href="http://railsjam.net" >RailsJam</a></p>

<p>These are the most useful and concise posts I've seen on upgrading a 2.x app to 3.x:</p>

<p><a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/" >Rails 3 upgrade part 1: Booting the application</a></p>

<p><a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/" >Rails 3 upgrade part 2: Routes</a></p>

<p><a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/"  >Rails 3 upgrade part 3: Code fixes, views, and forms </a></p>

<p>I also find the Rails 3 Upgrade handbook PDF (not free) very useful. It's like a manual that shows everything (or nearly everything) that's deprecated in Rails 3.</p>

<p><a href="http://peepcode.com/products/rails-3-upgrade-handbook-pdf/"  >Rails 3 Upgrade Handbook</a></p>

<p>Also Rails 3 works well or better for Ruby 1.9.2. So you have to install RVM to use with 1.9.2 version.</p>

<pre class="brush: ruby">
Katherine-Pes-iMac:railsjam katz$ rvm info

rvm 0.1.3 by Wayne E. Seguin (wayneeseguin@gmail.com) [http://rvm.beginrescueend.com/]


system:
  uname: "Darwin Katherine-Pes-iMac.local 10.4.0 Darwin Kernel Version 10.4.0: Fri Apr 23 18:28:53 PDT 2010; root:xnu-1504.7.4~1/RELEASE_I386 i386"

ruby:
  interpreter:  "ruby"
  version:      "1.9.2dev"
  date:         "2010-07-11"
  platform:     "x86_64-darwin10.4.0"
  patchlevel:   "2010-07-11 revision 28618"
  full_version: "ruby 1.9.2dev (2010-07-11 revision 28618) [x86_64-darwin10.4.0]"

homes:
  gem:          "/Users/katz/.rvm/gems/ruby-1.9.2-rc2"
  ruby:         "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2"

binaries:
  ruby:         "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2/bin/ruby"
  irb:          "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2/bin/irb"
  gem:          "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2/bin/gem"
  rake:         "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2/bin/rake"

environment:
  GEM_HOME:     "/Users/katz/.rvm/gems/ruby-1.9.2-rc2"
  MY_RUBY_HOME: "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2"
  IRBRC:        "/Users/katz/.rvm/rubies/ruby-1.9.2-rc2/.irbrc"


</pre>


<p>Someone asked me this, what is "g" in Rails 3?</p>

<p>It's simply an alias for "generate."</p>

<pre class="brush: ruby">

rails g
Usage: rails generate GENERATOR [args] [options]

General options:
  -h, [--help]     # Print generators options and usage
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist
  -s, [--skip]     # Skip files that already exist
  -q, [--quiet]    # Supress status output

Please choose a generator below.

Rails:
  controller
  generator
  helper
  integration_test
  mailer
  migration
  model
  observer
  performance_test
  plugin
  resource
  scaffold
  scaffold_controller
  session_migration
  stylesheets

Authlogic:
  authlogic:session
  authlogic:session

Cucumber:
  cucumber:feature
  cucumber:install

Datamapper:
  datamapper:migration
  datamapper:model
  datamapper:observer

Erb:
  erb:controller
  erb:mailer
  erb:scaffold

Erubis:
  erubis:controller
  erubis:scaffold

FactoryGirl:
  factory_girl:model

Formtastic:
  formtastic:scaffold

FriendlyId:
  friendly_id

Haml:
  haml:install

Jquery:
  jquery:install

Koala:
  koala:install

Machinist:
  machinist:model

Mongomapper:
  mongomapper:model
  mongomapper:observer

Mustache:
  mustache:controller
  mustache:install
  mustache:scaffold

Rspec:
  rspec:install

Shoulda:
  shoulda:controller
  shoulda:model

SimpleForm:
  simple_form:scaffold

TestUnit:
  test_unit:controller
  test_unit:helper
  test_unit:integration
  test_unit:mailer
  test_unit:model
  test_unit:observer
  test_unit:performance
  test_unit:plugin
  test_unit:scaffold

</pre>


<p>Hope this was useful.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Many of us have several existing 2.x applications and would want to upgrade without pulling our hair because we can't figure out something or we are wary of consuming too much time. I'm about to post several links where you could find useful advice on upgrading Rails 3. Feel free to share other links if you know some.</p>]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2010-08-16 09:44:35</wp:post_date>
		<wp:post_date_gmt>2010-08-16 09:44:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-upgrade-resources</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148121331]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/rails-3-upgrade-resources/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[40fcb58c0a5c49a2c59a1c809f8ce4d6]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654392]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Install RVM, Passenger, Nginx and Rails 3 on Ubuntu Lucid Lynx</title>
		<link>http://pinoyrb.org/rails/install-rvm-passenger-nginx-and-rails-3-on-ubuntu-lucid-lynx</link>
		<pubDate>Sun, 22 Aug 2010 14:37:28 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[nginx]]></category>

		<category domain="tag" nicename="nginx"><![CDATA[nginx]]></category>

		<category domain="tag"><![CDATA[passenger]]></category>

		<category domain="tag" nicename="passenger"><![CDATA[passenger]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rvm]]></category>

		<category domain="tag" nicename="rvm"><![CDATA[rvm]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/install-rvm-passenger-nginx-and-rails-3-on-ubuntu-lucid-lynx/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This has been a problem encountered by several developers including myself:</p>

<p><strong>Getting RVM, Passenger and Rails3 to work</strong></p>

<p>Here's a quick and short post. Supposing you already have updated Ubuntu and have Ruby installed.
These are the only commands you should need:</p>

<pre class="brush: ruby">

rvm install 1.9.2

rvm 1.9.2 --passenger

rvm 1.9.2
gem install passenger

rvmsudo passenger-install-nginx-module

#use rvm by default
rvm 1.9.2-preview3 --default

#edit the nginx config file. mine is on /opt/nginx/conf/nginx.conf. just change username 

passenger_root /home/username/.rvm/gems/ruby-1.9.2-preview3/gems/passenger-2.2.15;
passenger_ruby /home/username/.rvm/bin/passenger_ruby;

#reboot if you can. I recommend rebooting over restarting/stopping and starting nginx server. reboot was actually the fix I needed after following all the steps above. 

sudo reboot 


#.rvmrc file on your Rails 3 app should contain. this may be optional but in case you've set a different ruby version, this helps. 

if [[ -s "~/.rvm/environments/ruby-1.9.2-preview3" ]] ; then
  . "~/.rvm/environments/ruby-1.9.2-preview3"
else
  rvm --create use  "ruby-1.9.2-preview3"



</pre>


<p>If nothing works for you. Check your path, your ruby version and check whether bundler is installed.</p>

<p>How to installed bundler for Rails 3:</p>

<pre class="brush: ruby">

gem install bundler --pre

</pre>


<p>Most gems for Rails 3 require "--pre" by the way.</p>

<p>Installing gems</p>

<pre class="brush: ruby">

cd app/dir && bundle install

</pre>


<p>It's that simple. But something failed. I use mysql and pg gem. I use mysql gem for test and development environment because they work better for testing. But I use postgresql for production and staging. Mysql gem was not installed by bundler. You have to run this:</p>

<pre class="brush: ruby">
gem install mysql -- --with-mysql-config=/usr/bin/mysql_config
</pre>


<p>Hope this helped someone.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>This has been a problem encountered by several developers including myself:</p>

<p><strong>Getting RVM, Passenger and Rails3 to work</strong></p>

<p>Here's a quick and short post. Supposing you already have updated Ubuntu and have Ruby installed.</p>]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2010-08-22 14:37:28</wp:post_date>
		<wp:post_date_gmt>2010-08-22 14:37:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>install-rvm-passenger-nginx-and-rails-3-on-ubuntu-lucid-lynx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/install-rvm-passenger-nginx-and-rails-3-on-ubuntu-lucid-lynx/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[b3faa6d6316be96726ab4164ab706d64]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654374]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148076156]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails 3 upgrade part 4: Prototype helpers and Javascript</title>
		<link>http://pinoyrb.org/ruby/rails-3-upgrade-part-4-prototype-helpers-and-javascript</link>
		<pubDate>Wed, 25 Aug 2010 01:44:43 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=829</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Rails 3 is embracing the <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">unobtrusive Javascript (or UJS)</a> mantra which is good because it is the right way; at the same time, it is bad because many applications will break when they upgrade to Rails 3. On the other hand, who&#8217;s expecting a smooth upgrade anyway :)</p>
<p>In my test application, I used jrails because I am more interested in jQuery than Prototype. But since <a href="http://www.railsplugins.org/plugins/264-jrails">jrails doesn&#8217;t work with Rails 3</a>, I removed it.</p>
<p>When jrails was removed, I received this error:</p>
<pre class="brush: ruby;">
undefined method `observe_field' for #&lt;#&lt;Class:0xb6867e58&gt;:0xb6865b6c&gt;
</pre>
<p><strong>Install Prototype helper plugin</strong></p>
<p>&#8216;<a href="http://apidock.com/rails/ActionView/Helpers/PrototypeHelper/observe_field">observe_field&#8217; is a Prototype helper</a> and Rails 3 removed the the link between its Javascript helpers and Prototype. The goal in Rails 3 is for developers to use their preferred Javascript library. Also note that  remote_#{method} helpers have been removed from Rails and moved to <a href="http://github.com/rails/prototype_legacy_helper">Prototype Legacy Helper plugin</a> . To install this plugin, just do:</p>
<pre class="brush: plain;">
rails plugin install git://github.com/rails/prototype_legacy_helper
</pre>
<p><strong>Remove jQuery</strong></p>
<p>Once the prototype_legacy_helper is installed, the missing method is gone but observe_field is not triggering. Removing jQuery fixes this problem.</p>
<p>Now what if you want to use jQuery instead of Prototype? It depends how dependent your application is to Prototype. I have not found a jQuery equivalent for Prototype helper plugin yet so that would be an issue like in my case. Based on this <a href="http://blog.bernatfarrero.com/jquery-and-rails-3-mini-tutorial/">jQuery and Rails 3 tutorial</a>, using the jQuery UJS driver looks very easy. </p>
<p>Previous: <a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/">Rails 3 upgrade part 3: Code fixes, views, and forms</a></p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms'>Rails 3 upgrade part 3: Code fixes, views, and forms</a> <small>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</small></li>
<li><a href='http://gregmoreno.ca/how-to-share-code-between-javascript-and-rails/' rel='bookmark' title='Permanent Link: How to share code between Javascript and Rails'>How to share code between Javascript and Rails</a> <small>Rails&#8217; validations is great because it allows you to quickly implement the valid states of your models and at the same time have a ready-made way of displaying the errors...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-2-routes/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 2: Routes'>Rails 3 upgrade part 2: Routes</a> <small>In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/kbRVr5-W8MwfjlfjBkCtzbIl-Jo/0/da"><img src="http://feedads.g.doubleclick.net/~a/kbRVr5-W8MwfjlfjBkCtzbIl-Jo/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/kbRVr5-W8MwfjlfjBkCtzbIl-Jo/1/da"><img src="http://feedads.g.doubleclick.net/~a/kbRVr5-W8MwfjlfjBkCtzbIl-Jo/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will break when they upgrade to Rails 3. On the other hand, who&#8217;s expecting a smooth upgrade anyway :) In my test application, I used jrails [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms">Rails 3 upgrade part 3: Code fixes, views, and forms</a> This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</li>
<li><a href="http://gregmoreno.ca/how-to-share-code-between-javascript-and-rails/" rel="bookmark" title="Permanent Link: How to share code between Javascript and Rails">How to share code between Javascript and Rails</a> Rails&#8217; validations is great because it allows you to quickly implement the valid states of your models and at the same time have a ready-made way of displaying the errors...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 2: Routes">Rails 3 upgrade part 2: Routes</a> In the previous post, I outlined the steps I took to upgrade and boot a Rails 3 application. This time, I share my experience upgrading the routes file. By the...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2010-08-25 01:44:43</wp:post_date>
		<wp:post_date_gmt>2010-08-25 01:44:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rails-3-upgrade-part-4-prototype-helpers-and-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148060049]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[f36fde96b1cb6360b076ff623417bbd2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654343]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby</title>
		<link>http://pinoyrb.org/ruby/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby</link>
		<pubDate>Thu, 02 Sep 2010 00:08:42 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[jruby]]></category>

		<category domain="tag" nicename="jruby"><![CDATA[jruby]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[tomcat]]></category>

		<category domain="tag" nicename="tomcat"><![CDATA[tomcat]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=839</guid>
		<description></description>
		<content:encoded><![CDATA[<p><em>and have a Ruby version running side-by-side.</em></p>
<p>A few months ago I got interested in <a href="http://jruby.org/">JRuby</a> while researching for <a href="http://alias-i.com/lingpipe/">text mining algorithms</a>. I found some gems but they are either unmaintained or inadequate while the mature libraries I found were written in Java. No problem! JRuby to the rescue. Thank God.</p>
<p>Next stop, I decided to take Rails 3 and JRuby for a spin. Incidentally, I will be on a <a href="http://railsjam.net">3-city Rails tour in the Philippines</a> this September  and since there are many<a href="http://tech.groups.yahoo.com/group/pinoyjug/"> Filipino Java developers</a>, they might find it interesting to see their favorite Java platform works nicely with Ruby on Rails.</p>
<p><strong>Setup</strong></p>
<p>I will be using the following for this tutorial:</p>
<pre class="brush: bash;">
java 1.6 + JDK
tomcat 7.0.2
rvm 1.0.1
jruby 1.5.0
ruby 1.9.2p0
</pre>
<p>Further below, I outline how to install these software. First, let’s see my current environment.</p>
<pre class="brush: bash;">
$ more /etc/issue
Ubuntu 9.10 \n \l

$ java -version
java version &quot;1.6.0_20&quot;
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Server VM (build 16.3-b01, mixed mode)

$ rvm -v
rvm 1.0.1 by Wayne E. Seguin (wayneeseguin@gmail.com) [http://rvm.beginrescueend.com/]

$ jruby -v
jruby 1.5.0 (ruby 1.8.7 patchlevel 249) (2010-05-12 6769999) (Java HotSpot(TM) Client VM 1.6.0_20) [i386-java]

$ TOMCAT/bin/version.sh
Using CATALINA_BASE:   /usr/local/apache-tomcat-7.0.2
Using CATALINA_HOME:   /usr/local/apache-tomcat-7.0.2
Using CATALINA_TMPDIR: /usr/local/apache-tomcat-7.0.2/temp
Using JRE_HOME:        /usr
Using CLASSPATH:       /usr/local/apache-tomcat-7.0.2/bin/bootstrap.jar:/usr/local/apache-tomcat-7.0.2/bin/tomcat-juli.jar
Server version: Apache Tomcat/7.0.2
Server built:   Aug 4 2010 12:23:47
Server number:  7.0.2.0
OS Name:        Linux
OS Version:     2.6.31-22-generic
Architecture:   i386
JVM Version:    1.6.0_20-b02
JVM Vendor:     Sun Microsystems Inc.

$ ruby -v
ruby 1.9.2p0 (2010-08-18 revision 29036) [i686-linux]
</pre>
<p><strong>Install JDK and Tomcat</strong></p>
<pre class="brush: bash;">
$ aptitude install curl sun-java6-bin sun-java6-jre sun-java6-jdk
$ wget  http://apache.mobiles5.com/tomcat/tomcat-7/v7.0.2-beta/bin/apache-tomcat-7.0.2.tar.gz
$&gt; tar zxvf apache-tomcat-7.0.2.tar.gz
$&gt; mv apache-tomcat-7.0.2 /usr/local
</pre>
<p>Of course, these assume you want to use 7.0.2 and you want it installed at your /usr/local.</p>
<p><strong>Install JRuby, Rails 3</strong></p>
<p>I assume you already have <a href="http://rvm.beginrescueend.com/">rvm</a> installed. If not, I highly recommend that you do. I can’t imagine a Ruby developer not using rvm :)</p>
<pre class="brush: bash;">
$ rvm install jruby
$ rvm jruby
$ rvm gemset create railsjam
$ rvm jruby@railsjam
$ gem install rails
</pre>
<p><strong>Try a sample app</strong></p>
<p>I’ve created  sample app for the<a href="http://railsjam.net"> RailsJam tour</a>. This have several functionalities already and better than creating a Rails app from scratch.</p>
<pre class="brush: bash;">
$ git clone git://github.com/gregmoreno/railsjam.git
</pre>
<p><strong>Update the Gemfile</strong></p>
<p>You need a separate set of gems to make your Rails 3 application work with JRuby. For learning purposes, I want my Rails 3 application to work other than JRuby. To accomplish that, we need to specify what gems are needed solely by JRuby.</p>
<pre class="brush: ruby;">
source 'http://rubygems.org'

gem 'rails', '3.0.0'

if defined?(JRUBY_VERSION)
  gem 'jdbc-sqlite3'
  gem 'activerecord-jdbc-adapter'
  gem 'activerecord-jdbcsqlite3-adapter'
  gem 'jruby-openssl'
  gem 'jruby-rack'
  gem 'warbler'
else
  gem 'sqlite3-ruby', :require =&gt; 'sqlite3'
end
</pre>
<p>(A copy of this Gemfile is available at the ‘jruby’ folder of the railsjam application.)</p>
<p>Now, it’s time to intall the gems.</p>
<pre class="brush: bash;">
# Must do this. Otherwise,  bundle picks up wrong version of jdbc
$ rm Gemfile.lock
$ jruby -S bundle install
</pre>
<p><strong>Prepare the database.</strong></p>
<p>The first time I worked on this tutorial, I needed to specify the jdbcsqlite3 as the database adapter. However, when I tried the tutorial on the same machine with a fresh gemset, it worked pretty well with just ‘sqlite3’.  Just to be sure, I modified  ‘database.yml’ to check for JRuby.</p>
<pre class="brush: ruby;">
development:
  adapter: &lt;%= defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3' %&gt;
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

production:
  adapter: &lt;%= defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3' %&gt;
  database: /home/greg/dev/railsjam/db/development.sqlite3
  pool: 5
  timeout: 5000
</pre>
<p>When you deploy to Tomcat, it will be on ‘production’ mode by default. Since sqlite3 is file based and for simplicity, I used the same development database.</p>
<p>Now, do the migration.</p>
<pre class="brush: bash;">
$ jruby -S rake db:migrate
</pre>
<p><strong>Deploy to Tomcat</strong></p>
<p>We use ‘<a href="http://caldersphere.rubyforge.org/warbler/">warble</a>’ which is an excellent tool for packaging your Rails application. It packages everything you need to run your Rails application inside a Java container.</p>
<pre class="brush: bash;">
$ warble
$ cp railsjam.war  $TOMCAT/webapps

# start Tomcat
# assuming you arein $TOMCAT dir
$ sudo ./startup.sh
</pre>
<p><strong>Check your Rails 3 application</strong></p>
<pre class="brush: bash;">
# You should see the famous Rails welcome
localhost:3000/railsjam

# Play around with your application
localhost:3000/railsjam/users
</pre>
<p><strong>Deploy Rails 3 using Ruby 1.9.2 </strong></p>
<p>Without shutting down your JRuby and Tomcat version, let’s try to run our app using Ruby 1.9.2</p>
<pre class="brush: bash;">
# In a new console
$ rvm 1.9.2
$ rvm gemset create railsjam
$ rvm 1.9.2@railsjam
$ gem install rails

# Assuming you are in the ‘railsjam’ folder
# This will install sqlite3-ruby gem
$ bundle install

$ rails server
</pre>
<p>Now, go play with your Rails 3 applications</p>
<pre class="brush: bash;">
# jruby + tomcat

http://localhost:8080/railsjam/users

# ruby 1.9.2

http://localhost:3000/users
</pre>
<p>In case you encountered some problems, here are some ways to solve them. If your problem is not listed here, you can email me. I only accept Paypal :)</p>
<p><strong>JRuby does not support native extensions</strong></p>
<p>You did not update the Gemfile to use the jdbc version of sqlite3. You will encounter this error when you install the gems.</p>
<pre class="brush: bash;">
$ bundle install
....
Installing sqlite3-ruby (1.3.1) with native extensions /home/greg/.rvm/rubies/jruby-1.5.2/lib/ruby/site_ruby/1.8/rubygems/installer.rb:482:in `build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)

/home/greg/.rvm/rubies/jruby-1.5.2/bin/jruby extconf.rb
WARNING: JRuby does not support native extensions or the `mkmf' library.
         Check http://kenai.com/projects/jruby/pages/Home for alternatives.
extconf.rb:9: undefined method `dir_config' for main:Object (NoMethodError)
</pre>
<p><strong>undefined method `attributes_with_quotes&#8217; for class `ActiveRecord::Base&#8217;</strong></p>
<p>I first encountered this problem when doing migration.</p>
<pre class="brush: bash;">
$ rake db:migrate
rake aborted!
undefined method `attributes_with_quotes' for class `ActiveRecord::Base'
</pre>
<p>This is caused by an old version of your jdbc gems. In my case, sometimes bundler installs the old versions:</p>
<pre class="brush: bash;">
Installing activerecord-jdbc-adapter (0.9.2)
Installing activerecord-jdbcsqlite3-adapter (0.9.2)
</pre>
<p>As of this writing, the latest version is 0.9.7</p>
<pre class="brush: bash;">
Installing activerecord-jdbc-adapter-0.9.7-java
Installing activerecord-jdbcsqlite3-adapter-0.9.7-java
</pre>
<p><strong>Bundler keeps installing 0.9.2</strong></p>
<pre class="brush: bash;">
$ rm Gemfile.lock
$ jruby -S bundle install
</pre>
<p><strong>no such file to load &#8212; sqlite3</strong></p>
<pre class="brush: bash;">
$ rake db:migrate
(in /home/greg/dev/projects/jruby/railsjam)
rake aborted!
no such file to load -- sqlite3
</pre>
<p>‘sqlite3’ is the default name of the database adapter but with jruby, it should be ‘jdbcsqlite3’.  (another) But, when I tried ‘sqlite3’ with a fresh gemset and a new machine, it went well. Anyway, just in case you run into the same problem in the future, add a condition in your database.yml </p>
<pre class="brush: ruby;">
development:
  adapter: &lt;%= defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3' %&gt;
  database: db/development.sqlite3
  pool: 5
  timeout: 5000
</pre>
<p><strong>We&#8217;re sorry, but something went wrong.</strong></p>
<p>If you see the famous Rails error message, you need to dig in Tomcat’s log files.</p>
<pre class="brush: bash;">
$ cd /usr/local/apache-tomcat-7.0.2/logs
$ ls -al localhost*

-rw-r--r-- 1 root root 1181 2010-09-01 00:17 localhost.2010-09-01.log
-rw-r--r-- 1 root root 1062 2010-09-01 00:18 localhost_access_log.2010-09-01.txt

$ tail -f localhost.2010-09-01.log
</pre>
<p>In the log file, you will see the errors like missing database.</p>
<p>org.jruby.rack.RackInitializationException: The driver encountered an error: java.sql.SQLException: path to &#8216;/home/greg/dev/tmp/apache-tomcat-7.0.2/webapps/railsjam/WEB-INF/db/production.sqlite3&#8242;: &#8216;/home/greg/dev/tmp/apache-tomcat-7.0.2/webapps/railsjam/WEB-INF/db&#8217; does not exist</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 1: Booting the application'>Rails 3 upgrade part 1: Booting the application</a> <small>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</small></li>
<li><a href='http://gregmoreno.ca/how-to-setup-a-rails-3-app/' rel='bookmark' title='Permanent Link: How to setup a Rails 3 app'>How to setup a Rails 3 app</a> <small>I finally decided to give Rails 3 a spin after beta was released 20 days ago. In geek time, that&#8217;s being a late adopter. But first, a warning. I&#8217;ve read...</small></li>
<li><a href='http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript'>Rails 3 upgrade part 4: Prototype helpers and Javascript</a> <small>Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/xVI2JX_tC_ssOkhLTIfn577pW_c/0/da"><img src="http://feedads.g.doubleclick.net/~a/xVI2JX_tC_ssOkhLTIfn577pW_c/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/xVI2JX_tC_ssOkhLTIfn577pW_c/1/da"><img src="http://feedads.g.doubleclick.net/~a/xVI2JX_tC_ssOkhLTIfn577pW_c/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[and have a Ruby version running side-by-side. A few months ago I got interested in JRuby while researching for text mining algorithms. I found some gems but they are either unmaintained or inadequate while the mature libraries I found were written in Java. No problem! JRuby to the rescue. Thank God. Next stop, I decided [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 1: Booting the application">Rails 3 upgrade part 1: Booting the application</a> It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</li>
<li><a href="http://gregmoreno.ca/how-to-setup-a-rails-3-app/" rel="bookmark" title="Permanent Link: How to setup a Rails 3 app">How to setup a Rails 3 app</a> I finally decided to give Rails 3 a spin after beta was released 20 days ago. In geek time, that&#8217;s being a late adopter. But first, a warning. I&#8217;ve read...</li>
<li><a href="http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/" rel="bookmark" title="Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript">Rails 3 upgrade part 4: Prototype helpers and Javascript</a> Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2010-09-02 00:08:42</wp:post_date>
		<wp:post_date_gmt>2010-09-02 00:08:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[178721941]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285559253]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_275df5554cd547e50b6a64e45d154b93</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_70b184725ff4a7eed4e7ddc78dfb8316</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[68b34fa1fdde00e94158b158307887ee]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to avoid breaking builds</title>
		<link>http://pinoyrb.org/ruby/how-to-avoid-breaking-builds</link>
		<pubDate>Thu, 02 Sep 2010 10:30:48 +0000</pubDate>
		<dc:creator><![CDATA[Bryan Bibat]]></dc:creator>
		
		<category domain="tag"><![CDATA[cucumber]]></category>

		<category domain="tag" nicename="cucumber"><![CDATA[cucumber]]></category>

		<category domain="tag"><![CDATA[git]]></category>

		<category domain="tag" nicename="git"><![CDATA[git]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://blog.bryanbibat.net/?p=1016</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft" src="http://www.bryanbibat.net/images/git-logo.png" alt="git" /> The guy I’m mentoring right now in one of my freelancing gigs is fairly new to software development so I decided to give him a couple of guidelines (conveniently posted on the project’s wiki) on how to properly use <a href="http://blog.bryanbibat.net/2009/06/10/distributed-revision-control/">git</a>.

Hopefully this should spare me the horrible flashbacks to the days when everyone I was working with was consistently breaking builds everyday.
<blockquote>
<h3>Best Practices</h3>
<ul>
	<li><strong>Commit often.</strong> The more you commit, the easier it is to do stuff like rolling back changes or pinpointing where a change was committed.</li>
	<li><strong>Put a meaningful comment every commit.</strong> You’ll be thankful you did that 3-6 months down the line when you’re trying to verify if a certain piece of code is a bug or a feature.</li>
	<li><strong>Push with care.</strong> Follow the procedure below to avoid breaking the build i.e. pushing a version of the code which doesn’t work.</li>
</ul>
<h3>Proper Version Control Procedure</h3>
Before you push your code to the repository, please follow the following procedure:
<ul>
	<li>If you still haven’t done it yet, commit your changes to your local repository (<tt>git add</tt> and/or <tt>git commit -a -m</tt>).</li>
</ul>
<ol>
	<li>Pull the changes from the remote repository (<tt>git pull</tt>).</li>
	<li>In case of conflict, manually edit the conflicting files.
<ul>
	<li>You may have to collaborate with the other dev for this.</li>
	<li>After fixing the conflict, commit the merged changes and go back to step 1 (<tt>git pull</tt>).</li>
</ul>
</li>
	<li>Run the DB migrations.</li>
	<li>Run the RSpec tests.
<ul>
	<li>If the specs fail, either fix the code or fix the specs.</li>
	<li>After fixing the failing specs, commit the fixes and go back to step 1.</li>
</ul>
</li>
	<li>Run the Cucumber tests.
<ul>
	<li>If the specs fail, either fix the code or fix the features.</li>
	<li>After fixing the failing features, commit the fixes and go back to step 1.</li>
</ul>
</li>
	<li>Do a simple developer test. Open the server, log in, and open a couple of pages.
<ul>
	<li>If the system doesn’t work, find the problem and fix it.</li>
	<li>After making the system run smoothly again, commit the fixes and go back to step 1.</li>
</ul>
</li>
	<li>You can now push your changes to the remote repository using <tt>git push</tt>.</li>
</ol>
</blockquote>
You might notice that we’re using RSpec and Cucumber in our project. I’ll talk more about them in a later post.]]></content:encoded>
		<excerpt:encoded><![CDATA[The guy I&#8217;m mentoring right now in one of my freelancing gigs is fairly new to software development so I decided to give him a couple of guidelines (conveniently posted on the project&#8217;s wiki) on how to properly use git. Hopefully this should spare me the horrible flashbacks to the days when everyone I was [...] ]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2010-09-02 10:30:48</wp:post_date>
		<wp:post_date_gmt>2010-09-02 10:30:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-avoid-breaking-builds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/02/how-to-avoid-breaking-builds/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[existence, refactored]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/02/how-to-avoid-breaking-builds/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/02/how-to-avoid-breaking-builds/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[ad565b5277e2d295a55eb32d0f4a24d0]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285656941]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148011668]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Ruby on Windows</title>
		<link>http://pinoyrb.org/ruby/ruby-on-windows</link>
		<pubDate>Sun, 19 Sep 2010 16:15:40 +0000</pubDate>
		<dc:creator><![CDATA[Bryan Bibat]]></dc:creator>
		
		<category domain="tag"><![CDATA[jruby]]></category>

		<category domain="tag" nicename="jruby"><![CDATA[jruby]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<category><![CDATA[ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://blog.bryanbibat.net/?p=1047</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Some posts just write themselves. Today&#8217;s post comes from my reply to a guy in <a href="http://groups.google.com/group/ruby-phil">PhRUG</a> who still thinks you need a Mac before you can develop Rails applications.</p>
<p><img src="http://www.bryanbibat.net/images/windows-ruby.png" alt="windows and ruby" class="aligncenter" /></p>
<p>The biggest problem the Ruby/Rails community has when trying to spread the word in this country: the lack of interest in supporting Windows.</p>
<p>I mean, a typical response to the legitimate question &#8220;I&#8217;m using Windows, how to I practice RoR?&#8221; is the fanboy answer: &#8220;Get a Mac!&#8221;</p>
<p>And that, my dear readers, is a <strong>dick move</strong>. If I was an average college student and you told me that, I&#8217;ll immediately think &#8220;<em>WTF?!? I just want to try out this open-source language and web framework and I need to shell out a couple of years worth of tuition?!?</em>&#8221;</p>
<p>Answering &#8220;Format your hard drive and install Linux&#8221; is less of a dick move, but a dick move nonetheless. </p>
<p>Thus, if we rubyists want to spread the word about Ruby, we&#8217;ll have to make Windows a viable OS for Ruby development. Here are a few options available to us:</p>
<p><span id="more-1047"></span><br />
<h3>Use Ruby 1.9.2</h3>
<p>Startup speed is probably the main problem with developing Rails in Windows. Fortunately, Ruby 1.9 is a heck of a lot faster than 1.8 thanks to the new interpreter.</p>
<p>I tried to install Rails 3 on my gaming rig just now to see the difference.</p>
<ul>
<li>Downloaded and installed the 1.9.2 installer from the official ruby site. Note that you must tick the <em>Add Ruby executables to your path</em> to remove the need for doing that later.</li>
</ul>
<p><img src="http://www.bryanbibat.net/images/ruby-install-1.9-win.png" alt="ruby installer" class="aligncenter" /></p>
<ul>
<li>Went to the command prompt (I used <a href="http://en.wikipedia.org/wiki/Windows_PowerShell">PowerShell</a> because it&#8217;s just better) and installed Rails 3 using the same command for installing it in Linux or OS X: <code>gem install rails --no-ri --no-rdoc</code></li>
</ul>
<p><img src="http://www.bryanbibat.net/images/win-install-rails.png" alt="installing rails" class="aligncenter" /></p>
<ul>
<li>Downloaded SQLite3 Windows DLL from <a href="http://www.sqlite.org/download.html">the official download page</a> and extracted it to the Ruby bin directory (use <code>gem env</code> to determine the path)</li>
</ul>
<p><img src="http://www.bryanbibat.net/images/win-gem-env.png" alt="gem env" class="aligncenter" /></p>
<ul>
<li>Created the 6-command blog program. (<code>cd blog</code> not included in pics)</li>
</ul>
<p><img src="http://www.bryanbibat.net/images/win-create-rails-app.png" alt="rails new blog" class="aligncenter" /></p>
<p><img src="http://www.bryanbibat.net/images/win-bundle-install.png" alt="bundle install" class="aligncenter" /></p>
<p><img src="http://www.bryanbibat.net/images/win-generate-scaffold.png" alt="rails generate scaffold" class="aligncenter" /></p>
<p><img src="http://www.bryanbibat.net/images/win-migration.png" alt="rake db:migrate" class="aligncenter" /></p>
<p><img src="http://www.bryanbibat.net/images/win-server.png" alt="rails server" class="aligncenter" /></p>
<ul>
<li>Opened http://localhost:3000/entries in a browser. Works as expected.</li>
</ul>
<p><img src="http://www.bryanbibat.net/images/win-browser.png" alt="open browser" class="aligncenter" /></p>
<p><strong>Conclusion</strong>: Ruby 1.9 on Windows is pretty fast. Have the newbie install this along with <a href="http://netbeans.org/features/ruby/index.html">NetBeans</a> or <a href="http://www.aptana.com/products/radrails">RadRails</a> and he should be diving into Rails in no time.</p>
<h3>Virtualization (my personal choice)</h3>
<p><img src="http://www.bryanbibat.net/images/virtualization.jpg" alt="virtual machine" class="aligncenter" /></p>
<p>The problem with Windows is that some important gems (<a href="http://rvm.beginrescueend.com/">rvm</a>, <a href="http://unicorn.bogomips.org/">unicorn</a>, and <a href="http://www.modrails.com/">passenger</a>) are not supported by the OS. Fortunately, with a decent computer, you can run Linux inside of Windows without having to dual boot. <a href="http://www.virtualbox.org/">VirtualBox</a> or <a href="http://www.vmware.com/products/player/">VMWare Player</a> are both free virtualization options available on Windows.</p>
<p>For a gaming level rig (~4 GB RAM, RAM is pretty cheap nowadays), installing <a href="http://www.ubuntu.com/desktop">Ubuntu Desktop 10.4 (Lucid Lynx)</a> on a VM with 10GB of space and 1GB of RAM should be more than enough for development needs. If you want to use a Windows editor/IDE to edit your files, you can setup shared folders to gain access to the files from the host PC.</p>
<p>For a slightly weaker machine, you could install <a href="http://www.ubuntu.com/server">Ubuntu Server</a> on a VM with 10GB of space and 512MB of RAM, and voila! instant VPS on your PC. You can even use <a href="https://help.ubuntu.com/9.04/serverguide/C/openssh-server.html">openssh-sever</a> + <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a> to emulate having multiple terminal windows.</p>
<h3><a href="http://jruby.org/">JRuby</a></h3>
<p>Pretty much the same as MRI Ruby with some minor differences. We don&#8217;t have rvm on Windows so you&#8217;ll have to change all of your &#8220;<code>ruby</code>&#8221; commands with &#8220;<code>jruby</code>&#8221; and prefix your ruby system commands with &#8220;<code>jruby -S</code>&#8221; e.g. &#8220;<code>jruby -S gem ...</code>&#8220;.</p>
<p>Downside is that it has the slow startup speed of 1.8 (they say you could tweak it to preload the libraries faster, but I haven&#8217;t tried it myself) and the native extension problems of having a different environment.</p>
<p>On the plus side, it&#8217;s on the JVM: just package your project into a WAR file with <a href="http://kenai.com/projects/warbler/pages/Home">Warbler</a> and it should be deployable on any J2EE application server. Great for convincing J2EE software houses to try out Rails.</p>
<p>&#8211;</p>
<p>In closing, if you&#8217;ve got a MacBook Pro and someone asks you about developing Rails on a PC, don&#8217;t be a dick and tell them &#8220;Get a Mac!&#8221;. Ruby is just fine regardless of whether you&#8217;re using Windows, Linux, or OS X.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Some posts just write themselves. Today&#8217;s post comes from my reply to a guy in PhRUG who still thinks you need a Mac before you can develop Rails applications. The biggest problem the Ruby/Rails community has when trying to spread the word in this country: the lack of interest in supporting Windows. I mean, a [...] ]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2010-09-19 16:15:40</wp:post_date>
		<wp:post_date_gmt>2010-09-19 16:15:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ruby-on-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[existence, refactored]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/20/ruby-on-windows/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/20/ruby-on-windows/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/09/20/ruby-on-windows/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[6b2f8a2e9bbb5ae85fcac120ac4d4f79]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285655285]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[147998094]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syndication_freeze_updates</wp:meta_key>
		<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>8</wp:comment_id>
		<wp:comment_author><![CDATA[arscariosus]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>https://www.google.com/accounts/o8/id?id=AItOawnLVdigqSwuoZz0R8TuCFuFMoZE0hXrVb4</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-11-14 09:32:00</wp:comment_date>
		<wp:comment_date_gmt>2010-11-14 09:32:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hello, it's nice to see that there are a lot of Ruby hackers in the Philippines now. I'm also a Filipino, an undergrad student that's been learning ruby core and rails through online materials even though it's not included in our curriculum. As for my comment proper to this post, it's annoying to work with Rails on Windows since it's so noticeably slow. So students like me end up using *nix and or buying a Mac if the budget allows. The sluggishness is bearable with Ruby core (solving competition materials and small MPs) but with Rails, it sucks. Various blog posts and forums have mentioned that there's something wrong with Windows itself, so we can't do anything about it, the best thing we could to is to set up a VB. :( I know this because I have this fascination with netbooks (even though netbooks might not be designed for development) because of their small form factor, and using the same hardware I've worked with small projects with Rails, and it definitely crawls natively on Windows, but on Ubuntu and my old Power Mac G4, it works great.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>2</wp:comment_id>
		<wp:comment_author><![CDATA[Luis Lavena]]></wp:comment_author>
		<wp:comment_author_email>luislavena@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.mmediasys.com</wp:comment_author_url>
		<wp:comment_author_IP>186.108.219.99</wp:comment_author_IP>
		<wp:comment_date>2010-09-27 22:09:21</wp:comment_date>
		<wp:comment_date_gmt>2010-09-27 22:09:21</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hello!

Thank you for writing down this article! I believe too that for Ruby, acceptance of Windows as a platform should be addressed and developers should encouraged to consider it and support the users.

I have one comment in relation to PowerShell usage. Please note that batch files for gems like rake, rails and others might not work as expected under it.

If you want better copy and buffer capabilities than the default cmd.exe, you can wrap it around Console2 (available on SourceForge)

See our group for details and possible issues with PowerShell usage:

http://groups.google.com/group/rubyinstaller/

Thank you again for your article, feel free to add it to our Wiki:

http://github.com/oneclick/rubyinstaller/wiki/Tutorials

Cheers!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>3</wp:comment_id>
		<wp:comment_author><![CDATA[Luis Lavena]]></wp:comment_author>
		<wp:comment_author_email>luislavena@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.mmediasys.com</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-09-27 22:09:00</wp:comment_date>
		<wp:comment_date_gmt>2010-09-27 22:09:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hello!

Thank you for writing down this article! I believe too that for Ruby, acceptance of Windows as a platform should be addressed and developers should encouraged to consider it and support the users.

I have one comment in relation to PowerShell usage. Please note that batch files for gems like rake, rails and others might not work as expected under it.

If you want better copy and buffer capabilities than the default cmd.exe, you can wrap it around Console2 (available on SourceForge)

See our group for details and possible issues with PowerShell usage:

http://groups.google.com/group/rubyinstaller/

Thank you again for your article, feel free to add it to our Wiki:

http://github.com/oneclick/rubyinstaller/wiki/Tutorials

Cheers!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>4</wp:comment_id>
		<wp:comment_author><![CDATA[Bry]]></wp:comment_author>
		<wp:comment_author_email>bryan_bibat@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.bryanbibat.com</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-09-28 07:58:00</wp:comment_date>
		<wp:comment_date_gmt>2010-09-28 07:58:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for the response, Luis! 

BTW, we're planning to hold Ruby and Rails workshops in local colleges here in the Philippines and we're thinking of building self-contained Rails installers (think Instant Rails but with Rails 3 and SQLite) because these schools primarily use Windows and usually don't have fast internet access. 

Can we fork the RubyInstaller project to build these installers? Also, would we encounter problems (legal or otherwise) if we package Rails and SQLite together with Ruby?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>3</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>5</wp:comment_id>
		<wp:comment_author><![CDATA[]]></wp:comment_author>
		<wp:comment_author_email>luislavena@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-09-29 12:27:00</wp:comment_date>
		<wp:comment_date_gmt>2010-09-29 12:27:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Interesting,

I have no personal objection on these packages. As InstantRails, these can be delivered to users as long source code is also available.

As for the installer, I would recommend use the 7zip package as base, install the gems in it using that version of ruby with "--no-ri --no-rdoc --env-shebang" and then package as the installer.

The 7zip packages will be better so you we are not distributing different versions of Ruby everywhere, also the customization of the installer itself to note your work.

If you don't mind, join us at RubyInstaller group:

http://groups.google.com/group/rubyinstaller

I see lot of potential from your v0 installer to become the next "InstantRails" alternative.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>4</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>7</wp:comment_id>
		<wp:comment_author><![CDATA[drnic]]></wp:comment_author>
		<wp:comment_author_email>drnicwilliams@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://drnicwilliams.com</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-10-26 14:53:00</wp:comment_date>
		<wp:comment_date_gmt>2010-10-26 14:53:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Top tip for virtualisation: http://vagrantup.com/ Very nice project if you like a VM on your windows machine.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>How to Use jQuery For Rails 3</title>
		<link>http://pinoyrb.org/rails/how-to-use-jquery-for-rails-3</link>
		<pubDate>Sat, 25 Sep 2010 13:12:50 +0000</pubDate>
		<dc:creator><![CDATA[Katz Pe]]></dc:creator>
		
		<category domain="tag"><![CDATA[jquery]]></category>

		<category domain="tag" nicename="jquery"><![CDATA[jquery]]></category>

		<category><![CDATA[rails]]></category>

		<category domain="category" nicename="rails"><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://blog.bridgeutopiaweb.com/post/how-to-use-jquery-for-rails-3/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>jQuery is the defacto Javascript framework used by happy programmers. I am very glad to use it in almost all of the applications I am working on.</p>

<p>There are many posts on how to use it for Rails 3. But here's another one which may help Rails 3 newbies (aren't we all newbies when it comes to Rails 3?).</p>

<p><strong> The jQuery Rails gem </strong></p>

<p>In your Gemfile, include the jquery-rails gem created by Andre Arko of Engine Yard.</p>

<pre class="brush: ruby">
gem "jquery-rails"
</pre>


<p>And install the gem using the command:</p>

<pre class="brush: ruby">

bundle install
</pre>


<p>Install jQuery. The following command will remove prototype and scriptaculous files and add jQuery to your application:</p>

<pre class="brush: ruby">
rails generate jquery:install
or
rails g jquery:install
</pre>


<p><strong> Using livequery </strong></p>

<p>So you probably know that the following code will no longer work:</p>

<pre class="brush: ruby">
<= link_to_remote 'delete', :url => admin_image_path(image), :confirm => 'Are you sure you want to delete this image?', :method => :delete >
</pre>


<p>They probably realized there's way too much javascript on the body tags making Rails apps look ugly when you view the source.</p>

<p>There's a need to include <a href="http://docs.jquery.com/Plugins/livequery" >livequery</a>  within the head tag or before closing body tag if you wish to follow the YSlow recommendations.</p>

<pre class="brush: ruby">

On application.js 

$('a[data-remote=true]').livequery('click', function() {
  return request({ url : this.href });
});
 

$('form[data-remote=true]').livequery('submit', function() {
  return request({ url : this.action, type : this.method, data : $(this).serialize() });
});

$(function() {
  $(".alert").click(function() {
    alert(this.getAttribute("data-confirm"));
    return false;
  })
})


Replace the link_to_remote code with the following: 

<%=link_to "Delete", admin_image_path(image), :method=>:delete, :confirm=>"Are you sure you want to delete this image?", :remote=>:true, :class=>"alert"%>
</pre>


<p>That is it! Advantages of this code over the previous code is obvious. It's not obtrusive and it works. Congratulations to all of us. We're no longer living in caves and eating whatever exists in the wild. We actually have a choice.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>jQuery is the defacto Javascript framework used by happy programmers. I am very glad to use it in almost all of the applications I am working on.</p>

<p>There are many posts on how to use it for Rails 3. But here's another one which may help Rails 3 newbies (aren't we all newbies when it comes to Rails 3?).</p>]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2010-09-25 13:12:50</wp:post_date>
		<wp:post_date_gmt>2010-09-25 13:12:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-use-jquery-for-rails-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[a7ba6a6e0ded08c235be528f2aef0431]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/post/how-to-use-jquery-for-rails-3/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.blog.bridgeutopiaweb.com/feed]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[BridgeUtopia]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bridgeutopiaweb.com/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654328]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[147998127]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>About</title>
		<link>http://pinoyrb.org/about</link>
		<pubDate>Mon, 27 Sep 2010 00:56:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Our goal </strong>
<blockquote>When you think of Ruby, Rails, and Asia, you think about the Philippines.</blockquote>
<strong>Meetup:</strong> every 3rd Thursday of the month

<strong>Mailing list:</strong> <a href="http://groups.google.com/group/ruby-phil">Join our Google group </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-09-27 00:56:54</wp:post_date>
		<wp:post_date_gmt>2010-09-27 00:56:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285654267]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148000065]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Projects</title>
		<link>http://pinoyrb.org/projects</link>
		<pubDate>Mon, 27 Sep 2010 04:10:07 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<guid isPermaLink="false">http://pinoyrb.org</guid>
		<description></description>
		<content:encoded><![CDATA[This is a list of our contributions to the Ruby community:

<strong>Evan Sagge</strong>
<ul>
<blockquote>
	<li><a href="http://github.com/evansagge/mongoid-rspec">mongoid-rspec</a>
Provides RSpec matchers for Mongoid. Includes matchers for associations, options, validations, and fields.</li>
</blockquote>
</ul>
<strong><a href="http://github.com/diwadm">Diwa del Mundo</a></strong>
<blockquote>
<ul>
	<li><a href="http://chainselects.hypermediasoft.com/">ChainSelects</a>
A Rails plugin for creating ajax-based chained drop down select boxes.</li>
</ul>
</blockquote>
<a href="/author/greg"><strong>Greg Moreno</strong></a>
<ul>
<blockquote>
	<li><a href="http://github.com/gregmoreno/openamplify">openamplify
</a>Ruby gem to access the <a href="http://community.openamplify.com/blogs/quickstart/pages/overview.aspx">OpenAmplify</a> webservices API.</li>
	<li><a href="http://github.com/gregmoreno/globe-mobile">globe-mobile</a>
Ruby gem to access Globe's SMS/MMS API.</li>
</blockquote>
</ul>
<a href="/author/bridgeutopia"><strong>Katz Pe</strong></a>
<blockquote>
<ul>
	<li><a href="http://github.com/radamanthus/railsjam">railsjam</a>
A Rails3 app for organizing <a href="http://railsjam.net">RailsJam</a> events. Co-developers: Cecille,  <a href="/authors/rad">Rad Batnag</a>.</li>
</ul>
</blockquote>
<strong>Mark Maglana, Emiliano Heyns</strong>
<blockquote>
<ul>
	<li><a href="http://www.redminebacklogs.net">Redmine Backlogs</a>
A Redmine plugin for agile teams.</li>
</ul>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2010-09-27 04:10:07</wp:post_date>
		<wp:post_date_gmt>2010-09-27 04:10:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1285658501]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Using RabbitMQ and AMQP with Ruby</title>
		<link>http://pinoyrb.org/ruby/using-rabbitmq-and-amqp-with-ruby</link>
		<pubDate>Tue, 28 Sep 2010 07:59:11 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=855</guid>
		<description></description>
		<content:encoded><![CDATA[<p><em>This post is also available at <a href="http://rubyoncloud.org">Ruby On Cloud</a></em></p>
<p><a href="http://www.amqp.org/">AMQP</a> stands for Advanced Message Queuing Protocol. RabbitMQ is a server that implements the protocol. RabbitMQ is available on Linux, OSX, and Windows. Installation instructions for RabbitMQ are available at <a href="http://www.rabbitmq.com/install.html">http://www.rabbitmq.com/install.html</a></p>
<p>I will be running RabbitMQ on Ubuntu 9.10. First, let&#8217;s install the server:</p>
<pre class="brush: bash;">
    apt-get install rabbitmq-server
</pre>
<p>Note the server is installed as a daemon after the installation. Just to be sure, let&#8217;s stop and start the server.</p>
<pre class="brush: bash;">
    greg@gohan:~$ sudo /etc/init.d/rabbitmq-server stop
    Stopping rabbitmq-server: rabbitmq-server.
    greg@gohan:~$ sudo /etc/init.d/rabbitmq-server start
    Starting rabbitmq-server: SUCCESS
    rabbitmq-server.
</pre>
<p>Next, we install the amqp gem by Aman Gupta. The gem can also be found at <a href="http://github.com/tmm1/amqp">http://github.com/tmm1/amqp</a></p>
<pre class="brush: bash;">
    greg@gohan:~$ gem install amqp
    Building native extensions.  This could take a while...
    Successfully installed eventmachine-0.12.10
    Successfully installed amqp-0.6.7
    2 gems installed
</pre>
<p>Let&#8217;s now build a simple publisher code. Note the difference in the gem&#8217;s name and the file you need to use the gem.</p>
<pre class="brush: ruby;">
    require 'mq'

    Thread.new { AMQP.start }

    # All queues are created automatically the first time it is
    # accessed. Make sure this is the same queue our consumers
    # will use.
    q = MQ.queue('my_queue')

    i=0
    while true
      i += 1
      q.publish(&quot;Hello, World #{i}&quot;)
      sleep(1)
    end
</pre>
<p>Next, the consumer code:</p>
<pre class="brush: ruby;">
    require 'mq'

    AMQP.start do
      q = MQ.queue('my_queue')

      q.subscribe do |msg|
        puts &quot;#{Time.now}: #{msg}&quot; if msg
      end
    end
</pre>
<p>The &#8216;subscribe&#8217; method registers with the queue telling it to call the block when a message has arrived. Alternatively, you can use &#8216;pop&#8217; but this would constantly poll the server for new messages making unnecessary calls even if the queue is empty.</p>
<pre class="brush: ruby;">
    AMQP.start do
      q = MQ.queue('my_queue')
      q.pop do |msg|
        puts &quot;#{Time.now}: #{msg}&quot; if msg
        q.pop
      end
    end
</pre>
<p>If you want to run AMQP on several machines, just specify the location of the broker in your publisher and consumer code:</p>
<pre class="brush: ruby;">
    AMQP.start(:host =&gt; '192.168.0.195') do
      # code here
    end
</pre>
<p>You only need to run 1 rabbitmq server, which in my case is on Ubuntu. When you try the code in other machines, you only need the <a href="http://github.com/tmm1/amqp">amqp</a> gem installed.</p>
<p>I highly recommend &#8220;<a href="http://tinyurl.com/2aqcz22">Distributed Programming with Ruby</a>&#8221; by Mark Bates if you&#8217;re interested in distributed programming.</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/how-to-setup-a-rails-3-app/' rel='bookmark' title='Permanent Link: How to setup a Rails 3 app'>How to setup a Rails 3 app</a> <small>I finally decided to give Rails 3 a spin after beta was released 20 days ago. In geek time, that&#8217;s being a late adopter. But first, a warning. I&#8217;ve read...</small></li>
<li><a href='http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/' rel='bookmark' title='Permanent Link: Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby'>Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby</a> <small>and have a Ruby version running side-by-side. A few months ago I got interested in JRuby while researching for text mining algorithms. I found some gems but they are either...</small></li>
<li><a href='http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/' rel='bookmark' title='Permanent Link: Ruby 101: How to add methods to a Ruby class'>Ruby 101: How to add methods to a Ruby class</a> <small>Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/a1ChoPbfLSf_hBwmmvFHSEOXYXA/0/da"><img src="http://feedads.g.doubleclick.net/~a/a1ChoPbfLSf_hBwmmvFHSEOXYXA/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/a1ChoPbfLSf_hBwmmvFHSEOXYXA/1/da"><img src="http://feedads.g.doubleclick.net/~a/a1ChoPbfLSf_hBwmmvFHSEOXYXA/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[This post is also available at Ruby On Cloud AMQP stands for Advanced Message Queuing Protocol. RabbitMQ is a server that implements the protocol. RabbitMQ is available on Linux, OSX, and Windows. Installation instructions for RabbitMQ are available at http://www.rabbitmq.com/install.html I will be running RabbitMQ on Ubuntu 9.10. First, let&#8217;s install the server: apt-get install [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/how-to-setup-a-rails-3-app/" rel="bookmark" title="Permanent Link: How to setup a Rails 3 app">How to setup a Rails 3 app</a> I finally decided to give Rails 3 a spin after beta was released 20 days ago. In geek time, that&#8217;s being a late adopter. But first, a warning. I&#8217;ve read...</li>
<li><a href="http://gregmoreno.ca/deploy-a-rails-3-sqlite3-application-in-tomcat-using-jruby/" rel="bookmark" title="Permanent Link: Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby">Deploy a Rails 3, Sqlite3 application in Tomcat using JRuby</a> and have a Ruby version running side-by-side. A few months ago I got interested in JRuby while researching for text mining algorithms. I found some gems but they are either...</li>
<li><a href="http://gregmoreno.ca/ruby-101-how-to-add-methods-to-a-ruby-class/" rel="bookmark" title="Permanent Link: Ruby 101: How to add methods to a Ruby class">Ruby 101: How to add methods to a Ruby class</a> Let’s add a method that checks whether an Array has many elements. a = [1,2,3] a.many? # NoMethodError: undefined method `many?' Let’s fix this by adding a new method to...</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2010-09-28 07:59:11</wp:post_date>
		<wp:post_date_gmt>2010-09-28 07:59:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>using-rabbitmq-and-amqp-with-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[148080277]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/using-rabbitmq-and-amqp-with-ruby/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/using-rabbitmq-and-amqp-with-ruby/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/using-rabbitmq-and-amqp-with-ruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[f8b295f5731d1915441175b00e266812]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Redmine on Jruby</title>
		<link>http://pinoyrb.org/ruby/redmine-on-jruby</link>
		<pubDate>Tue, 28 Sep 2010 14:06:01 +0000</pubDate>
		<dc:creator><![CDATA[Christopher Rigor]]></dc:creator>
		
		<category domain="tag"><![CDATA[jruby]]></category>

		<category domain="tag" nicename="jruby"><![CDATA[jruby]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://crigor.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[<p>To be able to take advantage of jruby, you need to add config.threadsafe! on your rails app. I tried doing this on redmine 1.0.2 but some pages were not working. Some of the errors were</p>
<p>uninitialized constant Redmine::Views::OtherFormatsBuilder<br />
uninitialized constant Redmine::DefaultData<br />
uninitialized constant Redmine::Activity::Fetcher<br />
uninitialized constant ActionView::Base::CompiledTemplates::TabularFormBuilder</p>
<p>I got it to work by changing config/initializers/30-redmine.rb to</p>
<pre class="brush: ruby; auto-links: false; light: true;">
I18n.default_locale = 'en'
dirs = [&quot;SVG&quot;, &quot;redmine&quot;]
files = []
lib_path = &quot;#{RAILS_ROOT}/lib&quot;
matcher = /\A#{Regexp.escape(lib_path)}\/(.*)\.rb\Z/
dirs.each do |dir|
  files += Dir.glob(&quot;#{lib_path}/#{dir}/**/*.rb&quot;)
end
files += Dir.glob(&quot;#{lib_path}/*.rb&quot;)
files.each do |file|
  require file.sub(matcher, '\1')
end
</pre>
<p>Adding RAILS_ROOT/lib to config.eager_load_paths doesn&#8217;t work. If there is a better way, let me know in the comments.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[To be able to take advantage of jruby, you need to add config.threadsafe! on your rails app. I tried doing this on redmine 1.0.2 but some pages were not working. Some of the errors were
uninitialized constant Redmine::Views::OtherFormatsBuilder
uninitialized constant Redmine::DefaultData
uninitialized constant Redmine::Activity::Fetcher
uninitialized constant ActionView::Base::CompiledTemplates::TabularFormBuilder
I got it to work by changing config/initializers/30-redmine.rb to

I18n.default_locale = 'en'
dirs = [&#034;SVG&#034;, [...] ]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2010-09-28 14:06:01</wp:post_date>
		<wp:post_date_gmt>2010-09-28 14:06:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>redmine-on-jruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/redmine-on-jruby/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/redmine-on-jruby/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[155763370]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/redmine-on-jruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[3094fea05243f55d945ee74d73c08579]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Tax for the poor and mathematically challenged</title>
		<link>http://pinoyrb.org/ruby/tax-for-the-poor-and-mathematically-challenged</link>
		<pubDate>Sun, 03 Oct 2010 21:25:27 +0000</pubDate>
		<dc:creator><![CDATA[Bryan Bibat]]></dc:creator>
		
		<category domain="tag"><![CDATA[jquery]]></category>

		<category domain="tag" nicename="jquery"><![CDATA[jquery]]></category>

		<guid isPermaLink="false">http://blog.bryanbibat.net/?p=1069</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://apps.bryanbibat.net/lotto/"><img src="http://www.bryanbibat.net/images/lotto_simulator.png" alt="lotto simulator" class="aligncenter" /></a></p>
<p>The Lottery: another way for the government to tax the (typically tax-exempt) poor.</p>
<p>As much as I&#8217;d like to shy away from yet-another-&#8221;greed is evil&#8221; post, recent circumstances have led me to mingle with people who still think spending money on the lottery is a good idea. So instead of being a jerk IRL, I&#8217;ll just post the arguments against the lottery here online.</p>
<p>The first argument against the lottery is that the odds are stacked <em>waaaaay</em> against you. Anyone who has even the basic knowledge of <a href="http://en.wikipedia.org/wiki/Enumerative_combinatorics">Combinatorics</a> and <a href="http://en.wikipedia.org/wiki/Return_on_Investment">ROI</a> knows that the lottery is a loser&#8217;s game.</p>
<p>Don&#8217;t believe me? Why not try <a href="http://apps.bryanbibat.net/lotto/">this little app I made using Rails 3 and a dash of jQuery</a>. You could even check <a href="http://github.com/bryanbibat/lotto">the source code</a> to <a href="http://github.com/bryanbibat/lotto/blob/master/app/models/lotto_drawer.rb#L36">see</a> if the drawing algorithm is sound.</p>
<p>(It&#8217;s not an original idea, though. I just based it on a <a href="http://news.ycombinator.com/item?id=1736853">Hacker News link</a> last week.) </p>
<p>The second argument is that the people likely to win the lottery are the people least likely to have the financial literacy to handle such a large amount. But I guess <a href="http://blog.bryanbibat.net/2010/09/27/biggest-financial-obstacle-your-pride/">you already knew that</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[The Lottery: another way for the government to tax the (typically tax-exempt) poor. As much as I&#8217;d like to shy away from yet-another-&#8221;greed is evil&#8221; post, recent circumstances have led me to mingle with people who still think spending money on the lottery is a good idea. So instead of being a jerk IRL, I&#8217;ll [...] ]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2010-10-03 21:25:27</wp:post_date>
		<wp:post_date_gmt>2010-10-03 21:25:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>tax-for-the-poor-and-mathematically-challenged</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/10/04/tax-for-the-poor-and-mathematically-challenged/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[f7fb2b8ab1959b365400b26c6804ec2d]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[150845702]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[existence, refactored]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[existence, refactored]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/10/04/tax-for-the-poor-and-mathematically-challenged/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/10/04/tax-for-the-poor-and-mathematically-challenged/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/10/04/tax-for-the-poor-and-mathematically-challenged/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/10/04/tax-for-the-poor-and-mathematically-challenged/]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>How to use OpenAmplify with Ruby</title>
		<link>http://pinoyrb.org/ruby/how-to-use-openamplify-with-ruby</link>
		<pubDate>Wed, 06 Oct 2010 17:34:16 +0000</pubDate>
		<dc:creator><![CDATA[Greg Moreno]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://gregmoreno.ca/?p=876</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The <a href="http://community.openamplify.com/blogs/quickstart/pages/overview.aspx">OpenAmplify API</a> reads text you supply and returns linguistic data explaining and classifying the content. What you do with that analysis is, in the fine tradition of APIs and mashups, up to you. Some possibilities might include pairing ads with articles, creating rich tag-clouds, or monitoring the tone of forum threads.</p>
<p>I created a ruby gem to simplify the use of the OpenAmplify API. It&#8217;s still in the early stages but should be enough to get you started.</p>
<p><strong>Installation</strong></p>
<pre class="brush: bash;">
    gem install openamplify
</pre>
<p><strong>Usage:</strong></p>
<pre class="brush: ruby;">
    require 'openamplify'

    API_KEY = &quot;register to get a key&quot;
    client = OpenAmplify::Client.new(:api_key =&gt; API_KEY)

    text = &quot;After getting the MX1000 laser mouse and the Z-5500 speakers i fell in love with logitech&quot;
    response = client.analyze_text(text)

    # List all the keys and values returned by OpenAmplify
    response.each do |k, v|
      pp k
      pp v
    end

    # 'response' works like a Hash
    puts response['Topics']
    puts response['Demographics']
</pre>
<p><strong>Output Format</strong></p>
<p>In case you need a different format, OpenAmplify supports XML, JSON, RDF, CSV. It can also return the result as a fancy HTML page.</p>
<pre class="brush: ruby;">
    # assuming you use Nokogiri
    doc = Nokogiri::XML(response.to_xml)

    # or you want a JSON
    json = JSON.parse(response.to_json)

    # you should really try the pretty formats
    puts response.to_pretty
    # or
    puts response.to_signals
</pre>
<p>The source code is available in github: <a href="http://github.com/gregmoreno/openamplify">http://github.com/gregmoreno/openamplify</a></p>
<p>This post is also available at <a href="http://www.rubyoncloud.org/questions/how-to-use-openamplify-with-ruby">Ruby On Cloud</a>.</p>


<p>Related posts:<ol><li><a href='http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/' rel='bookmark' title='Permanent Link: Ruby 101: Make your class behave like a Ruby built-in'>Ruby 101: Make your class behave like a Ruby built-in</a> <small>I got re-acquianted with this scenario while working on the OpenAmplify gem &#8211; a wrapper for the OpenAmplify API. When you give the api a text like a blog comment,...</small></li>
<li><a href='http://gregmoreno.ca/how-to-read-google-buzz-updates-in-ruby/' rel='bookmark' title='Permanent Link: How to read Google buzz updates in Ruby'>How to read Google buzz updates in Ruby</a> <small>require 'rubygems' require 'nokogiri' require 'open-uri' require 'feedzirra' profile_name = 'dave.winer' page = Nokogiri::HTML(open(&quot;http://www.google.com/profiles/#{profile_name}&quot;)) feed_url = page.search('//head/link[@type=&quot;application/atom+xml&quot;]').first['href'] feed = Feedzirra::Feed.fetch_and_parse(feed_url) puts feed.title puts feed.url puts feed.last_modified feed.entries.each do |entry| puts...</small></li>
<li><a href='http://gregmoreno.ca/ruby-101-how-to-filter-an-array-using-proc/' rel='bookmark' title='Permanent Link: Ruby 101: How to filter an Array using proc'>Ruby 101: How to filter an Array using proc</a> <small>Over at the PhRUG, a Ruby developer community based in the Philippines, we conduct code review sessions via our mailing list. A code is posted and members share alternative implementations....</small></li>
</ol></p>
<p><a href="http://feedads.g.doubleclick.net/~a/l0C3FC5XuFqw6AaoPIRebsCi2tY/0/da"><img src="http://feedads.g.doubleclick.net/~a/l0C3FC5XuFqw6AaoPIRebsCi2tY/0/di" border="0" ismap="true"></img></a><br/>
<a href="http://feedads.g.doubleclick.net/~a/l0C3FC5XuFqw6AaoPIRebsCi2tY/1/da"><img src="http://feedads.g.doubleclick.net/~a/l0C3FC5XuFqw6AaoPIRebsCi2tY/1/di" border="0" ismap="true"></img></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[The OpenAmplify API reads text you supply and returns linguistic data explaining and classifying the content. What you do with that analysis is, in the fine tradition of APIs and mashups, up to you. Some possibilities might include pairing ads with articles, creating rich tag-clouds, or monitoring the tone of forum threads. I created a [...]


Related posts:<ol><li><a href="http://gregmoreno.ca/ruby-101-make-your-class-behave-like-a-ruby-built-in/" rel="bookmark" title="Permanent Link: Ruby 101: Make your class behave like a Ruby built-in">Ruby 101: Make your class behave like a Ruby built-in</a> I got re-acquianted with this scenario while working on the OpenAmplify gem &#8211; a wrapper for the OpenAmplify API. When you give the api a text like a blog comment,...</li>
<li><a href="http://gregmoreno.ca/how-to-read-google-buzz-updates-in-ruby/" rel="bookmark" title="Permanent Link: How to read Google buzz updates in Ruby">How to read Google buzz updates in Ruby</a> require 'rubygems' require 'nokogiri' require 'open-uri' require 'feedzirra' profile_name = 'dave.winer' page = Nokogiri::HTML(open(&quot;http://www.google.com/profiles/#{profile_name}&quot;)) feed_url = page.search('//head/link[@type=&quot;application/atom+xml&quot;]').first['href'] feed = Feedzirra::Feed.fetch_and_parse(feed_url) puts feed.title puts feed.url puts feed.last_modified feed.entries.each do |entry| puts...</li>
<li><a href="http://gregmoreno.ca/ruby-101-how-to-filter-an-array-using-proc/" rel="bookmark" title="Permanent Link: Ruby 101: How to filter an Array using proc">Ruby 101: How to filter an Array using proc</a> Over at the PhRUG, a Ruby developer community based in the Philippines, we conduct code review sessions via our mailing list. A code is posted and members share alternative implementations....</li>
</ol>]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2010-10-06 17:34:16</wp:post_date>
		<wp:post_date_gmt>2010-10-06 17:34:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-use-openamplify-with-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/how-to-use-openamplify-with-ruby/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/how-to-use-openamplify-with-ruby/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca/how-to-use-openamplify-with-ruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[153248786]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[MetaGreg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[7ee9ad981c8826c981879deb6733ab42]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://gregmoreno.ca]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>XMPP Development in Ruby</title>
		<link>http://pinoyrb.org/ruby/xmpp-development-in-ruby</link>
		<pubDate>Sun, 17 Oct 2010 13:53:40 +0000</pubDate>
		<dc:creator><![CDATA[Rad Batnag]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://rad.batnag.org/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Recently I wasted a day and half in debugging an XMPP-based service I&#8217;m working on. As is usual, the real reason I lost so much time was because I was totally unfamiliar with the terrain. I should have spent an hour or two on XMPP basics before I waded into this unfamiliar territory.</p>
<p>If you&#8217;re just starting on XMPP development with Ruby, here are some tips and resources that you might find useful.</p>
<p><strong>One client at a time</strong><br />
For each account, there should only be one XMPP client logged in at any time. If client A is already logged in, and then client B logs in, client A will be disconnected and will stop receiving notifications. Just like in Yahoo! Messenger: when you login from a second client, the first client will be disconnected. It&#8217;s so basic, but I managed to waste the better part of a day on debugging perfectly working code before I realized that this was what&#8217;s going on in my system.</p>
<p><strong>Use <a href="http://github.com/mojodna/switchboard/tree" onclick="pageTracker._trackPageview('/outgoing/github.com/mojodna/switchboard/tree?referer=');">switchboard</a> for testing</strong><br />
When debugging network applications, you want to make sure that the application is indeed the problem and not the network. For web applications, you use <a href="http://en.wikipedia.org/wiki/CURL" onclick="pageTracker._trackPageview('/outgoing/en.wikipedia.org/wiki/CURL?referer=');">curl</a> for testing. switchboard aims to be the curl for XMPP development.  curl is a command-line (hence scriptable!) http client; XMPP is a command-line XMPP client.</p>
<p>github page: <a href="http://github.com/mojodna/switchboard/tree" onclick="pageTracker._trackPageview('/outgoing/github.com/mojodna/switchboard/tree?referer=');">http://github.com/mojodna/switchboard/tree</a><br />
command-line usage: <a href="http://mojodna.net/2009/07/16/switchboard-curl-for-xmpp.html" onclick="pageTracker._trackPageview('/outgoing/mojodna.net/2009/07/16/switchboard-curl-for-xmpp.html?referer=');">http://mojodna.net/2009/07/16/switchboard-curl-for-xmpp.html</a></p>
<p><strong>Useful Resources</strong><br />
If you&#8217;re going to do XMPP development in plain Ruby, there&#8217;s a <a href="http://peepcode.com/products/xmpp" onclick="pageTracker._trackPageview('/outgoing/peepcode.com/products/xmpp?referer=');">peepcode screencast</a> that you might find useful. It might be a bit dated, though, and most likely there are higher-level libraries that you can use.</p>
<p>In my case, I was working on harvesting blog entries from Superfeedr, so I use the Superfeedr gem, <a href="http://github.com/superfeedr/superfeedr-ruby" onclick="pageTracker._trackPageview('/outgoing/github.com/superfeedr/superfeedr-ruby?referer=');">superfeedr-ruby</a>. An alternative is the more streamlined and highly opinionated <a href="http://github.com/superfeedr/superfeedr-rb" onclick="pageTracker._trackPageview('/outgoing/github.com/superfeedr/superfeedr-rb?referer=');">superfeedr-rb</a>.</p>
<p>Even if you&#8217;re not doing Superfeedr work, it&#8217;s worth spending the time to study superfeedr-ruby, if only to study how it uses Skates. <a href="http://github.com/julien51/skates" onclick="pageTracker._trackPageview('/outgoing/github.com/julien51/skates?referer=');">Skates</a> (formerly Babylon) is a framework for building XMPP applications in Ruby, using EventMachine for handling connections.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Recently I wasted a day and half in debugging an XMPP-based service I&#8217;m working on. As is usual, the real reason I lost so much time was because I was totally unfamiliar with the terrain. I should have spent an hour or two on XMPP basics before I waded into this unfamiliar territory. If you&#8217;re [...] ]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2010-10-17 13:53:40</wp:post_date>
		<wp:post_date_gmt>2010-10-17 13:53:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>xmpp-development-in-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/10/xmpp-development-in-ruby/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[Radamanthus Batnag]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/10/xmpp-development-in-ruby/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://rad.batnag.org/2010/10/xmpp-development-in-ruby/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[f571a4820d8cbc09b5f3089fbdd61923]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[157719232]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>6</wp:comment_id>
		<wp:comment_author><![CDATA[Krasimir Angelov]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://pulse.yahoo.com/_RL5TRBA2JOTSRDCVUA5SVUKSLQ</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2010-10-17 18:26:00</wp:comment_date>
		<wp:comment_date_gmt>2010-10-17 18:26:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA["For each account, there should only be one XMPP client logged in at any time. If client A is already logged in, and then client B logs in, client A will be disconnected and will stop receiving notifications."

I will not agree with that. XMPP is designed to support few client logged in from one account at a time. That's why there is resource identifier in the JID -http://xmpp.org/extensions/xep-0029.html#sect-id273898 . 

When you have few clients logged in per account then their priority is important - the one with highest priority will receive messages/notifications.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>jQuery Submit</title>
		<link>http://pinoyrb.org/ruby/jquery-submit</link>
		<pubDate>Wed, 27 Oct 2010 14:16:17 +0000</pubDate>
		<dc:creator><![CDATA[Christopher Rigor]]></dc:creator>
		
		<category domain="tag"><![CDATA[jquery]]></category>

		<category domain="tag" nicename="jquery"><![CDATA[jquery]]></category>

		<guid isPermaLink="false">http://crigor.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When you submit a form, you might want to do something before the form is submitted. In the code below, we show an alert box with the value of the text field &#8216;name&#8217;.</p>
<pre class="brush: jscript; auto-links: false; light: true;">
$('#my-form').submit(function() {
  alert($('#name').val());
});
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[When you submit a form, you might want to do something before the form is submitted. In the code below, we show an alert box with the value of the text field &#8216;name&#8217;.

$('#my-form').submit(function() {
  alert($('#name').val());
});

]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2010-10-27 14:16:17</wp:post_date>
		<wp:post_date_gmt>2010-10-27 14:16:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>jquery-submit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[163784466]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/jquery-submit/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/jquery-submit/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://crigor.com/jquery-submit/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[56bf0bd709bc969de76aee3c906568eb]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>My Talk on Ruby/Rails</title>
		<link>http://pinoyrb.org/ruby/my-talk-on-rubyrails</link>
		<pubDate>Wed, 24 Nov 2010 14:55:59 +0000</pubDate>
		<dc:creator><![CDATA[Bryan Bibat]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://blog.bryanbibat.net/?p=1132</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Went to talk about Ruby and Ruby on Rails last Tuesday at the mini-<a href="http://www.devcon.ph/">DevCon</a> at University of Perpetual Help System – DALTA. That&#8217;s the 4th public talk for this year (4.5th if you count the RailsFTW plugging last month).</p>
<p>No &#8220;transcript&#8221; here, though. Just imagine me giving the presentation in front of college students right after I make a class roster app in front of them in under 5 minutes, installation to demo. And yeah, Microsoft is the sponsor I was referring to in the talk.</p>
<div class="prezi-player">
<style type="text/css" media="screen">.prezi-player { width: 550px; } .prezi-player-links { text-align: center; }</style>
<p><object id="prezi_7brbcmsbodq_" name="prezi_7brbcmsbodq_" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="550" height="450"><param name="movie" value="http://prezi.com/bin/preziloader.swf"/><param name="allowfullscreen" value="true"/><param name="allowscriptaccess" value="always"/><param name="bgcolor" value="#ffffff"/><param name="flashvars" value="prezi_id=7brbcmsbodq_&amp;lock_to_path=0&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"/><embed id="preziEmbed_7brbcmsbodq_" name="preziEmbed_7brbcmsbodq_" src="http://prezi.com/bin/preziloader.swf" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="550" height="450" bgcolor="#ffffff" flashvars="prezi_id=7brbcmsbodq_&amp;lock_to_path=0&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"></embed></object>
<div class="prezi-player-links">
<p><a title="Short presentation for DevCon" href="http://prezi.com/7brbcmsbodq_/ruby-on-rails/">Ruby on Rails</a> on <a href="http://prezi.com">Prezi</a></p>
</div>
</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Went to talk about Ruby and Ruby on Rails last Tuesday at the mini-DevCon at University of Perpetual Help System – DALTA. That&#8217;s the 4th public talk for this year (4.5th if you count the RailsFTW plugging last month). No &#8220;transcript&#8221; here, though. Just imagine me giving the presentation in front of college students right [...] ]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2010-11-24 14:55:59</wp:post_date>
		<wp:post_date_gmt>2010-11-24 14:55:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>my-talk-on-rubyrails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>syndication_source</wp:meta_key>
		<wp:meta_value><![CDATA[existence, refactored]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>rss:comments</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/11/24/my-talk-on-rubyrails/#comments]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>wfw:commentRSS</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/11/24/my-talk-on-rubyrails/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[178844969]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/2010/11/24/my-talk-on-rubyrails/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_item_hash</wp:meta_key>
		<wp:meta_value><![CDATA[ea81c1575286f5b68aacd110a92b0976]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_feed_id</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_id</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net/feed/]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>syndication_source_uri</wp:meta_key>
		<wp:meta_value><![CDATA[http://blog.bryanbibat.net]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
