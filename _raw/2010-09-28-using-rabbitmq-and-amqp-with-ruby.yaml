title:        'Using RabbitMQ and AMQP with Ruby'
author:       'Greg Moreno'
published_at: '2010-09-28'
filename:     '2010-09-28-using-rabbitmq-and-amqp-with-ruby'
permalink:    'http://gregmoreno.ca/using-rabbitmq-and-amqp-with-ruby/'
content: |-
  <p><a href="http://www.amqp.org/">AMQP</a> stands for Advanced Message Queuing Protocol. RabbitMQ is a server that implements the protocol. RabbitMQ is available on Linux, OSX, and Windows. Installation instructions for RabbitMQ are available at <a href="http://www.rabbitmq.com/install.html">http://www.rabbitmq.com/install.html</a></p>
  <p>I will be running RabbitMQ on Ubuntu 9.10. First, let&#8217;s install the server:</p>
  <pre class="brush: bash;">
      apt-get install rabbitmq-server
  </pre>
  <p>Note the server is installed as a daemon after the installation. Just to be sure, let&#8217;s stop and start the server.</p>
  <pre class="brush: bash;">
      greg@gohan:~$ sudo /etc/init.d/rabbitmq-server stop
      Stopping rabbitmq-server: rabbitmq-server.
      greg@gohan:~$ sudo /etc/init.d/rabbitmq-server start
      Starting rabbitmq-server: SUCCESS
      rabbitmq-server.
  </pre>
  <p>Next, we install the amqp gem by Aman Gupta. The gem can also be found at <a href="http://github.com/tmm1/amqp">http://github.com/tmm1/amqp</a></p>
  <pre class="brush: bash;">
      greg@gohan:~$ gem install amqp
      Building native extensions.  This could take a while...
      Successfully installed eventmachine-0.12.10
      Successfully installed amqp-0.6.7
      2 gems installed
  </pre>
  <p>Let&#8217;s now build a simple publisher code. Note the difference in the gem&#8217;s name and the file you need to use the gem.</p>
  <pre class="brush: ruby;">
      require 'mq'
  
      Thread.new { AMQP.start }
  
      # All queues are created automatically the first time it is
      # accessed. Make sure this is the same queue our consumers
      # will use.
      q = MQ.queue('my_queue')
  
      i=0
      while true
        i += 1
        q.publish("Hello, World #{i}")
        sleep(1)
      end
  </pre>
  <p>Next, the consumer code:</p>
  <pre class="brush: ruby;">
      require 'mq'
  
      AMQP.start do
        q = MQ.queue('my_queue')
  
        q.subscribe do |msg|
          puts "#{Time.now}: #{msg}" if msg
        end
      end
  </pre>
  <p>The &#8216;subscribe&#8217; method registers with the queue telling it to call the block when a message has arrived. Alternatively, you can use &#8216;pop&#8217; but this would constantly poll the server for new messages making unnecessary calls even if the queue is empty.</p>
  <pre class="brush: ruby;">
      AMQP.start do
        q = MQ.queue('my_queue')
        q.pop do |msg|
          puts "#{Time.now}: #{msg}" if msg
          q.pop
        end
      end
  </pre>
  <p>If you want to run AMQP on several machines, just specify the location of the broker in your publisher and consumer code:</p>
  <pre class="brush: ruby;">
      AMQP.start(:host => '192.168.0.195') do
        # code here
      end
  </pre>
  <p>You only need to run 1 rabbitmq server, which in my case is on Ubuntu. When you try the code in other machines, you only need the <a href="http://github.com/tmm1/amqp">amqp</a> gem installed.</p>
  <p>I highly recommend <a href="http://tinyurl.com/2aqcz22">Distributed Programming with Ruby</a> by Mark Bates if you&#8217;re interested in distributed programming.</p>
