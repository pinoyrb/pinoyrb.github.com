title:        'Rails 3 upgrade part 2: Routes'
author:       'Greg Moreno'
published_at: '2010-08-12'
filename:     '2010-08-12-rails-3-upgrade-part-2-routes'
permalink:    'http://gregmoreno.ca/rails-3-upgrade-part-2-routes/'
content: |-
  <p>In the previous post, I outlined the steps I took to<a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/"> upgrade and boot a Rails 3 application</a>. This time, I share my experience upgrading the routes file. By the way, I forgot to mention in the last post that I&#8217;m using <a href="http://www.railsupgradehandbook.com/">Rails 3 Upgrade Handbook by Jeremy McAnally</a>.</p>
  <p>The task rails:upgrade:routes (comes with the rails_upgrade plugin) converts your Rails 2 routes into Rails 3 format. It handles most cases but you may still need to edit the generated routes depending on your setup.</p>
  <p><strong>map.root</strong></p>
  <p>Below, I show the old route and the generated version. </p>
  <pre class="brush: ruby;">
  # Rails 2
  map.root :controller =&gt; 'search'
  
  # Rails 3
  match '/' =&gt; 'search#index'
  </pre>
  <p>The conversion is correct but since I use the named route &#8216;root_path&#8217; in my application, I had to change it:</p>
  <pre class="brush: ruby;">
  root :to =&gt; 'search#index'
  </pre>
  <p><strong>:as, :member, :any, :path_names</strong></p>
  <pre class="brush: ruby;">
  # Rails 2
  map.resources :workspaces, :as =&gt; 'b', :member =&gt; { :widget =&gt; :get } do |workspace|
    # ...
  end
  
  # Rails 3
  resources :workspaces do
    # ...
  end
  </pre>
  <p>In Rail 3, :as  is for overriding the normal naming for named routes witout affecting the path. For example, the code below will recognize the path &#8216;/workspaces&#8217; and the named route becomes offices_path.</p>
  <pre class="brush: ruby;">
  resources :workspaces, :as =&gt; &quot;offices&quot;
  </pre>
  <p>In Rails 2, :as affects the path. In my example, &#8216;/b&#8217; routes the request to WorkspacesController. So for Rails 3 to recognize the path &#8216;/b&#8217;, I need to add another route.</p>
  <pre class="brush: ruby;">
  match 'b' =&gt; 'workspaces#index'
  </pre>
  <p>The rails:upgrade:routes did not convert the following member route and had to be added.</p>
  <pre class="brush: ruby;">
  :member =&gt; { :widget =&gt; :get }
  </pre>
  <p>The new route becomes:</p>
  <pre class="brush: ruby;">
  resources :workspaces do
    get :widget, :on =&gt; :member
  end
  </pre>
  <p>In Rails 2, you can use the :any option to define a custom route that responds to any request method. </p>
  <pre class="brush: ruby;">
  # Rails 2
  workspace.resource :twitter_account, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }
  
  # generated by rails:upgrade:routes
  resource :twitter_account do
    member do
      any :authorize
    end
  end
  </pre>
  <p>The rails:upgrade:routes converted the :any option. However,  when I booted the application, it raised an exception:</p>
  <pre class="brush: ruby;">
  undefined method `any' for #&lt;ActionDispatch::Routing::Mapper:0xb71b6fcc&gt; (NoMethodError)
  </pre>
  <p>To fix this, I replaced the offending line with a match method.</p>
  <pre class="brush: ruby;">
  resource :twitter_account do
    match :authorize, :on =&gt; :member
  end
  </pre>
  <p>:path_names was also not included in the generated route so has to be added as well.</p>
  <pre class="brush: ruby;">
  resource :twitter_account, :path_names =&gt; { :edit =&gt; 'request_authorization' } do
    match :authorize, :on =&gt; :member
  end
  </pre>
  <p><strong>Specifying a different controller</strong></p>
  <pre class="brush: ruby;">
  # Rails 2
  map.resource :settings, :controller =&gt; 'users' do |settings|
    settings.resource :twitter_account, :name_prefix =&gt; nil, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }
  end
  
  # generated by rake:upgrade:routes
  resource :settings do
    resource :twitter_account do
      member do
        any :authorize
      end
    end
  end
  </pre>
  <p>To fix, just specify the controller</p>
  <pre class="brush: ruby;">
  resource :settings,:controller =&gt; :users do
    # ...
  end
  </pre>
  <p><strong>Undefined named route helper</strong></p>
  <p>I encountered this exception while trying the application:</p>
  <pre class="brush: ruby;">
  undefined method `edit_twitter_account_path'
  </pre>
  <p>In Rails 2, this is the route that created this named route:</p>
  <pre class="brush: ruby;">
  map.resource :settings, :controller =&gt; 'users' do |settings|
    settings.resource :twitter_account, :name_prefix =&gt; nil, :member =&gt; { :authorize =&gt; :any }, :path_names =&gt; { :edit =&gt; 'request_authorization' }
  end
  </pre>
  <p>This is a bit tricky for me because I can&#8217;t remember why I nested it :) Nevertheless, to fix the Rails 3 error, I moved :twitter_account outside of :settings. The correct Rails routes now look like these:</p>
  <pre class="brush: ruby;">
  resource :settings, :controller =&gt; :users
  resource :twitter_account, :path_names =&gt; { :edit =&gt; 'request_authorization' } do
    match :authorize, :on =&gt; :member
  end
  </pre>
  <p><strong>Custom polymorphic named route helper</strong></p>
  <p>A long time ago, I played around with polymorphic paths. In hindsight, that is a waste of time but back then it was fun or should I say a time well wasted. I have a named route helper that takes any object and used like this:</p>
  <pre class="brush: ruby;">
  # in views
  link_to 'invitations', invitations_path(@voteable)
  
  # definition
  module RoutesHelper
    def invitations_path(voteable)
      send(&quot;#{voteable.class.name.underscore}_invitations_path&quot;, voteable)
    end
  
    def workspace_invitations_path(workspace)
      super(:workspace_id =&gt; workspace)
    end
  
    # ...
  end
  </pre>
  <p>In Rails 3, my named route helper is not being called. Thus, wrong URL is generated. I know, I know it should have been a simple <a href="http://api.rubyonrails.org/classes/ActionController/PolymorphicRoutes.html">polymorphic_path</a> call but I still wonder why my method is not called. Moving on, the new ruby is:</p>
  <pre class="brush: ruby;">
  link_to 'invitations', polymorphic_path([@voteable, :invitations])
  </pre>
  <p>I cheated a bit here because I want this post to focus on routes. Along the way, I had to update non-route related code to discover the route problems. <a href="http://edgeguides.rubyonrails.org/routing.html">You can learn more about Rails 3 routes from this RailsGuides page</a>.</p>
  <p>There are still more updates to be done and I&#8217;ll share them in other posts. Just like your favorite late night infomercial, &#8220;Wait! There&#8217;s more&#8221;.</p>
  <p>Next: <a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/">Rails 3 upgrade part 3: Code fixes, views, and forms</a></p>
  <p>Previous:  <a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/">Rails 3 upgrade Part 1: Booting the application</a></p>
  
  
  <p>Related posts:<ol><li><a href='http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 3: Code fixes, views, and forms'>Rails 3 upgrade part 3: Code fixes, views, and forms</a> <small>This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and getting the application to boot while part 2...</small></li>
  <li><a href='http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 4: Prototype helpers and Javascript'>Rails 3 upgrade part 4: Prototype helpers and Javascript</a> <small>Rails 3 is embracing the unobtrusive Javascript (or UJS) mantra which is good because it is the right way; at the same time, it is bad because many applications will...</small></li>
  <li><a href='http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/' rel='bookmark' title='Permanent Link: Rails 3 upgrade part 1: Booting the application'>Rails 3 upgrade part 1: Booting the application</a> <small>It&#8217;s time for another Rails upgrade! We all have our share of bad experiences and frustrations every time we upgrade a piece of software. Even for technical people who live...</small></li>
  </ol></p>
  <p><a href="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/0/da"><img src="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/0/di" border="0" ismap="true"></img></a><br/>
  <a href="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/1/da"><img src="http://feedads.g.doubleclick.net/~a/T3CEAdDXIC0faZJLd_WgC1OpnOU/1/di" border="0" ismap="true"></img></a></p>
