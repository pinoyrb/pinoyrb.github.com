---
layout: post
title:         'Rails 3 upgrade part 3: Code fixes, views, and forms'
author:        'Greg Moreno'
published_at:  2010-08-14
original_link: http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/
---

<h1> {{ page.title }} </h1>

<p class='meta'>by {{ page.author }} &middot; {{ page.published_at }} &middot; <a href='{{ page.original_link }}'>Permalink</a></p>

This is part 3 of my Rails 2 to Rails 3 upgrade experience. Part 1 is about the initial code upgrade and <a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/">getting the application to boot</a> while <a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/">part 2 deals with routes</a>. While Part 2 is mainly about routes, getting it work involved changes in other parts of the code which I'll share this time. So while you are updating your routes, you may need to check this post in between changes.

<strong>Update ApplicationController</strong>

After regenerating your application with rails (i.e. rails new appname -d dbadapter), your ApplicationController would look like this:

<pre class="brush: ruby">
class ApplicationController < ActionController::Base
  protect_from_forgery
end
</pre>

There's no need to panic because rails:upgrade:backup made a copy of the controller to application_controller.rb.rails2.

If you have a lot of helper modules, you'll most likely have this code in your Rails 2 ApplicationController:

helper :all

If you encounter a missing method error while monkey clicking your application, you probably forgot to update your Rails 3 ApplicationController.

<strong>Update ApplicationHelper</strong>

The ApplicationHelper module was also modified by the rails upgrde. So don't forget to update this, too.

<strong>RAILS_* constants are deprecated is not entirely true</strong>

When you run rails:upgrade:check, it will list items you need to update including deprecated code. There is no need to change these as the word 'deprecated' means but I encountered several "can't convert nil into String" errors. 

<pre class="brush: bash">
rake rails:upgrade:check
(in /mnt/hgfs/greg-mini/dev/projects/propsify)
Deprecated constant(s)
Constants like RAILS_ENV, RAILS_ROOT, and RAILS_DEFAULT_LOGGER are now deprecated.
More information: http://litanyagainstfear.com/blog/2010/02/03/the-rails-module/

The culprits: 
  ...
</pre>

The weird part is some constants are just doing fine.  In any case, here are the conversion:

<pre class="brush: bash">
RAILS_ROOT  -> Rails.root
RAILS_ENV -> Rails.env
RAILS_DEFAULT_LOGGER -> Rails.logger
</pre>

You can also check your environment the Ruby way:

<pre class="brush: ruby">
# before
if RAILS_ENV == 'production'
  ...

# Rails 3
if Rails.env.production?
</pre>

<strong>Output strings are automatically escaped</strong>

We should all be rejoicing that Rails is now serious about XSS protection except now your pages have become ugly with all those HTML tags. For example the code below will not give you a clickable link.

<pre class="brush: ruby">
- signup = link_to('create one here', signup_path)
= "If you do not have an account, #{signup}."
</pre>

To fix this, use the raw() helper.

<pre class="brush: ruby">
= raw "If you do not have an account, #{signup}."
</pre>

Too bad for me, I got tons of views that were coded like this.

<strong>Check for 'concat'</strong>

A popular technique to simplify your view code is to use content blocks. You create a helper that takes a block and wraps it in some HTML tags. A simple implementation would look like this:

<pre class="brush: ruby">
module LayoutHelper
  def main_column(options={}, &amp;block)
    # calls column()
  end

  def column(options={}, &amp;block)
    # concat is not needed in Rails 3
    concat content_tag(:div, capture(&amp;block), options)
  end
end

# in your view
- main_column do
  = render 'form'
</pre>

This works fine in Rails 2 but in Rails 3 the block gets outputted twice. <a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/concat">concat</a> is the way to output text in a non-output block (i.e. &lt;% %&gt; in erb) but it seems like <a href="http://asciicasts.com/episodes/208-erb-blocks-in-rails-3">erb blocks in Rails 3 do not need concat</a>.

<strong>Helpers with blocks</strong>

Before Rails 3, form_for or fields_for use non-output syntax; it means no equals sign. 

<pre class="brush: ruby">
# erb
<% form_for @offer do |f| %>
  # ...
<% end %>

# haml
- form_for @offer do |f|
  # ...
</pre>

In Rails 3, it should now be written as an output block.

<pre class="brush: ruby">
# erb
<%= form_for @offer do |f| %>
  # ...
<% end %>

# haml
= form_for @offer do |f|
  = f.fields_for :items do |ff|
    # ...
</pre>

The rule is if the method is expected to return a string, it should use the output syntax. If it just <a href="http://edgeguides.rubyonrails.org/3_0_release_notes.html">buffering the returned string like content_for, it should NOT have the equals sign</a>.

Previous: <a href="http://gregmoreno.ca/rails-3-upgrade-part-2-routes/">Rails 3 upgrade part 2: Routes</a>
Next: <a href="http://gregmoreno.ca/rails-3-upgrade-part-4-prototype-helpers-and-javascript/">Rails 3 upgrade part 4: Prototype helpers and Javascript</a>
