---
layout: post
title:         'Rails 3 upgrade part 2: Routes'
author:        'Greg Moreno'
published_at:  2010-08-12
original_link: http://gregmoreno.ca/rails-3-upgrade-part-2-routes/
---

<h1> {{ page.title }} </h1>

<p class='meta'>by {{ page.author }} &middot; {{ page.published_at }} &middot; <a href='{{ page.original_link }}'>Permalink</a></p>

In the previous post, I outlined the steps I took to<a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/"> upgrade and boot a Rails 3 application</a>. This time, I share my experience upgrading the routes file. By the way, I forgot to mention in the last post that I'm using <a href="http://www.railsupgradehandbook.com/">Rails 3 Upgrade Handbook by Jeremy McAnally</a>.

The task rails:upgrade:routes (comes with the rails_upgrade plugin) converts your Rails 2 routes into Rails 3 format. It handles most cases but you may still need to edit the generated routes depending on your setup.

<strong>map.root</strong>

Below, I show the old route and the generated version. 

<pre class="brush: ruby">
# Rails 2
map.root :controller => 'search'

# Rails 3
match '/' => 'search#index'
</pre>

The conversion is correct but since I use the named route 'root_path' in my application, I had to change it:

<pre class="brush: ruby">
root :to => 'search#index'
</pre>

<strong>:as, :member, :any, :path_names</strong>

<pre class="brush: ruby">
# Rails 2
map.resources :workspaces, :as => 'b', :member => { :widget => :get } do |workspace|
  # ...
end

# Rails 3
resources :workspaces do
  # ...
end
</pre>

In Rail 3, :as  is for overriding the normal naming for named routes witout affecting the path. For example, the code below will recognize the path '/workspaces' and the named route becomes offices_path.

<pre class="brush: ruby">
resources :workspaces, :as => 'offices'
</pre>

In Rails 2, :as affects the path. In my example, '/b' routes the request to WorkspacesController. So for Rails 3 to recognize the path '/b', I need to add another route.

<pre class="brush: ruby">
match 'b' => 'workspaces#index'
</pre>

The rails:upgrade:routes did not convert the following member route and had to be added.

<pre class="brush: ruby">
:member => { :widget => :get } 
</pre>

The new route becomes:

<pre class="brush: ruby">
resources :workspaces do
  get :widget, :on => :member
end
</pre>

In Rails 2, you can use the :any option to define a custom route that responds to any request method. 

<pre class="brush: ruby">
# Rails 2
workspace.resource :twitter_account, :member => { :authorize => :any }, :path_names => { :edit => 'request_authorization' }

# generated by rails:upgrade:routes
resource :twitter_account do
  member do
    any :authorize
  end
end
</pre>

The rails:upgrade:routes converted the :any option. However,  when I booted the application, it raised an exception:

<pre class="brush: ruby">
undefined method 'any' for #<ActionDispatch::Routing::Mapper:0xb71b6fcc> (NoMethodError)
</pre>

To fix this, I replaced the offending line with a match method.

<pre class="brush: ruby">
resource :twitter_account do
  match :authorize, :on => :member
end
</pre>

:path_names was also not included in the generated route so has to be added as well.

<pre class="brush: ruby">
resource :twitter_account, :path_names => { :edit => 'request_authorization' } do
  match :authorize, :on => :member
end
</pre>

<strong>Specifying a different controller</strong>

<pre class="brush: ruby">
# Rails 2
map.resource :settings, :controller => 'users' do |settings|
  settings.resource :twitter_account, :name_prefix => nil, :member => { :authorize => :any }, :path_names => { :edit => 'request_authorization' }
end

# generated by rake:upgrade:routes
resource :settings do
  resource :twitter_account do
    member do
      any :authorize
    end
  end
end
</pre>

To fix, just specify the controller

<pre class="brush: ruby">
resource :settings, :controller => :users do
  # ...
end
</pre>

<strong>Undefined named route helper</strong>

I encountered this exception while trying the application:

<pre class="brush: ruby">
undefined method 'edit_twitter_account_path'
</pre>

In Rails 2, this is the route that created this named route:

<pre class="brush: ruby">
map.resource :settings, :controller => 'users' do |settings|
  settings.resource :twitter_account, :name_prefix => nil, :member => { :authorize => :any }, :path_names => { :edit => 'request_authorization' }
end
</pre>

This is a bit tricky for me because I cannot remember why I nested it :) Nevertheless, to fix the Rails 3 error, I moved :twitter_account outside of :settings. The correct Rails routes now look like these:

<pre class="brush: ruby">
resource :settings, :controller => :users
resource :twitter_account, :path_names => { :edit => 'request_authorization' } do
  match :authorize, :on => :member
end
</pre>

<strong>Custom polymorphic named route helper</strong>

A long time ago, I played around with polymorphic paths. In hindsight, that is a waste of time but back then it was fun or should I say a time well wasted. I have a named route helper that takes any object and used like this:

<pre class="brush: ruby">
# in views
link_to 'invitations', invitations_path(@voteable)

# definition
module RoutesHelper
  def invitations_path(voteable)
    send("#{voteable.class.name.underscore}_invitations_path", voteable)
  end

  def workspace_invitations_path(workspace)
    super(:workspace_id => workspace)
  end

  # ...
end
</pre>

In Rails 3, my named route helper is not being called. Thus, wrong URL is generated. I know, I know it should have been a simple <a href="http://api.rubyonrails.org/classes/ActionController/PolymorphicRoutes.html">polymorphic_path</a> call but I still wonder why my method is not called. Moving on, the new ruby is:

<pre class="brush: ruby">
link_to 'invitations', polymorphic_path([@voteable, :invitations])
</pre>

I cheated a bit here because I want this post to focus on routes. Along the way, I had to update non-route related code to discover the route problems. <a href="http://edgeguides.rubyonrails.org/routing.html">You can learn more about Rails 3 routes from this RailsGuides page</a>.

There are still more updates to be done and I'll share them in other posts. Just like your favorite late night infomercial, "Wait! There's more".

Next: <a href="http://gregmoreno.ca/rails-3-upgrade-part-3-code-fixes-views-and-forms/">Rails 3 upgrade part 3: Code fixes, views, and forms</a>
Previous:  <a href="http://gregmoreno.ca/rails-3-upgrade-part-1-booting-the-application/">Rails 3 upgrade Part 1: Booting the application</a>
